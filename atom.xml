<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Infinite.ft的博客</title>
  <icon>https://www.gravatar.com/avatar/9b6d3cb75e6e36a069f9079ea692bf81</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://free-free.github.io/"/>
  <updated>2018-03-02T12:59:58.858Z</updated>
  <id>https://free-free.github.io/</id>
  
  <author>
    <name>infinite.ft</name>
    <email>infinite.ft@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Create CLIs in Python Using Fire</title>
    <link href="https://free-free.github.io/2018/02/28/python-lib-fire/"/>
    <id>https://free-free.github.io/2018/02/28/python-lib-fire/</id>
    <published>2018-02-28T12:25:21.000Z</published>
    <updated>2018-03-02T12:59:58.858Z</updated>
    
    <content type="html"><![CDATA[<p>In 2018 early, Google open-source it’s one of new Python library called <a href="https://github.com/google/python-fire" target="_blank" rel="external"><strong>Fire</strong></a>. <strong>Fire</strong> is a powerful tool to automatically generate command line interfaces(CLIs) from any Python object. With it’s assistance, you can easily transition between Bash and Python, also develop and debug your Python code. That’s why here I choose it. </p><h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><p>Like other Python library, The installation of <strong>Fire</strong> is very simple and clear. You just need to type the following command in your bash interface, then it will automatically finish.</p><pre class="line-numbers language-shell"><code class="language-shell">$ pip install fire<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Usage-Exmaples"><a href="#Usage-Exmaples" class="headerlink" title="Usage Exmaples"></a>Usage Exmaples</h4><h5 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h5><p><strong>version1: <code>fire.Fire()</code></strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#@file: hello.py</span><span class="token keyword">import</span> fire<span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello {name}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fire<span class="token punctuation">.</span>Fire<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Here expose  <code>say_hello</code> function to command line,so you can call it in your bash like the following manner.</p><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py say_hello johnHello john<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>version2: <code>fire.Fire(&lt;fn&gt;)</code></strong></p><p>Besides call <code>fire.Fire()</code> directly, also you can pass a function to it. Doing this,  it will be slightly different when you call it in your bash shell command line.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#file: hello.py</span><span class="token keyword">import</span> fire<span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">"Hello {name}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>      fire<span class="token punctuation">.</span>Fire<span class="token punctuation">(</span>say_hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">$ python hello.py johnHello john<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h5 id="Multiple-commands"><a href="#Multiple-commands" class="headerlink" title="Multiple commands"></a>Multiple commands</h5><p>In the previous section, we just have one function totally, it’s hard to show you the power of <strong>fire</strong>. In this section, multiple commands will be introduced. </p><p><strong>version 1:<code>fire.Fire()</code></strong></p><p>Like the <code>hello world</code> example, here you also can write multiple function , then call it directly in your bash shell.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#@file: mcmds.py</span><span class="token keyword">import</span> fire<span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token keyword">def</span> <span class="token function">cumsum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> functools<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fire<span class="token punctuation">.</span>Fire<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ python mcmds.py cumsum 1 2 3 410$ python mcmds.py add 12 3244<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>version 2: <code>fire.Fire(&lt;dict&gt;)</code></strong></p><p>If you intend to expose your function as a different name, this version may be suitable for you.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#@file: mcmds.py</span><span class="token keyword">import</span> fire<span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token keyword">def</span> <span class="token function">cumsum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> functools<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fire<span class="token punctuation">.</span>Fire<span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'add'</span><span class="token punctuation">:</span>add<span class="token punctuation">,</span>          <span class="token string">'cumsum'</span><span class="token punctuation">:</span> cumsum    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ python mcmds.py add 10 3244$ python mcmds.py cumsum 1 2 3 410<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>version 3: <code>fire.Fire(&lt;object&gt;)</code></strong></p><p>As shown by the previous examples,  they are all functions,  if you are going to expose your object’s method as a command line . Is there all solution for satisfying your demands? </p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#@file: hello.py</span><span class="token keyword">import</span> fire<span class="token keyword">import</span> functools<span class="token keyword">class</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y    <span class="token keyword">def</span> <span class="token function">cumsum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> functools<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    calc <span class="token operator">=</span> Calculator<span class="token punctuation">(</span><span class="token punctuation">)</span>    fire<span class="token punctuation">.</span>Fire<span class="token punctuation">(</span>calc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py add 10 1020$ python hello.py cumsum 10 1 2 3 4 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>version 4: <code>fire.Fire(&lt;class&gt;)</code></strong></p><p>The one of difference between version 3 and version 4 is that you can pass arguments for constructing the class. </p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#@file: hello.py</span><span class="token keyword">import</span> fire<span class="token keyword">class</span> <span class="token class-name">IntNumber</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> initial_value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_ival <span class="token operator">=</span> initial_value    <span class="token keyword">def</span> <span class="token function">plus</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_ival <span class="token operator">+</span> x    <span class="token keyword">def</span> <span class="token function">times</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_ival <span class="token operator">*</span> x<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fire<span class="token punctuation">.</span>Fire<span class="token punctuation">(</span>IntNumber<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The arguments to <code>__init__</code> method must be passed with the –flag syntax, like the following usage.</p><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py plus 1011$ python hello.py <span class="token function">times</span> 1010$ python hello.py plus 10 --initial_value<span class="token operator">=</span>1020$ python hello.py <span class="token function">times</span> 10 --initial_value<span class="token operator">=</span>0 <span class="token comment" spellcheck="true"># here you pass initial value to init method using --falg syntax </span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="Grouping-Commands"><a href="#Grouping-Commands" class="headerlink" title="Grouping Commands"></a>Grouping Commands</h5><p>In addition, you can make a command line interface with grouped commands, like the below.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#@file: hello.py</span><span class="token keyword">import</span> fire<span class="token keyword">class</span> <span class="token class-name">RobotLeg</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"The leg is moving forward!"</span>    <span class="token keyword">def</span> <span class="token function">state</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>  <span class="token string">"The leg is active!"</span><span class="token keyword">class</span> <span class="token class-name">RobotArm</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"The arm is moving!"</span>    <span class="token keyword">def</span> <span class="token function">state</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"The arm is active!"</span><span class="token keyword">class</span> <span class="token class-name">Robot</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>arm <span class="token operator">=</span> RobotArm<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>leg <span class="token operator">=</span> RobotLeg<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>arm<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>leg<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    # also can you define 'run' function as a generator, it works samely!    def run(self):          yield self.arm.run()        yield self.leg.run()    """</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fire<span class="token punctuation">.</span>Fire<span class="token punctuation">(</span>Robot<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Here’s how this looks at the command line:</p><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py runThe arm is moving<span class="token operator">!</span>The leg is moving forward<span class="token operator">!</span>$ python hello.py arm runThe arm is moving<span class="token operator">!</span>$ python hello.py arm stateThe arm is active<span class="token operator">!</span>$ python hello.py leg runThe leg is moving forward<span class="token operator">!</span>$ python hello.py leg stateThe leg is active<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="Accessing-Properties"><a href="#Accessing-Properties" class="headerlink" title="Accessing Properties"></a>Accessing Properties</h5><p>Accessing Properties of object is much necessary and useful, as you expose the specific object to the command line.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#@file: hello.py</span><span class="token keyword">import</span> fire<span class="token keyword">class</span> <span class="token class-name">City</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> postal_code<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"paradise"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pcode <span class="token operator">=</span> postal_code        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fire<span class="token punctuation">.</span>Fire<span class="token punctuation">(</span>City<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py --postal_code<span class="token operator">=</span>521002 pcode521002$ python hello.py --postal_code<span class="token operator">=</span>512002 nameparadise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="Chaining-Function-Calls"><a href="#Chaining-Function-Calls" class="headerlink" title="Chaining Function Calls"></a>Chaining Function Calls</h5><p>When you call a <strong>Fire</strong> command, the same action you can take on the <em>result</em> of the call to <strong>Fire</strong>. For example:</p><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py --postal_code<span class="token operator">=</span>521000 name upperPARADISE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The above code works because the <code>upper</code> is a method on all strings. </p><p>So, if you want to set up your functions to chain nicely, all you have to do is have a class whose methods return self. An example is following.(tip: this example is taken from official document).</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#@file: hello.py</span><span class="token keyword">import</span> fire<span class="token keyword">class</span> <span class="token class-name">BinaryCanvas</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pixels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> size <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>_size <span class="token operator">=</span> size        self<span class="token punctuation">.</span>_row <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>_col <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\r\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>str<span class="token punctuation">(</span>pixel<span class="token punctuation">)</span> <span class="token keyword">for</span> pixel <span class="token keyword">in</span> row<span class="token punctuation">)</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> self<span class="token punctuation">.</span>pixels<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_row <span class="token operator">=</span> row <span class="token operator">%</span> self<span class="token punctuation">.</span>_size        self<span class="token punctuation">.</span>_col <span class="token operator">=</span> col <span class="token operator">%</span> self<span class="token punctuation">.</span>_size        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">on</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">off</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>pixels<span class="token punctuation">[</span>self<span class="token punctuation">.</span>_row<span class="token punctuation">]</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>_col<span class="token punctuation">]</span> <span class="token operator">=</span> value        <span class="token keyword">return</span> self<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fire<span class="token punctuation">.</span>Fire<span class="token punctuation">(</span>BinaryCanvas<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py move 3 3 on move 3 6 on move 6 3 on move 6 6 on move 7 4 move 7 5 on __str__0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 00 0 0 1 0 0 1 0 0 00 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 00 0 0 1 0 0 1 0 0 00 0 0 0 0 1 0 0 0 00 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="Passing-Arguments-To-Function"><a href="#Passing-Arguments-To-Function" class="headerlink" title="Passing Arguments To Function"></a>Passing Arguments To Function</h5><p>Except positional argument can be passed , as you run a function at command line, also you can pass argument by using flag syntax, like the arguments to <code>__init__</code>  method.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#@file: hello.py</span><span class="token keyword">import</span> fire<span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_color <span class="token operator">=</span> color    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> max_speed<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"The {color} car is runing below the maximum speed {max_speed} mph!"</span>\        <span class="token punctuation">.</span>format<span class="token punctuation">(</span>color<span class="token operator">=</span>self<span class="token punctuation">.</span>_color<span class="token punctuation">,</span> max_speed<span class="token operator">=</span>max_speed<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fire<span class="token punctuation">.</span>Fire<span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py --color red run 100The red car is runing below the maximum speed 100 mph<span class="token operator">!</span>$ python hello.py --color red run --max-speed<span class="token operator">=</span>100The red car is runing below the maximum speed 100 mph<span class="token operator">!</span>$ python hello.py --color red run --max_speed<span class="token operator">=</span>100The red car is runing below the maximum speed 100 mph<span class="token operator">!</span>$ python hello.py --color red run --max-speed 100The red car is runing below the maximum speed 100 mph<span class="token operator">!</span>$ python hello.py run --max-speed 100 --color redThe red car is runing below the maximum speed 100 mph<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>From the above invocation example, you might found some interesting things.</p><ul><li>Hyphens and underscores (<code>-</code> and <code>_</code>) are interchangeable in member names and flag names.</li><li>The constructor’s arguments can come after the function’s arguments or before the function.</li><li>The equal sign between the flag name and its value is optional.</li></ul><hr><h5 id="Arguments-Separator"><a href="#Arguments-Separator" class="headerlink" title="Arguments Separator"></a>Arguments Separator</h5><p>Normally, the arguments passed to a function are fixed, so you can append the further operations on the results, This is the chaining function call rule that are introduced before. But when your arguments are variable, the further operations( i.e. function)  on the results will be treated as an another argument that passed to the function. So, you need to an extra syntax to separate the arguments and the operations on the results. The default separator in <strong>fire</strong>  is the hyphens <code>-</code> , you can change the default separator using <code>--separator</code>  flags. Flags are alway separated from your Fire command by an isolated <code>--</code>. All arguments after the separator will be used to process the result of the function, rather than being passed to the function itself. Here’s an example will show how it works.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#@file: hello.py</span><span class="token keyword">import</span> fire<span class="token keyword">def</span> <span class="token function">sort_animals</span><span class="token punctuation">(</span><span class="token operator">*</span>animals<span class="token punctuation">)</span><span class="token punctuation">:</span>    sorted_items <span class="token operator">=</span> sorted<span class="token punctuation">(</span>animals<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> item<span class="token punctuation">:</span> len<span class="token punctuation">(</span>str<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">' > '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sorted_items<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fire<span class="token punctuation">.</span>Fire<span class="token punctuation">(</span>sort_animals<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py <span class="token function">cat</span> dog pig chicken<span class="token function">cat</span> <span class="token operator">></span> dog <span class="token operator">></span> pig <span class="token operator">></span> chicken<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>If we want to convert all animal’s name characters to the uppercase, how to do that? </p><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py <span class="token function">cat</span> dog pig chicken upper<span class="token function">cat</span> <span class="token operator">></span> dog <span class="token operator">></span> pig <span class="token operator">></span> upper <span class="token operator">></span> chicken<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>As you see the above output result, it didn’t work! Hey, don’t forget thing mentioned just now:<strong>Separator</strong>.</p><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py <span class="token function">cat</span> dog pig chicken - upperCAT <span class="token operator">></span> DOG <span class="token operator">></span> PIG <span class="token operator">></span> CHICKEN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Congratulations! it do works. </p><pre class="line-numbers language-bash"><code class="language-bash">$ python hello.py <span class="token function">cat</span> dog pig chicken X upper -- --separator XCAT <span class="token operator">></span> DOG <span class="token operator">></span> PIG <span class="token operator">></span> CHICKEN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The above code also work fine! Here you just change the default separator the hyphens <code>-</code> to <code>X</code>.</p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://github.com/google/python-fire/blob/master/docs/guide.md" target="_blank" rel="external">[1] :The Python Fire Guide</a></p><p><a href="https://github.com/google/python-fire" target="_blank" rel="external">[2] : README</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In 2018 early, Google open-source it’s one of new Python library called &lt;a href=&quot;https://github.com/google/python-fire&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
      <category term="google-dev" scheme="https://free-free.github.io/tags/google-dev/"/>
    
  </entry>
  
  <entry>
    <title>Convert Amr to Mp3 Using Python and Ffmpeg</title>
    <link href="https://free-free.github.io/2018/02/27/convert-amr-to-mp3-using-python-and-ffmpeg/"/>
    <id>https://free-free.github.io/2018/02/27/convert-amr-to-mp3-using-python-and-ffmpeg/</id>
    <published>2018-02-27T12:49:50.000Z</published>
    <updated>2018-02-28T00:42:59.604Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous blog, I have introduced how to extract audio from video using python + ffmpeg. In this blog, the toolkit is same, but the purpose is slightly different, here convert to <em>amr</em>  audio to <em>mp3</em> audio. When it comes to audio conversion using ffmpeg, I have to say it’s very simple, one line code did complete it in your command line, like the following commands. </p><pre class="line-numbers language-shell"><code class="language-shell">$ ffmpeg -i input.amr output.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>To automate  the process, we also need the assistance of python, the codes is much similar to the last post, just  one place changed.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true">#@file: audio2audio.py</span><span class="token keyword">import</span> os<span class="token keyword">import</span> fnmatch<span class="token keyword">import</span> ffmpeg<span class="token keyword">from</span> optparse <span class="token keyword">import</span> OptionParserparser <span class="token operator">=</span> OptionParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-s'</span><span class="token punctuation">,</span> <span class="token string">'--src'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'src'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'source dir'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'./'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-d'</span><span class="token punctuation">,</span> <span class="token string">'--dest'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'dest'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'destination dir'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'./output'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'--input-type'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'inputType'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'input type'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'amr'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"--ouput-type"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'outputType'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'ouput type'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'mp3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">filter_file</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_ext<span class="token punctuation">)</span><span class="token punctuation">:</span>    flist <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    all_file <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> flist<span class="token punctuation">:</span>        filepath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>            all_file<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>filter_file<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> file_ext<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> fnmatch<span class="token punctuation">.</span>fnmatch<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">'*.'</span> <span class="token operator">+</span> file_ext<span class="token punctuation">)</span><span class="token punctuation">:</span>            all_file<span class="token punctuation">.</span>append<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">return</span> all_file<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>options<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    src <span class="token operator">=</span> options<span class="token punctuation">.</span>src    dest <span class="token operator">=</span> options<span class="token punctuation">.</span>dest    inputType <span class="token operator">=</span> options<span class="token punctuation">.</span>inputType    outputType <span class="token operator">=</span> options<span class="token punctuation">.</span>outputType    all_file <span class="token operator">=</span> filter_file<span class="token punctuation">(</span>src<span class="token punctuation">,</span> inputType<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>dest<span class="token punctuation">)</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> all_file<span class="token punctuation">:</span>        iFilename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        oFilename <span class="token operator">=</span> iFilename<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> outputType        iFullFilename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>src<span class="token punctuation">,</span> iFilename<span class="token punctuation">)</span>        oFullFilename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dest<span class="token punctuation">,</span> oFilename<span class="token punctuation">)</span>        <span class="token punctuation">(</span>ffmpeg<span class="token punctuation">.</span>input<span class="token punctuation">(</span>iFullFilename<span class="token punctuation">)</span>                <span class="token punctuation">.</span>output<span class="token punctuation">(</span>oFullFilename<span class="token punctuation">)</span>                <span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now you just need to type the following command in you shell, then your conversion result <em>mp3</em> audio will reside in your output directory.</p><pre class="line-numbers language-bash"><code class="language-bash">$ python audio2audio.py --src dir_amr  --dest dir_mp3 --input-type amr  --output-type mp3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the previous blog, I have introduced how to extract audio from video using python + ffmpeg. In this blog, the toolkit is same, but the
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Extract Audio From Video Using Python and FFmpeg</title>
    <link href="https://free-free.github.io/2018/02/20/extract-audio-from-video-using-python-and-ffmpeg/"/>
    <id>https://free-free.github.io/2018/02/20/extract-audio-from-video-using-python-and-ffmpeg/</id>
    <published>2018-02-20T14:30:02.000Z</published>
    <updated>2018-02-20T16:16:10.726Z</updated>
    
    <content type="html"><![CDATA[<p>​    过年回家后，老妈叫我帮她把糖豆里下载的广场舞视频的歌曲下载下来，我拿她手机一看，50几个视频，难道我还要一个一个的手动下载下来，这个一点也不妥。仔细想一想，既然已经有视频了，那只需要将视频中的歌曲自动提取出来即可，不需要费时间在网上一个一个的搜索，一个个的下载。咱说干就干，是时候拿出视频和音频处理利器：<strong>ffmpeg</strong>，以及脚本利器：<strong>python</strong>。</p><h4 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h4><p>​    作为程序员应该对<strong>ffmpeg</strong>不陌生，它是一个高效的跨平台视频和音频处理库，详细介绍和用法请见<a href="https://ffmpeg.org/ffmpeg.html" target="_blank" rel="external">官网</a> 。接下来讲一讲<strong>ffmpeg</strong>在ubuntu上的安装。由于我的机子上ubuntu版本是16.04，在软件库里正好自带了ffmpeg以及相关的软件库，只需要apt 安装一下即可。</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt <span class="token function">install</span> ffmpeg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于没有自带ffmpeg的ubuntu版本，需要自行编译安装。在自行编译安装的时候，ffmpeg默认情况下没有mp3 audio encoder，需要将mp3 audio encoder的mp3lame先安装上，并在编译ffmpeg的时候使能mp3lame。详细的编译安装过程请见<a href="http://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu" target="_blank" rel="external">这里</a> 。</p><h4 id="python-ffmpeg从视频中提取语音"><a href="#python-ffmpeg从视频中提取语音" class="headerlink" title="python+ffmpeg从视频中提取语音"></a>python+ffmpeg从视频中提取语音</h4><h5 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h5><p>该版本是直接通过python的<code>os.system</code>调用ffmpeg，代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># @file: video2audio.py</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> fnmatch<span class="token keyword">from</span> optparse <span class="token keyword">import</span> OptionParserparser <span class="token operator">=</span> OptionParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-s"</span><span class="token punctuation">,</span><span class="token string">"--src"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"src"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store"</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">"source dir"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"./"</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-d"</span><span class="token punctuation">,</span><span class="token string">"--dest"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"dest"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"destination dir"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"./audio"</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-v"</span><span class="token punctuation">,</span> <span class="token string">"--video-type"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"videoType"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"input video type"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"mp4"</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-a"</span><span class="token punctuation">,</span> <span class="token string">"--audio-type"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"audioType"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"output audio type"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"mp3"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">filter_file</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_ext<span class="token punctuation">)</span><span class="token punctuation">:</span>    flist <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    all_file <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> flist<span class="token punctuation">:</span>        filepath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>            all_file<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>filter_file<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> file_ext<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> fnmatch<span class="token punctuation">.</span>fnmatch<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">'*.'</span> <span class="token operator">+</span> file_ext<span class="token punctuation">)</span><span class="token punctuation">:</span>            all_file<span class="token punctuation">.</span>append<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">return</span> all_file<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>options<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    src <span class="token operator">=</span> options<span class="token punctuation">.</span>src    dest <span class="token operator">=</span> options<span class="token punctuation">.</span>dest    videoType <span class="token operator">=</span> options<span class="token punctuation">.</span>videoType    audioType <span class="token operator">=</span> options<span class="token punctuation">.</span>audioType    all_file <span class="token operator">=</span> filter_file<span class="token punctuation">(</span>src<span class="token punctuation">,</span> videoType<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>dest<span class="token punctuation">)</span>    ffmpegFormatCode <span class="token operator">=</span> <span class="token string">'ffmpeg -i {0} -f {1} -vn {2}'</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> all_file<span class="token punctuation">:</span>        vFilename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        aFilename <span class="token operator">=</span> vFilename<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> audioType        vFullFilename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>src<span class="token punctuation">,</span> vFilename<span class="token punctuation">)</span>        aFullFilename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dest<span class="token punctuation">,</span> aFilename<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Start converting {0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>vFilename<span class="token punctuation">)</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>ffmpegFormatCode<span class="token punctuation">.</span>format<span class="token punctuation">(</span>vFullFilename<span class="token punctuation">,</span> audioType<span class="token punctuation">,</span> aFullFilename<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finish conversion of {0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>aFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h5><p>该版本是需要安装python的一个ffmpeg binding: <a href="https://github.com/kkroening/ffmpeg-python" target="_blank" rel="external">ffmpeg-python</a>。然后通过<strong>ffmpeg-python</strong>来进行音频提取操作。版本1和版本2都需要提前安装ffmpeg，只不过<strong>ffmpeg-python</strong>使得ffmpeg的调用变得更加brief and human-readable。代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># @file: video2audio.py</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> fnmatch<span class="token keyword">import</span> ffmpeg<span class="token keyword">from</span> optparse <span class="token keyword">import</span> OptionParserparser <span class="token operator">=</span> OptionParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-s"</span><span class="token punctuation">,</span><span class="token string">"--src"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"src"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store"</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">"source dir"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"./"</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-d"</span><span class="token punctuation">,</span><span class="token string">"--dest"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"dest"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"destination dir"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"./audio"</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-v"</span><span class="token punctuation">,</span> <span class="token string">"--video-type"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"videoType"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"input video type"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"mp4"</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-a"</span><span class="token punctuation">,</span> <span class="token string">"--audio-type"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"audioType"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"output audio type"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"mp3"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">filter_file</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_ext<span class="token punctuation">)</span><span class="token punctuation">:</span>    flist <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    all_file <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> flist<span class="token punctuation">:</span>        filepath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>            all_file<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>filter_file<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> file_ext<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> fnmatch<span class="token punctuation">.</span>fnmatch<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">'*.'</span> <span class="token operator">+</span> file_ext<span class="token punctuation">)</span><span class="token punctuation">:</span>            all_file<span class="token punctuation">.</span>append<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">return</span> all_file<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>options<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    src <span class="token operator">=</span> options<span class="token punctuation">.</span>src    dest <span class="token operator">=</span> options<span class="token punctuation">.</span>dest    videoType <span class="token operator">=</span> options<span class="token punctuation">.</span>videoType    audioType <span class="token operator">=</span> options<span class="token punctuation">.</span>audioType    all_file <span class="token operator">=</span> filter_file<span class="token punctuation">(</span>src<span class="token punctuation">,</span> videoType<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>dest<span class="token punctuation">)</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> all_file<span class="token punctuation">:</span>        vFilename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        aFilename <span class="token operator">=</span> vFilename<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> audioType        vFullFilename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>src<span class="token punctuation">,</span> vFilename<span class="token punctuation">)</span>        aFullFilename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dest<span class="token punctuation">,</span> aFilename<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Start converting {0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>vFilename<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span>ffmpeg<span class="token punctuation">.</span>input<span class="token punctuation">(</span>vFullFilename<span class="token punctuation">)</span>                <span class="token punctuation">.</span>output<span class="token punctuation">(</span>aFullFilename<span class="token punctuation">,</span> <span class="token operator">**</span><span class="token punctuation">{</span><span class="token string">'vn'</span><span class="token punctuation">:</span>None<span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">:</span> audioType<span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finish conversion of {0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>aFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><pre class="line-numbers language-shell"><code class="language-shell">$ python video2audio.py --src ./video --dest ./video/audio -a mp3 -v mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>--src</code>指定视频所放的目录，<code>--dest</code>指定输出的音频所放的目录，<code>-a</code>指定输出的音频类型，<code>-v</code>指定输入的视频类型。在shell下面运行上述命令之后，最终将在<code>./video/audio</code>目录下找到提取出来的音频。有了上述脚本，原本几个小时的工作，现在分分钟就搞定，太爽了。第一次在家里写博客，罪过呀，回家不应该好好玩的吗！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    过年回家后，老妈叫我帮她把糖豆里下载的广场舞视频的歌曲下载下来，我拿她手机一看，50几个视频，难道我还要一个一个的手动下载下来，这个一点也不妥。仔细想一想，既然已经有视频了，那只需要将视频中的歌曲自动提取出来即可，不需要费时间在网上一个一个的搜索，一个个的下载。咱
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>致未来的你，侄女</title>
    <link href="https://free-free.github.io/2018/02/13/a-letter-to-you-my-niece/"/>
    <id>https://free-free.github.io/2018/02/13/a-letter-to-you-my-niece/</id>
    <published>2018-02-13T15:19:37.000Z</published>
    <updated>2018-02-13T15:20:45.143Z</updated>
    
    <content type="html"><![CDATA[<p>​    侄女/小汤，今天是你的第一个生日，老舅祝你生日快乐，愿你在未来的日子里开开心心、健健康康的成长下去。</p><p>​    为了你的一周岁生日，老舅想了很久，最终决定写下这封信，希望未来的你能够从这封信中有所收获。之所以要在你一周岁的生日的时候写这样一封信给你，原因主要有三点。原因一：老舅今年23岁，虽然不会有太多的经历和感悟，但有些东西是我这个年龄所独有的，必须要以这个年龄的身份写给你，如果等我到了中年足够干练之后才写给你，就会失去它原本的味道；原因二：这是你的一周岁礼物，我希望它是一份能够长存，并对你未来的生活有所帮助的礼物；原因三：老舅目前是一个不善于表达情感的人，所以我想现在把我想对你说的话以文字的方式保存下来，以防未来遗失了。</p><h4 id="你的出生，我的独白"><a href="#你的出生，我的独白" class="headerlink" title="你的出生，我的独白"></a>你的出生，我的独白</h4><p>​        自你妈妈(我姐)刚怀上你，到你调皮地踢她的肚子的时候，我的心都处于一种即期待又有一丝小紧张的状态。期待着你从你妈妈肚子里出来的那一天，期待着你叫我舅舅的那一天；紧张着自己怎样去做好一个舅舅。就这样持续着，直到去年的今天调皮的你从你妈妈的肚子里“蹦”了出来，来到这个新奇的世界(Welcome to the new world!  ((o(^_ ^)o)) )，我心中的期待和那一丝小紧张转变成了一种紧迫感。我迫切需要知道我怎样去扮演好一个舅舅的角色。但我越是着急，越是束手无策。直到今天，我依然没有找到很清晰的答案，但我知道做好一个舅舅，我还需要很多的成长和历练。对此，老舅并没有畏惧，反而是有了更多的动力。</p><h4 id="对你的希望"><a href="#对你的希望" class="headerlink" title="对你的希望"></a>对你的希望</h4><ul><li><p>学会感恩和情感表达</p><p><code>学会感恩</code></p><p>​    学会感恩。一个人无论多么聪明、多么能干、自身外在条件多么好、取得多么大的成就，如果不懂得感恩，必定也是令人不齿的。老舅坚信感恩是做人的基本能力，一个人要是懂得了感恩，那么他的其他品质也不会差到哪里去，他的生活也不会坏到哪里去。老舅希望你能够很早就能学会感恩。感恩你的父母、感恩帮助你的人。千万不要把父母对你的付出和关怀以及别人对你的帮助视为理所当然的，这是大忌。别人施恩于你，你要懂得回报他人。</p><p>​    感恩不是放在心里，要付诸于行动。当老舅还在上小学的时候，经常听老师说要我们心存感恩，但老师并没有教授我们要把感恩付诸于行动，所以老舅有一段时间一直对感恩存在认知误差。在此老舅需要强调一下，感恩绝对不是只放在心里，是要表现出来的，放在心里的感恩，别人是感受不到的，这不是真正意义上的感恩。希望你不要像老舅以前一样对感恩存在这样的认知误差，即要心存感恩，也要将感恩体现你的行动上。</p><p>​    感恩不在于能力大小，要及时感恩。老舅受到过很多人的帮助，心里也懂得要去感恩那些帮助过我的人，但是老舅犯了一个严重的错误。老舅一直想着等自己有了能力之后才去感恩他们。但是时间不等人，等你有了能力之后才去感恩，时间可能已经晚了。不管在什么时候，不管你在哪里，不管是你的父母还是其他帮助过你的人，你都要懂得及时去感恩他们。平时多联系他们，这是感恩；平时节假日的时候，多去看看他们，这也是感恩。感恩并不在于你当下能力的大小，在于你是否及时付诸于你的行动中。老舅已经犯了错误，我不想你也一样。</p><p><code>学会情感表达</code></p><p>​    学会情感表达。没有一个人会自成一体。刚出生的时候会有你的父母和亲人在你身边，随着你的长大，你会有朋友，会有自己的爱人，最终也会有自己的孩子。你身边的父母和亲人、朋友、爱人和孩子都会陪着你走过你的大半生，他们是你在这个世上最亲密的人，你和他们之间必然会有情感的表达。在你需要表达对他们的情感的时候，一定要表达出来，不要不好意思。人都是情感的动物，情感的表达是生活的重要一部分。没有情感表达的生活，就如同没有加盐的饭菜，淡而无味。情感是联系你周围的人关系的纽带，无论何时何地，只要你想要把它表达出来，就不要怯于环境，也不用太在意别人的眼光。老舅在此给你强调情感表达的重要性，也是在于老舅是一个不善于表达情感的人，很多人和事因此而错过了，所以希望你不要像老舅一样。自小，老舅就不知道如何去表达对别人的情感，就连对你外公外婆以及你妈妈也是一样。现在到了这个年龄，突然感悟到自己在这方面的缺陷，想要去弥补却又不知道该如何做起。有时想要去表达对你外婆和妈妈的情感，都感觉不好意思。老舅也时常在想，可能是已经过了学会情感表达的最佳时期。但老舅不会就此罢了，我就不信那个邪了。就让我们两个一起在这件事上努力吧。娃哈哈。</p></li><li><p>学会用书本来充实自己</p><p>​    可能从小到大你父母或者老师都会叮嘱你要多读书，当然老舅也不例外。书是一个人精神财富的重要来源，它能让你的内心世界丰富起来，能够建立你的世界观、价值观、人生观，能够培养你看事物的角度和为人处事的态度，能够让你的胸襟变得豁达…..etc。我知道上面这些都感觉很虚，不那么让人信服。但它确实能对你的实际生活起到很大的帮助。当你心很浮躁，不能专心做事的时候，试着去拿起自己喜欢的一本书，打开它随便阅读起来，你会奇迹地发现你的心慢慢地平静下来了。当你自己独处的时候也不会感到孤独，那是你因为书让你无论身出何处，你的内心依然如此的热闹。当别人都在从众地追逐着本不适合自己的东西的时候，你却不为所动，依然坚持自己的内心，那是因为书让你有了自己独立的思想，你知道自己想什么不想要什么。当你再也不和别人争论的时候，那是因为书让你更加冷静和理智，懂得换个角度看问题。当别人都在放弃自己的原则的时候，而你却默默地坚持着，那是因为书让你懂得原则对你生活的重要性。书会让你拥有自己的独立灵魂，懂得独立思考；会让你认清自己的内心，知道自己真正想要准求的是什么；同样会让你养成自己的人生态度，它决定了你未来的生活状态。老舅希望你懂得书本对于你人生的重要性，能够让书本陪伴你的一生。</p><p>​    书是手段，不是目的。老舅让你多读书并不是让你为了读书而读书，那是读死书，你要懂得活学活用。书永远都只是手段，而你的内心世界的丰富和自己的成长才是终极目的。如果你把读书当成你的目的，那将会是很枯燥无味的。但反过来，当你把读书当成一种充实自己、建立自己的三观、寻找乐趣的、丰富自己内心世界的目的，它将会显得亲切并有趣的多。读书就像你平时吃饭一样，你从一个小不点长到大，并不知道是哪顿饭让你长大了，同样你也不知道是哪本书让你成长了。读书是一个长期的过程，不要急于去期望通过读几本书就能快速成长起来。希望你从小就能够把读书当做一种成长自己的手段，并且不要太功利，养成一个终生阅读的好习惯。期待有一天你能成为老舅羡慕和膜拜的人。</p></li><li><p>学会独立思考，以辩证的眼光看待事物</p><p>​    学会独立思考。在我们所处的这个时代，由于计算机和网络的发展，各种各样的信息充斥在我们周围，有些是假的，有些是真的，有些是有害的，有些是有益的。懂得如何排除噪声找出真正有用的信号对你的生活和发展很重要。而独立思考在此时便担当着帮你找出有用信号的角色。老舅让你多用书充实自己的原因之一，便是希望你能够在书本的影响下学会独立思考，开阔自己的眼界(有句话虽说，读万卷书不如行万里路，但在你还无法行万里路的时候，你只有多读书)。无论在什么情况下，都要有一颗清醒理智的头脑，不要人云亦云。别人说一的时候，千万不要顺口也说一，一定要经过自己头脑的思考，判断自己是否也需要这样做。也不要因为周围群体强大的声势而随意放弃了自己独立思考的能力，凡事都要通过独立思考，形成自己的观点和立场，并将此坚持下去(这不是偏执，偏执是明知自己的错，依然不放弃)。在大多数时候，你宁愿相信自己的判断，也不要相信群体的言行(特别网络上的群体)，这并不是老舅偏激，但凡你以后涉猎一点心理学并仔细观察一下，你便会了解到群体的言行在很多时候都是不理智的。当你有了独立思考能力之后，你会对这个时代充满信心，发现这个时代并没有言论中的那么糟，它交通发达、生活便利、言论相对自由，你的选择和机会也会很多；当你缺少独立思考能力，你会感觉这个时代四处都充满了黑暗，你发现不了它的优点和价值所在。老舅希望你能够在成年之前便养成这种独立思考的能力，我相信你父母也会放心在外奔波的你。</p><p>​    以辩证的眼光看待事物。没有绝对的不变，只有相对的不变。在审视事物的时候一定要以辩证的眼光看待它们，既要发现它们绝对变化的地方，也要发现相对不变的地方。这对于你以后解决事业上(当然这里对于老舅来说，只是学业上的，之后也会迁移到事业上)和生活上的问题有很大裨益。在生活上，谁的人生都不会完全一帆风顺，总会有低谷的时候，也会有高潮的时候。当你处在人生低谷的时候，要以辩证的眼光看待它，低谷是你成长的机会，低谷只是暂时的，只要你在努力，一切总会有好起来的时候。当你处在人生高潮的时候，也要用辩证的眼光考察它，不要骄傲自满，停滞不前，既要发现并保留可取之处，也要改正不可取之处。在事业上，当你用辩证的眼光看待你所遇到的问题时，你会有完全不同的思路去解决它。时刻提醒自己不要使用一种方法死磕，换角度多方位观察，你必然能发现问题的薄弱之处。对于影响你事业走向的决定，既不要犯短视的错误，也不要眼光太超前，以致看不见脚下所处的位置。老舅知道让你一下学会这些很难，但这不妨碍让你养成这样的意识。</p></li><li><p>要有自己的信仰，并保护好它</p><p>​    当你懂得了用书本充实自己，有独立思考的能力，并能够用辩证的眼光看待事物的时候，你心中或许已经有了自己的信仰雏形，只是你可能还不知道它具体是什么？它对你的生活有什么影响？以老舅的理解，信仰是你内心中一种对某个事物的信念，这种信念能够在你心力交瘁、激情殆尽的时候，继续推动着你不畏风雨地向自己坚持的方向前行。它是你内心当中一种隐形的能量之源。信仰既然有这么强大的力量，当你有了它之后，你的生活也将变得与众不同。一个人不可能让所有人都信服，做什么事也不可能一次就成功，当其他人都在反对你的时候，当你已经失败几次，但你坚信你的方向是正确的时候，支持你走下去的不是别人的鼓励，也不是你的激情，而是你的信仰。当在生活上或者事业上失意的时候，支持你站起来的，是你的信仰。当你快坚持不下准备放弃的时候，是你的信仰给了你坚持下去的毅力。信仰对你的生活就是有这么大的影响，至少从老舅的经历来说，它就是这么重要。一旦你有了自己的信仰之后，它就像你的终生挚友一样，默默地并忠诚的守候着你，在你需要它的时候，立马站出来帮助你。虽然你的信仰对你很忠诚，但并不意味你不会弄丢它。在这个既“理想”又“骨干”的时代，外部的诱惑实在太多了，在各种利益和所谓“现实”的驱使下，让太多人在不经意之间弄丢了自己的信仰，当自己反应过来的时候，已经找不回来了。我不希望你也因为外在诱惑和“现实”而弄丢了自己的信仰，要时刻保护它，把它当做你生活上的伙伴。退一万步，你可以没有自己的目标，也可以没有丰富的外在财富，但是你必须要有自己的信仰和时刻保护它的警觉。老舅还要强调一点：现实和信仰并不冲突。现实和信仰如同硬币的两面，你可以同时拥有它们，不要自我决断地玩“翻硬币游戏”，没有人强迫你要必须丢掉它们当中的一个。既要拥抱现实，也是守护信仰。</p></li><li><p>要永远保持好奇心(站在兔毛尖上)</p><p>​    如果信仰使你在生活中奋力前行，那么好奇心便使你在生活中不断发现新的乐趣、体验新的感受。每个人自娘胎里出来就充满了很大的好奇心(你也一样)，对看见的每件事物都感到新奇，有时候对着某个事物就能够整整玩上好几小时，并且不会感到厌烦，总能在其中找到乐趣所在。有了好奇心，你的生活便不会枯燥无味，因为每时每刻你都在试着发现新的东西，而且最后你总能发现自己之前从未见过的东西。同样也是因为好奇心，你才会去学习自己不会、看似无用实际却挺有用的东西，去尝试之前未做过的事，去走之前未走过的路，去接触之前未接触过人。你的生活会因为有了好奇心而变得与众不同、五彩斑斓。你自己也会因为有了好奇心而成为一个有趣的人。而你的家人和朋友也会因为你的好奇心因此受到感染，他们最终也可能像你一样，充满了好奇心。既然好奇心这么重要，你可能会问：怎样去获得好奇心呢？其实好奇心不需要去获得。好奇心是人生来就有的天性，并不需要你从后天习得。而你需要做的便是好好守护你的好奇心，不要让它随着你年龄的增长丢失了(这是很多人的好奇心丢失的原因，这也是我要给你强调要保持好奇心的原因之一)，不管你年龄多大，都要保持好奇心，它并不是小孩子的专利。刚生下来的我们就像兔毛尖的“跳蚤”一样，随着年龄的增长，很多人便会顺着兔毛爬到最深处去，因为那里很“舒适”，最终只有少部分人继续留在兔毛尖上，去感受这个新奇的世界。老舅希望你是那个一直留在兔毛尖上的“跳蚤”中的一员，大胆的去感受这个新奇的世界，不要把所有“大孩子”认为理所当然的事当成理所当然，一定要用自己的好奇心去重新审视它、挖掘它，这样你总会发现别人发现不了的东西，你总会比别人过得快乐、精彩。</p></li></ul><p>​    最后的最后，希望你长大之后，能够好好孝敬你的父母，不要把父母为你的付出和关心视为理所应当，也不要把父母的啰嗦当成累赘，因为只有关心你的人才会对你啰嗦。－… . … －   .－－ .. … …. . …   ..－. －－－ .－.   －.－－ －－－ ..－</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    侄女/小汤，今天是你的第一个生日，老舅祝你生日快乐，愿你在未来的日子里开开心心、健健康康的成长下去。&lt;/p&gt;
&lt;p&gt;​    为了你的一周岁生日，老舅想了很久，最终决定写下这封信，希望未来的你能够从这封信中有所收获。之所以要在你一周岁的生日的时候写这样一封信给你，
      
    
    </summary>
    
      <category term="mylife" scheme="https://free-free.github.io/categories/mylife/"/>
    
    
      <category term="notes" scheme="https://free-free.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Make Hexo Custom Domain Support SSL</title>
    <link href="https://free-free.github.io/2018/02/10/make-hexo-custom-domain-support-ssl/"/>
    <id>https://free-free.github.io/2018/02/10/make-hexo-custom-domain-support-ssl/</id>
    <published>2018-02-10T07:23:11.000Z</published>
    <updated>2018-02-10T10:37:14.275Z</updated>
    
    <content type="html"><![CDATA[<p>​    For many hexo users, it’s a nightmare to make their custom domain blog support SSL(https). Before writing this piece of blog, I also like them , feel it’s tedious and expensive . But now  everything are changed, since the existence of <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a>. As shown by its name, <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> is an Internet service provider, offering CDN, DNS, DDos protection and security , also other cloud services that accelerate and protect your site or App. To me , it’s DNS reverse proxy attracts me. Of DNS reverse proxy , SSL supporting becomes much easier. The configuration steps will be followed.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl1.svg" alt=""></p><center>Fig 1. cloudflare workflow</center><p>In figure 1, there are 6 steps. I will explain each step in the following content.</p><p><code>Step1</code>: user’s mobile or laptop makes a DNS request to <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> DNS server for inquiring the IP address of your blog domain name, e.g. <em>infinite.xyz</em>.</p><p><code>Step2</code>: <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> DNS server returns IP address of your domain. As shown in figure 1, your blog’s IP address just refers to <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> SSL server, not your github pages server. This is the key point for your custom domain can support SSL.</p><p><code>Step3-4</code>: After retrieving your blog  ’pseudo‘  IP address , user’s mobile or laptop makes a HTTPS request to <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> SSL server,  then <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> SSL server makes a HTTP/HTTPS request your blog real server, i.e. Github pages server. That’s the mean of reverse proxy.</p><p><code>Step5-6</code>: Github pages server  return your blog content to <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> SSL server, then <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> SSL server return the content from Github pages server to user’s mobile or laptop. That’s the whole process, hope you make clear to it now.</p><p>Above we have already known the mechanism of DNS reverse proxy. The next step is how to make it real work. </p><ul><li><p>First, sign up and log in <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a>. Then find the DNS server IP address  of cloudflare and log in your domain vendor website, modify the DNS server to cloudflare’s DNS server.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl6.png" alt=""></p></li><li><p>Click ‘DNS’ tab on <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> website,</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl2.png" alt=""></p><p>add your domain to <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> DNS records saving as CNAME type.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl3.png" alt=""></p></li><li><p>Click ‘Crypto’ tab on <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> website,</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl4.png" alt=""></p><p>change SSL configuration to <code>Flexible</code></p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl5.png" alt=""></p></li><li><p>Switch to ‘Page Rules’ tab,</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl7.png" alt=""></p><p>click ‘Create Page Rule’ button.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl8.png" alt=""></p><p>Add the following rule, this rule will ensure your whole site protected by SSL,  whenever you or others visit your site, it will automatically redirect to HTTPS site.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl9.png" alt=""></p></li><li><p>Create a new file named <em>CNAME</em> under your hexo source directory, add your domain name and save it. Finally regenerate your file and re-deploy it. After that, you can check your custom domain in your Github pages settings.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl11.png" alt=""></p><p>​</p></li></ul><p>Ok, you just make your custom domain support SSL, now you have to calm down and wait less than 48h, then check your <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> website panel.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl10.png" alt=""></p><p>Congratulations! You can visit your site using HTTPS.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    For many hexo users, it’s a nightmare to make their custom domain blog support SSL(https). Before writing this piece of blog, I also
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="security" scheme="https://free-free.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Matlab 3d Plot Function</title>
    <link href="https://free-free.github.io/2018/01/18/matlab-3d-plot-function/"/>
    <id>https://free-free.github.io/2018/01/18/matlab-3d-plot-function/</id>
    <published>2018-01-18T14:46:25.000Z</published>
    <updated>2018-01-23T16:11:13.662Z</updated>
    
    <content type="html"><![CDATA[<p>When it comes to data analysis or systematic modeling, the visualization of data is an important assistant tool to provide an intuitive understanding of data and system’s performance in some degree. The focus of this blog is 3D plot function of Matlab, there are total 9 kinds of 3D visualization functions in Matlab, it refers to <code>surf</code>,<code>surfc</code>,<code>mesh</code>,<code>meshc</code>,<code>meshz</code>,<code>contour</code>,<code>contour3</code>,<code>plot3</code>,<code>waterfall</code>. Since the complexity of this 3D plot functions, a huge amount of descriptions in words almost couldn’t  help people, especially those who are new to Matlab,  to understand the usage of those functions, conversely, it will make people are afraid of them and escape from them finally. So here for each function, a testing example will come along. To better understand characteristics of those 3D plot functions, the multi-modal mathematical function is strongly recommended as a testing function for 3D plot function. In this piece blog, the following multi-modal mathematical function will be used in all examples.</p><p>$$f(x,y)=3(1-x)^2e^{-x^2 - (y+1)^2} - 10(\frac{x}{5}-x^3-y^5)e^{-x^2-y^2}-\frac{1}{3}e^{-(x+1)^2-y^2}$$</p><p>The above function can be obtained using <code>peaks</code> function which is built-in Matlab.</p><ul><li><p><strong><code>contour</code></strong></p><p>The function of <code>contour</code> is indicated as  its names, it plots function’s 2-D contour curve. The prototype of <code>contour</code> as followed.</p><p><code>contour(X, Y, Z)</code>:contour(X,Y,Z) draws a contour plot of Z using vertices from the mesh defined by X and Y. X and Y can be vectors or matrices.</p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token punctuation">[</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Z <span class="token operator">=</span> <span class="token function">peaks</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">contour</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/contour_test1.bmp" alt=""></p><center> fig 1. the view of <code>contour(X, Y, Z)</code></center><p><code>contour(Z)</code>: draws a contour plot of matrix Z in the x-y plane, with the x-coordinates of the vertices corresponding to column indices of Z and the y-coordinates corresponding to row indices of Z. The<br>contour levels are chosen automatically.</p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token punctuation">[</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Z <span class="token operator">=</span> <span class="token function">peaks</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">contour</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/contour_test2.jpg" alt=""></p><center>fig 1. the view of <code>contour(Z)</code></center><p><code>contour(Z, N)</code>:contour(Z,N) and contour(X,Y,Z,N) draw N contour lines, choosing the levels automatically.</p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token punctuation">[</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Z <span class="token operator">=</span> <span class="token function">peaks</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">contour</span><span class="token punctuation">(</span>Z<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/contour_test3.jpg" alt=""></p><center>fig 3. the view of <code>contour(Z, N)</code></center><p><code>contour(Z, V)</code>: contour(Z,V) and contour(X,Y,Z,V) draw a contour line for each level specified in vector V.  Use contour(Z,[v v]) or contour(X,Y,Z,[v v]) to draw contours for the single level v.</p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token punctuation">[</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Z <span class="token operator">=</span> <span class="token function">peaks</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">contour</span><span class="token punctuation">(</span>Z<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/contour_test4.jpg" alt=""></p><center>fig 4. the view of <code>contour(Z,V)</code></center></li><li><p><strong><code>contour3</code></strong></p><p><code>contour3</code> is the same as <code>contour</code> except the contour lines are drawn in multiple planes. Each line is drawn in a horizontal plane at a height equal to the corresponding contour level. <code>contour3</code> plots the 3-D contour curve of function. </p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token function">contour3</span><span class="token punctuation">(</span>peaks<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/contour3_test1.bmp" alt=""></p><center>fig 5. the view of <code>contour3(Z,N)</code></center></li></ul><ul><li><p><strong><code>surf</code></strong></p><p>As shown by its name, <code>surf</code>  is responsible for plotting the 3D surface mesh of the testing mathematical function. The most common usage of <code>surf</code> is <code>surf(X, Y, Z)</code> or <code>surf(Z)</code>. The parameters  <code>X</code>, <code>Y</code> are typically the output of <code>meshgrid</code>. Over a 2-D rectangular region in the x-y plane. <code>Z</code> determines the height above the plane of each vertex. If only a single Z matrix is given, then it is plotted over the meshgrid <code>X = 1:columns (Z), Y=1:rows(Z)</code>, Thus, columns of Z correspond to different X values and rows of Z correspond to different Y values.</p><p>The color of the surface is computed by linearly scaling the Z values to fit the range of the current colormap.  Use <code>caxis</code> and/or change the colormap to control the appearance. </p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token punctuation">[</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Z <span class="token operator">=</span> <span class="token function">peaks</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The output of above code:</p><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/surf_test.bmp" alt=""></p><center>fig 6. the 3-D view of <code>surf</code></center></li></ul><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/surf_test_2D.bmp" alt=""></p><center>fig 7. the 2-D view of <code>surf</code></center>    <p>In figure 7, the yellow region represents the place where the function has a mountain peak,  the deeper color is, the more height peak is. Equally, the dark blue region represents the place where the function has a valley, the deeper color is , the deeper valley is.</p><p>If just given <code>Z</code> passing into <code>surf</code>, the mainly difference from <code>surf(X, Y, Z)</code> is just the change of the range of  x-axis and y-axis in the x-y plane. as shown below.</p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token punctuation">[</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Z <span class="token operator">=</span> <span class="token function">peaks</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">surf</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/surf_test_2.bmp" alt=""></p><center>fig 8. the 3-D view of <code>surf(Z)</code></center><ul><li><p><strong><code>surfc</code></strong></p><p><code>surfc</code> is just the combination of <code>surf</code> and <code>contour</code>, i.e. <code>surf+contour</code>. the prototype is the same as <code>surf</code> except the contour is plotted beneath the surface mesh.</p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token function">surfc</span><span class="token punctuation">(</span>peaks<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/surfc_test1.jpg" alt=""></p><center>fig 9. the view of <code>surfc(peaks)</code></center></li><li><p><strong><code>mesh</code></strong></p></li></ul><p>  What’s the difference from surf is that the net produced by mesh  is not filled with color. The prototype of <code>mesh</code> is much similar to <code>surf</code>.</p><p>  <code>mesh(X,Y,Z)</code> draws a wireframe mesh with color determined by <code>Z</code>, so color is proportional to surface height. If <code>X</code> and <code>Y</code> are vectors, <code>length(X) = n</code> and <code>length(Y) = m</code>, where <code>[m,n] = size(Z)</code>. In this case, (<em>X</em>(<em>j</em>), <em>Y</em>(<em>i</em>), <em>Z</em>(<em>i</em>,<em>j</em>)) are the intersections of the wireframe grid lines; <code>X</code> and <code>Y</code> correspond to the columns and rows of <code>Z</code>, respectively. If <code>X</code> and <code>Y</code> are matrices, (<em>X</em>(<em>i</em>,<em>j</em>), <em>Y</em>(<em>i</em>,<em>j</em>), <em>Z</em>(<em>i</em>,<em>j</em>)) are the intersections of the wireframe grid lines. The values in <code>X</code>, <code>Y</code>, or <code>Z</code> can be numeric, datetime, duration, or categorical values.</p><pre class="line-numbers language-matlab"><code class="language-matlab">  <span class="token punctuation">[</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Z <span class="token operator">=</span> <span class="token function">peaks</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mesh</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/mesh_test1.bmp" alt=""></p>  <center>fig 10. the view of <code>mesh(X, Y, Z)</code></center><p>  <code>mesh(Z)</code> draws a wireframe mesh using <code>X = 1:n</code> and <code>Y = 1:m</code>, where <code>[m,n] = size(Z)</code>. The height, <code>Z</code>, is a single-valued function defined over a rectangular grid. Color is proportional to surface height. The values in <code>Z</code> can be numeric, datetime, duration, or categorical values.</p><pre class="line-numbers language-matlab"><code class="language-matlab">  <span class="token punctuation">[</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.5</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Z <span class="token operator">=</span> <span class="token function">peaks</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mesh</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/mesh_test1.bmp" alt=""></p>  <center>fig 11. the view of <code>mesh(Z)</code></center><ul><li><p><strong><code>meshc</code></strong></p><p>Akin to <code>surfc</code>, <code>meshc</code> is just combination of <code>mesh+contour</code>.</p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token function">meshc</span><span class="token punctuation">(</span>peaks<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/meshc_test1.bmp" alt=""></p><center>fig 12. the view of <code>meshc(Z)</code></center></li><li><p><strong><code>meshz</code></strong></p><p><code>meshz</code> is akin to  <code>mesh</code>  except that a “curtain” or reference plane is drawn beneath. This routine only works for surfaces defined on a rectangular grid.  The matrices X and Y define the axis limits only.</p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token function">meshz</span><span class="token punctuation">(</span>peaks<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/meshz_test1.bmp" alt=""></p><center>fig 13. the view of <code>meshz</code></center></li><li><p><strong><code>plot3</code></strong></p><p><code>plot3</code>  plots lines and points in 3-D space. <code>plot3</code> is a three-dimensional version of <code>plot</code>. </p><pre class="line-numbers language-matlab"><code class="language-matlab">t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">:</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span><span class="token function">plot3</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/plot3_test1.bmp" alt=""></p><center>fig 14. the view of <code>plot3</code></center></li><li><p><strong><code>waterfall</code></strong></p><p><code>waterfall</code> is the same as <code>mesh</code> except that the column lines of the mesh are not drawn - thus producing a “waterfall” plot. For column-oriented data analysis, use <code>waterfall(Z&#39;)</code>or<br><code>waterfall(X&#39;,Y&#39;,Z&#39;)</code>.</p><pre class="line-numbers language-matlab"><code class="language-matlab">figure<span class="token punctuation">;</span><span class="token function">waterfall</span><span class="token punctuation">(</span>peaks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>R <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>X<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">+</span> Y<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> eps<span class="token punctuation">;</span>Z <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token operator">./</span>R<span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">waterfall</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/waterfall_test1.bmp" alt=""></p><center>fig 15. the view of <code>waterfall</code></center><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/waterfall_test2.bmp" alt=""></p><center>fig 16. the view of <code>waterfall</code></center></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When it comes to data analysis or systematic modeling, the visualization of data is an important assistant tool to provide an intuitive u
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="matlab" scheme="https://free-free.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>Convert State Space Representation to Transfer Function</title>
    <link href="https://free-free.github.io/2017/12/31/convert-state-space-representation-to-transfer-function/"/>
    <id>https://free-free.github.io/2017/12/31/convert-state-space-representation-to-transfer-function/</id>
    <published>2017-12-30T23:24:47.000Z</published>
    <updated>2018-01-14T10:42:28.839Z</updated>
    
    <content type="html"><![CDATA[<p>In this semester early, I have enrolled my first-degree course <em>Linear System Theory</em>. The focus of this course is the state space representation  and illustrate the concept of observable and controllable of a linear system. As a student of Control Science and Engineering, I know how  important of it to my career in later life. Everything must be practical, this course is also not an exception. here, as a practice , <strong>I will give a implementation of converting state space to transfer function representation.</strong></p><h3 id="Mathematical-representation"><a href="#Mathematical-representation" class="headerlink" title="Mathematical representation"></a>Mathematical representation</h3><p>Given the transfer function of a linear time invariant (LTI) system,as shown below.</p><p>$$G(s) = \frac{b_{m}s^m + b_{m-1}s^{m-1}+ \dotsb + b_{1}s + b_{0}}{s^n + \alpha_{n-1}s^{n-1} + \alpha_{n-2}s^{n-2} + \dotsb + \alpha_{1}s+\alpha_{0}}$$ </p><p>It’s state space representation as follows.</p><p>$$\begin{cases}\dot{x} = Ax + Bu \\ y = Cx + Du\end{cases}$$</p><p> In the above equation,$x$ is the state vector of system, $u$ is the input and $y$ is the output. $A$ called system matrix, it’s dimension is $n\times n$ .B called input matrix, it’s dimension is $n \times p$. C called output matrix , it’s dimension is $q \times n$. D called input &amp; output relational matrix, it’s dimension is $q \times p$.</p><p>According to system’s transfer function , it’s <em>kalman I form</em>  , <em>kalman II form</em> and <em>standard observable  form</em> can be easily provided. Conversely,  given the state space representation , the transfer function could be given in the following formula.</p><p>$$G(s) = C(sI - A)^{-1}B + D$$</p><p>Here the calculation of $(sI - A)^{-1}$ is cumbersome,  especially for student who has no assistance with computer.The computational  method of $(sI - A)^{-1}$ can be given in a more comprehensive way, as shown below.</p><p>$$(sI - A)^{-1} = \frac{adj(sI - A)}{det(sI - A)}$$</p><p>$$adj(sI - A) = R_{n-1}s^{n-1} +R_{n-2}s^{n-2} + \dotsb + R_1s + R_0$$</p><p>$$det(sI - A) = s^n + a_{n-1}s^{n-1} + a_{n-2}s^{n-2}+ \dotsb + a_1s + a_0$$</p><p>So here i have already given  the method of computation of $(sI - A)^{-1}$, the next question is how to calculate $R_{n-1}, R_{n-2}, \dots, R_0$ and $a_{n-1}, a_{n-1}, \dots, a_{0}$. The relationship of them is brief and clear.</p><p>$$\begin{cases} R_{n-1} =  I,a_{n-1} = - \frac{tr(R_{n-1}A)}{1} \\ R_{n-2} = R_{n-1}A + a_{n-1}I, a_{n-2}= -\frac{tr(R_{n-2}A)}{2} \\ \cdots \\  \cdots \\ R_{1} = R_{2}A + a_{2}I, a_{1}= -\frac{tr(R_{1}A)}{(n-1)} \\ R_{0} = R_{1}A + a_{1}I, a_{0}= -\frac{tr(R_{0}A)}{n}\end{cases}$$</p><p>As shown above,  $R_{n-1}$ and $a_{n-1}$  are firstly calculated, $R_{n-2}$ and $a_{n-2}$ are followed, then continue the calculation process until the subscript of $R$ and $a$ is reached to <em>$0$</em>. According to equations above, we can easily give the implementation of converting to state space representation to transfer function representation using Matlab. </p><h3 id="Matlab-implementation"><a href="#Matlab-implementation" class="headerlink" title="Matlab implementation"></a>Matlab implementation</h3><p>In the previous section, we already have introduced mathematics basis of state space representation and transfer function representation of the linear system, and given the method of conversion between each other. So the process of implementing it is much easier using computer language, here I give an implementation using Matlab, the code as follows.</p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% @file: ss2tf.m</span><span class="token comment" spellcheck="true">% @description: </span><span class="token comment" spellcheck="true">%     The reponsibility of this function is to convert the linear </span><span class="token comment" spellcheck="true">%     system's state  space representation to transfer function</span><span class="token comment" spellcheck="true">%     representation.</span><span class="token comment" spellcheck="true">% @paras: A, system matrix</span><span class="token comment" spellcheck="true">% @paras: B, input matrix</span><span class="token comment" spellcheck="true">% @paras: C, ouput matrix</span><span class="token comment" spellcheck="true">% @paras: D, input&amp;ouput relational matrix</span><span class="token comment" spellcheck="true">% @return: G, transfer function</span><span class="token comment" spellcheck="true">% @return: CSAI, the inverse matrix of characteristic matrix of A</span>%<span class="token keyword">function</span> <span class="token punctuation">[</span>G<span class="token punctuation">,</span> CSAI<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ss2tf</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> D<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">% Get the dimension number of state space representation</span>    n <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">% Generate the identity matrix which's dimension size is same as A</span>    I <span class="token operator">=</span> <span class="token function">eye</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">% Coefficient array of determinant of A</span>    coef <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">% R matrix </span>    Rx <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n <span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">% Calculate the Rn-1</span>    <span class="token function">Rx</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> I<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">% Calculate the an-1</span>    <span class="token function">coef</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token function">trace</span><span class="token punctuation">(</span>I <span class="token operator">*</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">% Define the laplace variable </span><span class="token string">'s'</span>    s <span class="token operator">=</span> <span class="token function">tf</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">% Calculate the first part of R = Rn-1 * Sn-1</span>    R <span class="token operator">=</span> <span class="token function">Rx</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> s<span class="token operator">^</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">% Calculate the first and second part of determinant of A</span>    <span class="token comment" spellcheck="true">% i.e. s^n + an-1 * s^(n-1) + ... + a0</span>    detSA <span class="token operator">=</span> s<span class="token operator">^</span>n <span class="token operator">+</span> <span class="token function">coef</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> s <span class="token operator">^</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">:</span> n        <span class="token function">Rx</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Rx</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> A <span class="token operator">+</span> <span class="token function">coef</span><span class="token punctuation">(</span><span class="token number">i</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> I<span class="token punctuation">;</span>        <span class="token function">coef</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token function">Rx</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">*</span> A<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">i</span><span class="token punctuation">;</span>        R <span class="token operator">=</span> R <span class="token operator">+</span> <span class="token function">Rx</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">*</span> s<span class="token operator">^</span><span class="token punctuation">(</span>n<span class="token number">-i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        detSA <span class="token operator">=</span> detSA <span class="token operator">+</span> <span class="token function">coef</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">*</span> s <span class="token operator">^</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">% Compute the transfer function according to system's state space </span>    <span class="token comment" spellcheck="true">% representation ,the formula as follows:</span>    <span class="token comment" spellcheck="true">%   G(s) = C * (sI - A)^-1 * B +D</span>    G <span class="token operator">=</span> <span class="token punctuation">(</span>C <span class="token operator">*</span> R <span class="token operator">*</span> B<span class="token punctuation">)</span><span class="token operator">/</span> detSA <span class="token operator">+</span> D<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">% Calculate the inverse matrix of characteristic matrix</span>    <span class="token comment" spellcheck="true">% (sI - A)^-1 = R / detSA</span>    CSAI <span class="token operator">=</span> R <span class="token operator">/</span> detSA<span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Though the code is implemented, in a real world, the testing and implementation are the same importance to the problem. In the following content, the testing code is provided.</p><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% kalman I form </span>A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>B <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>C <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span> <span class="token number">23</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>D <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">[</span>G<span class="token punctuation">,</span> CSAI<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ss2tf</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B <span class="token punctuation">,</span> C <span class="token punctuation">,</span> D<span class="token punctuation">)</span><span class="token punctuation">;</span>G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>output:</p><pre class="line-numbers language-matlab"><code class="language-matlab">G <span class="token operator">=</span>     <span class="token operator">-</span>s<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> s<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">23</span> s <span class="token operator">+</span> <span class="token number">8</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>  s<span class="token operator">^</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">7</span> s<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span> s<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> s <span class="token operator">+</span> <span class="token number">1</span>Continuous<span class="token operator">-</span>time transfer <span class="token keyword">function</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% standard observable form </span>A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>      <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token number">7</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>B <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">;</span>     <span class="token number">23</span><span class="token punctuation">;</span>     <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>C <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>D <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">[</span>G<span class="token punctuation">,</span> CSAI<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ss2tf</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B <span class="token punctuation">,</span> C <span class="token punctuation">,</span> D<span class="token punctuation">)</span><span class="token punctuation">;</span>G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>output:</p><pre class="line-numbers language-matlab"><code class="language-matlab">G <span class="token operator">=</span>     <span class="token operator">-</span>s<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> s<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">23</span> s <span class="token operator">+</span> <span class="token number">8</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>  s<span class="token operator">^</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">7</span> s<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span> s<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> s <span class="token operator">+</span> <span class="token number">1</span>Continuous<span class="token operator">-</span>time transfer <span class="token keyword">function</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://xueshu.baidu.com/s?wd=paperuri%3A%28269231923bf2d6a86441e28d24e8930c%29&amp;filter=sc_long_sign&amp;sc_ks_para=q%3D%E7%BA%BF%E6%80%A7%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%28%E7%AC%AC2%E7%89%88%29&amp;sc_us=8313367311188451873&amp;tn=SE_baiduxueshu_c1gjeupa&amp;ie=utf-8" target="_blank" rel="external">[1] 郑大钟. 线性系统理论(第2版)[J]. 2002.</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this semester early, I have enrolled my first-degree course &lt;em&gt;Linear System Theory&lt;/em&gt;. The focus of this course is the state space
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="matlab" scheme="https://free-free.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>Python Enhancement Proposals(pep)</title>
    <link href="https://free-free.github.io/2017/12/22/python-pep/"/>
    <id>https://free-free.github.io/2017/12/22/python-pep/</id>
    <published>2017-12-22T12:59:28.000Z</published>
    <updated>2017-12-25T08:17:10.429Z</updated>
    
    <content type="html"><![CDATA[<p>This  article is a list notes about <code>Python Enhancement Proposal</code>, aka <code>PEP</code>, which contains proposals those should be well known to every python developer.  So, What’s means of <code>PEP</code>? Here, I don’t want to explain it too much to you, I cite a  brief definition about it  from Wikipedia, as follows:</p><blockquote><p>Python’s development is conducted largely through the <em>Python Enhancement Proposal</em> (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues and documenting Python design decisions. Outstanding PEPs are reviewed and commented on by the Python community and Guido Van Rossum, Python’s <a href="https://en.wikipedia.org/wiki/Benevolent_Dictator_For_Life" target="_blank" rel="external">Benevolent Dictator For Life</a></p><p>​                                                                    — from Wikipedia</p></blockquote><h5 id="PEP-0"><a href="#PEP-0" class="headerlink" title="PEP 0"></a><strong>PEP 0</strong></h5><p>This PEP maintains  the index of all Python Enhancement Proposals, aka PEPs. Each PEP number is assigned by the PEP author, once assigned is never changed.</p><p><a href="https://www.python.org/dev/peps/" target="_blank" rel="external">PEP contents</a></p><h5 id="PEP-1"><a href="#PEP-1" class="headerlink" title="PEP 1"></a><strong>PEP 1</strong></h5><p>This PEP introduces the concept of PEPs and detailly explains the workflow of PEPs.</p><p><a href="https://www.python.org/dev/peps/pep-0001/" target="_blank" rel="external">PEP contents</a></p><h5 id="PEP-8"><a href="#PEP-8" class="headerlink" title="PEP 8"></a><strong>PEP 8</strong></h5><p>This PEP is deadly necessary to python developer who want to write human-readable and concise python code. I strongly recommend you to read it and perform it if want to go further more on python.</p><p><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">PEP contents</a></p><p>This article will be updated at all times.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This  article is a list notes about &lt;code&gt;Python Enhancement Proposal&lt;/code&gt;, aka &lt;code&gt;PEP&lt;/code&gt;, which contains proposals those should
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Find Out First None-Zero Element&#39;s Index of Each Row in Matlab Matrices</title>
    <link href="https://free-free.github.io/2017/12/15/find-first-nonezero-element-index-of-each-row-in-matlab-matrix/"/>
    <id>https://free-free.github.io/2017/12/15/find-first-nonezero-element-index-of-each-row-in-matlab-matrix/</id>
    <published>2017-12-15T12:54:08.000Z</published>
    <updated>2017-12-21T15:07:35.292Z</updated>
    
    <content type="html"><![CDATA[<p>How to find out the none-zero element index of each row in matlab matrix without using for loop?  Honestly, this fucking problem frustrates me  all day, I have no spark about this, fortunately, i get a roughly problem-solving  solution with the help of enthusiastic people. Ok ,lets get down to code.</p><p>Here we assume $A$ is a $m\times n$ matrix, the problem is find out the index of first none-zero element of each row in $A$. </p><h4 id="The-first-try"><a href="#The-first-try" class="headerlink" title="The first try"></a>The first try</h4><p><strong>code</strong></p><pre class="line-numbers language-matlab"><code class="language-matlab">idx <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>A<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The above code seems to be working, the truths is that it just  works fine in some special matrices, like</p><pre class="line-numbers language-matlab"><code class="language-matlab">A <span class="token operator">=</span>      <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">12</span>    <span class="token number">11</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>     <span class="token number">3</span>     <span class="token number">0</span>    <span class="token number">32</span>    <span class="token number">21</span>   <span class="token number">343</span>    <span class="token number">54</span>    <span class="token number">43</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">1</span>idx <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>A<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true">% The output follows</span>ans <span class="token operator">=</span>     <span class="token number">5</span>     <span class="token number">4</span>     <span class="token number">2</span>     <span class="token number">6</span><span class="token comment" spellcheck="true">% see that,it is corret</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>but except other general matrices,like</p><pre class="line-numbers language-matlab"><code class="language-matlab">A <span class="token operator">=</span>     <span class="token number">0</span>     <span class="token number">2</span>     <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">12</span>    <span class="token number">11</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>     <span class="token number">3</span>     <span class="token number">0</span>    <span class="token number">32</span>    <span class="token number">21</span>   <span class="token number">343</span>    <span class="token number">54</span>    <span class="token number">43</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">1</span>idx <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>A<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true">% The output follows</span>ans <span class="token operator">=</span>     <span class="token number">4</span>     <span class="token number">4</span>     <span class="token number">2</span>     <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The first try  is failed, but it doesn’t mean i was defeated.So i start my second problem-solving try.</p><h4 id="The-second-try"><a href="#The-second-try" class="headerlink" title="The second try"></a>The second try</h4><p><strong>code:</strong></p><pre class="line-numbers language-matlab"><code class="language-matlab">idx <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">cumsum</span><span class="token punctuation">(</span>A<span class="token operator">~=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>It seems i find the way to correct answer this time, but ….. it’s not working in some special case, likes the following matrix </p><pre class="line-numbers language-matlab"><code class="language-matlab">A <span class="token operator">=</span>     <span class="token number">0</span>     <span class="token number">2</span>     <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">12</span>    <span class="token number">11</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>     <span class="token number">3</span>     <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">32</span>    <span class="token number">21</span>   <span class="token number">343</span>    <span class="token number">54</span>    <span class="token number">43</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>idx <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">cumsum</span><span class="token punctuation">(</span>A<span class="token operator">~=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true">% The last element of output seems to be not working, it's value exceeds the maximum index of A's column.</span>ans <span class="token operator">=</span>     <span class="token number">2</span>     <span class="token number">4</span>     <span class="token number">2</span>     <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK, this time we get more closer to the correct answer.The next question is we  how to deal with the  index-exceeding problem.Lets go further to launch our  third try</p><h4 id="The-third-try"><a href="#The-third-try" class="headerlink" title="The third try"></a>The third try</h4><p><strong>code:</strong></p><pre class="line-numbers language-matlab"><code class="language-matlab">idx <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">cumsum</span><span class="token punctuation">(</span>A<span class="token operator">~=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">idx</span><span class="token punctuation">(</span>idx <span class="token operator">></span> <span class="token function">size</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> nan<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>In the above code, we directly assign the  index which exceed the maximum index number to <code>nan</code>.               I can bet this time , it must work fine in all  cases. What? You don’t believe what i have said. Ok, i don’t want to persuade you. The fact is alway fact, you can run the code on your machine.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;How to find out the none-zero element index of each row in matlab matrix without using for loop?  Honestly, this fucking problem frustrat
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="matlab" scheme="https://free-free.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>A Brief Introduction to Pytorch</title>
    <link href="https://free-free.github.io/2017/11/23/a-brief-introduction-of-pytorch/"/>
    <id>https://free-free.github.io/2017/11/23/a-brief-introduction-of-pytorch/</id>
    <published>2017-11-23T14:09:53.000Z</published>
    <updated>2018-02-10T10:27:11.479Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="machine-learning" scheme="https://free-free.github.io/tags/machine-learning/"/>
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>A Brief Introduction of Several Useful Convolutional Networks</title>
    <link href="https://free-free.github.io/2017/11/08/brief-introduction-of-several-convolution-networks/"/>
    <id>https://free-free.github.io/2017/11/08/brief-introduction-of-several-convolution-networks/</id>
    <published>2017-11-08T12:09:00.000Z</published>
    <updated>2017-11-08T13:02:43.239Z</updated>
    
    <content type="html"><![CDATA[<p>This  article is the course handout for Stanford University CS231n’s. it mainly contains a brief introduction of several common Convolutional Networks.</p><ul><li><p><strong>LeNet</strong></p><p>The first successful applications of Convolutional Networks were developed by Yann LeCun in 1990’s.Of these, the best known is the LeNet architecture that was used in read zip codes, digits,etc.</p><p><em>paper</em> : <a href="http://yann.lecun.com/exdb/publis/pdf/lecun-98.pdf" target="_blank" rel="external"><em>donwload</em></a></p></li><li><p><strong>AlexNet</strong></p><p>The first work that popularized Convolutional Networks in Computer Vision was the AlexNet,developed by Alex Krizhevsky,llya Sutskever and Geoff Hinton. The AlexNet was submitted to the  <a href="http://www.image-net.org/challenges/LSVRC/2014/" target="_blank" rel="external">ImageNet ILSVRC challenge</a> in 2012 and significantly outperformed  the second runner-up(top 5 error of 16% compared to runner-up with 26% error). The Network had a very similar architecture to LeNet, but was deeper,bigger,and featured Convolutional Layers stacked on top of each other(previously it was common to only have single CONV layer always immediately followed by a POOL layer)</p><p><em>paper</em> : <a href="http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks" target="_blank" rel="external"><em>download</em></a></p></li><li><p><strong>ZF Net</strong></p><p>The ILSVRC 2013 winner was a Convolutional Network from Matthew Zeiler and Rob Fergus. It became known as the ZFNet(short for Zerler &amp; Fergus Net). It was an improvement on AlexNet by tweaking the architecture hyperparameters, in particular by expanding the size of the middle convolutional layers and making the stride and filter size on the first layer smaller</p><p><em>paper</em> : <a href="http://arxiv.org/abs/1311.2901" target="_blank" rel="external"><em>download</em></a></p></li><li><p><strong>GoogLeNet</strong></p><p>The ILSVRC 2014 winner was a Convolutional Network from Szegedy et al. from Google. Its main contribution was the development of an <em>Inception Module</em> that dramatically reduced the number of parameters in the network(4M, compared to AlexNet with 60M). Additionally, this paper uses Average Pooling instead of Fully Connected layers at the top of the ConvNet, eliminating a large amount of parameters that do not seem to matter much. There are also several follow up versions to the GoogLeNet,most recently <a href="http://arxiv.org/abs/1602.07261" target="_blank" rel="external">Inception-v4</a>.</p><p><em>paper</em> : <a href="http://arxiv.org/abs/1409.4842" target="_blank" rel="external"><em>download</em></a></p></li><li><p><strong>VGGNet</strong></p><p>The runner-up in ILSVRC 2014 was the network from Karen Simonyan and Andrew Zisserman that became known as the VGGNet. Its main contribution was in showing that the depth of the network is a critical component for good performance. Their final best network contains 16 CONV/FC layers and, appealingly , features an extremely homogeneous architecture that only performs 3x3 convolutions and 2x2 pooling from the beginning to the end .Their <a href="http://www.robots.ox.ac.uk/~vgg/research/very_deep/" target="_blank" rel="external">pretrained model</a> is available for plug and play use in Caffe. A downside of the VGGNet is that it is more expensive to evaluate and uses a lot more memory and parameters(140M). Most of these parameters are  in the first fully connected layer, and it was since found that these FC layers can be removed with no performance downgrade , significantly reducing the number of necessary parameters</p><p><em>paper</em> : <a href="http://www.robots.ox.ac.uk/~vgg/research/very_deep/" target="_blank" rel="external"><em>donwload</em></a></p></li><li><p><strong>ResNet</strong></p><p>Residual Network developed by Kaiming  He et al. was the winner of ILSVRC 2015. It features special skip connections and a heavy use of batch normalization. The architecture is also missing fully connected layers at the end of the network. The reader is also referred to Kaiming’s presentations(<a href="https://www.youtube.com/watch?v=1PGLj-uKT1w" target="_blank" rel="external">video</a>, <a href="http://research.microsoft.com/en-us/um/people/kahe/ilsvrc15/ilsvrc2015_deep_residual_learning_kaiminghe.pdf" target="_blank" rel="external">slides</a>), and some <a href="https://github.com/gcr/torch-residual-networks" target="_blank" rel="external">recent experiments</a> that reproduce these networks in Torch. ResNets are currently by far state of the art Convolutional Neural Network models and are the default choice for using ConvNets in practice(as of May 10, 2016). In particular, also see more recent developments that tweak the original architecture from <a href="https://arxiv.org/abs/1603.05027" target="_blank" rel="external">Kaiming He et al. Identity Mappings in Deep Residual Networks</a> (published  Marc 2016).</p><p><em>paper</em> : <a href="http://arxiv.org/abs/1512.03385" target="_blank" rel="external"><em>donwload</em></a></p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://cs231n.github.io/convolutional-networks/" target="_blank" rel="external">[1]Convolutional Neural Networks (CNNs / ConvNets)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This  article is the course handout for Stanford University CS231n’s. it mainly contains a brief introduction of several common Convoluti
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="machine-learning" scheme="https://free-free.github.io/tags/machine-learning/"/>
    
      <category term="convolution-network" scheme="https://free-free.github.io/tags/convolution-network/"/>
    
  </entry>
  
  <entry>
    <title>关于学习新技术的方法和反思</title>
    <link href="https://free-free.github.io/2017/11/02/my-mind-pattern01/"/>
    <id>https://free-free.github.io/2017/11/02/my-mind-pattern01/</id>
    <published>2017-11-02T12:49:23.000Z</published>
    <updated>2017-11-04T12:36:15.030Z</updated>
    
    <content type="html"><![CDATA[<p>　　在这个技术日新月异的时代，每天都有很多技术过时，同时也会很多新技术被发明出来，作为一名技术人员，在学习新技术时，会有自己的一套学习方法。在此将自己的学习方法和反思记录下来。</p><p>　　在面对新技术时，不同的技术人员会根据自己的思维习惯采取不同的学习方法，但总的来说，大体分为两类。第一类是抛开其他因素，直接上手，以最快的速度将新技术运用到实践中，然后再根据自己的情况选择是否要在这门技术上深入下去。而第二类则是先做大量相关的基础铺垫，等基础牢固了，再去学习新技术。对于我而言，会根据不同的情况选择不同的学习方法。在项目紧急的情况下，我会选择第一类方法，以最快的速度将技术运用到实践中，等项目完成之后，再去考虑需不需要在这门技术上深入下去。比如，在一次项目中，需要使用QT开发一个Desktop Client，但之前我并没有QT相关的项目经验，也没有使用过C++开发过任何程序，项目又很紧急。在这个时候，唯一的办法就是直接上手QT，看官网文档，跑官网提供的例程。在跑了几个例程之后，大体了解了QT开发程序的基本思路，直接在例程上修改代码，实现自己的Desktop Client。在实现的过程中，也遇到了很多的问题，但相关的网站和论坛都能找得到相关的解决方案，最后顺利在deadline 之前完成。总的来说，第一类方法确实是一个很好的学习方法，在做中学，学中做，但对于我而言，这样做我会很没自信，心里会一种基础不牢而产生的恐惧感，所以在不紧急的情况下我都会选择第二类方法，它会让我感觉很自信、很踏实。研究生期间，自己选择机器学习作为研究方向，我没有选择直接上手机器学习，而是选择先去学习相关的数学知识(概率论、微积分、线性代数、最优化等)。虽然这些知识在本科的时候已经学过，但是自己心里还是很没自信，另一个我在时刻提醒自己必须先把数学再学一次才能去学习机器学习，但是再学这些数学知识又会将整个学习战线拉的很长，我担心自己没坚持到最后先就死在铺路过程中，这在很大程度上打击了自己学习动力(至少目前为止是这样)。在经过一段时间的纠结之后，我认为有必要去改变一下自己的学习方法，要大胆去尝试，不能畏于自己的纠结情绪。在学习新技术时的这种纠结情绪，我想很多技术人都会有，只是轻重不一样。记得一次在Udacity DL学习群里，有一个学员在群里问“学习DL需要哪些数学知识？”，结果另一个学员回答了一大通”微积分、概率论、线性代数、矩阵论、凸优化、流型理论、信息论……..”，结果群里马上出来十几个人批斗他，批的他最后直接退群了。果然语言是最厉害的武器。虽然只是一个小插曲，但是从那时起我就试图去反思自己的学习方法，改变一下学习策略。大多数技术员在刚接触一个新技术时都只是技术的使用者，并不是创造者，在开始我们自己也不知道自己到底缺哪方面的知识，不需要掌握太多相关的细节也能根据自己以往的技术经验快速将新技术应用到实践中去，在实践过程自然会发现自己缺少哪些知识，这时候有针对性的学习才是最好的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　在这个技术日新月异的时代，每天都有很多技术过时，同时也会很多新技术被发明出来，作为一名技术人员，在学习新技术时，会有自己的一套学习方法。在此将自己的学习方法和反思记录下来。&lt;/p&gt;
&lt;p&gt;　　在面对新技术时，不同的技术人员会根据自己的思维习惯采取不同的学习方法，但总的来
      
    
    </summary>
    
      <category term="生活" scheme="https://free-free.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="随笔" scheme="https://free-free.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>机器学习相关论文(持续更新)</title>
    <link href="https://free-free.github.io/2017/10/30/machine-learning-latest-topic-article/"/>
    <id>https://free-free.github.io/2017/10/30/machine-learning-latest-topic-article/</id>
    <published>2017-10-30T05:02:05.000Z</published>
    <updated>2017-11-06T12:01:54.611Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><p><strong>Dynamic Routing Between Capsules</strong></p><p>paper : <a href="https://arxiv.org/pdf/1710.09829.pdf" target="_blank" rel="external">download</a></p><p>author : Geoffrey E. Hinton, Sara Sabour and  Nicholas Frosst</p><p>date: September 2017</p></li></ul><hr><ul><li><p><strong>Multi-Scale Context Aggregation by Dilated Convolutions</strong></p><p>paper : <a href="https://arxiv.org/abs/1511.07122" target="_blank" rel="external">download</a></p><p>author : Fisher Yu, Vladlen Koltun</p><p>date : 2015</p></li></ul><hr><ul><li><p><strong>Striving for Simplicity: The All Convolutional Net</strong></p><p>paper : <a href="https://arxiv.org/abs/1412.6806" target="_blank" rel="external">download</a></p><p>author : Jost Tobias Springenberg, Alexey Dosovitskiy, Thomas Brox, Martin Riedmiller</p><p>date: 2014</p></li></ul><hr><ul><li><p><strong>Reducing the Dimensionality of Data with Neural Networks</strong></p><p>paper : <a href="https://pdfs.semanticscholar.org/7d76/b71b700846901ac4ac119403aa737a285e36.pdf" target="_blank" rel="external">download</a></p><p>author : G. E. Hinton and R. R. Salakhutdinov</p><p>date : 2006</p></li></ul><hr><ul><li><p><strong>Deep Learning：Yestoday，Today，and Tomorrow</strong></p><p>paper :  <a href="http://oymgew2u4.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%98%A8%E5%A4%A9%E3%80%81%E4%BB%8A%E5%A4%A9%E5%92%8C%E6%98%8E%E5%A4%A9%28%E4%BD%99%E5%87%AF%2A%29.pdf" target="_blank" rel="external">download</a></p><p>author : Yu Kai，Jia Lei，Chen Yuqiang，and Xu Wei</p><p>date : 2013</p></li></ul><hr><ul><li><p><strong>Backpropagration Applied To Handwrittn Zip Code Recogition</strong></p><p>paper : <a href="http://yann.lecun.com/exdb/publis/pdf/lecun-89e.pdf" target="_blank" rel="external">download</a></p><p>author : Y.LeCun,B.Boser,J.S.Denker,D.Henderson,R.E.Howard,W.Hubbard and L.D.Jackel</p><p>date : 1989</p></li></ul><hr><ul><li><p><strong>Experiments on Learning by Back Propagation</strong></p><p>paper : <a href="http://www.cs.toronto.edu/~fritz/absps/bptr.pdf" target="_blank" rel="external">download</a></p><p>author : David C.Plaut,Steven J.Nowlan and Geoffrey E.Hinton</p><p>date : June 1986</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dynamic Routing Between Capsules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;paper : &lt;a href=&quot;https://arxiv.org/pdf/1710.09829.pdf&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="machine-learning" scheme="https://free-free.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>使用共享状态实现单例模式？</title>
    <link href="https://free-free.github.io/2017/10/30/implementation-of-singleton-using-share-state/"/>
    <id>https://free-free.github.io/2017/10/30/implementation-of-singleton-using-share-state/</id>
    <published>2017-10-30T02:18:47.000Z</published>
    <updated>2017-11-04T12:26:28.593Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>之前介绍了3种实现单例模式方法：</p><ul><li><a href="/2017/10/11/implementation-of-singleton-using-decrator/">使用装饰器实现python单例模式</a></li><li><a href="/2017/10/14/implementation-of-singleton-using-metaclass/">使用元类实现python 单例模式</a></li><li><a href="/2017/10/29/implemenation-of-singleton-using-new-method/">使用Python类 <strong>__new__</strong> 方法实现单例模式</a></li></ul><p>这种三种实现方法都是我们通常理解的单例模式：即每次创建对象时，都返回同一个对象。但从一个更广的层面上讲，单例模式不仅可以理解为一个类创建的所有对象在内存中都是同一个对象，也可以理解为一个类的所有对象都共享同一状态。共享状态之后，虽然类每次创建的对象都不同，但是它们有一个共享的状态，一个对象对自己的状态操作，也会通过共享状态反映到其他的对象上<a href="http://code.activestate.com/recipes/66531/" target="_blank" rel="external">[1]</a>，这样做也能达到传统单例模式要求的功能。对于Python而言，所谓共享状态是将每一个对象的<code>__dict__</code>指向同一个字典。这种通过共享状态实现单例模式的方法被称为<strong>Borg</strong>或者<strong>Monostate</strong>。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h3><h5 id="2-1-Environment"><a href="#2-1-Environment" class="headerlink" title="2.1 Environment"></a>2.1 Environment</h5><ul><li>ubuntu16.04</li><li>python3.5</li></ul><h5 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 在将共享状态放在类的属性，</span>  _share_state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#The following code must be placed in first line in your __init__ method</span>    self<span class="token punctuation">.</span>__dict__ <span class="token operator">=</span> share_state    <span class="token comment" spellcheck="true"># The following code is your logical code </span>    <span class="token comment" spellcheck="true"># .....</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  obj1 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token punctuation">)</span>  obj2 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span>  obj1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span>  <span class="token comment" spellcheck="true"># 对obj1的操作会通过共享状态反映到obj2上</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  obj2<span class="token punctuation">.</span>age <span class="token operator">+=</span> <span class="token number">10</span>  <span class="token comment" spellcheck="true"># 对obj2的操作也会通过贡献状态反映到obj1上</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>output</p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">140481749803528</span><span class="token number">140481749803640</span><span class="token number">21</span><span class="token number">31</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>another way: 在<code>__new__</code>method实现状态的共享，如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 在将共享状态放在类的属性，</span>  _share_state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    obj <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    obj<span class="token punctuation">.</span>__dict__ <span class="token operator">=</span> cls<span class="token punctuation">.</span>_share_state    <span class="token keyword">return</span> obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的两种实现方法是在<code>__init__</code>method中或者<code>__new__</code>method中实现状态共享，都是侵入式的。为了让类的实现显得更加的优美、解耦，可以使用装饰器来实现，如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">Borg</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>  cls<span class="token punctuation">.</span>_obj_share_state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  original_init <span class="token operator">=</span> cls<span class="token punctuation">.</span>__init__  <span class="token keyword">def</span> <span class="token function">new_init</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>__dict__ <span class="token operator">=</span> cls<span class="token punctuation">.</span>_obj_share_state    original_init<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  cls<span class="token punctuation">.</span>__init__ <span class="token operator">=</span> new_init  <span class="token keyword">return</span> cls@Borg<span class="token keyword">class</span> <span class="token class-name">KlassOne</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  obj1 <span class="token operator">=</span> KlassOne<span class="token punctuation">(</span><span class="token punctuation">)</span>  obj2 <span class="token operator">=</span> KlassOne<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span>  obj1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  obj2<span class="token punctuation">.</span>age <span class="token operator">+=</span> <span class="token number">30</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>output：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">139977434952480</span><span class="token number">139977434952648</span><span class="token number">10</span><span class="token number">40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://code.activestate.com/recipes/66531/" target="_blank" rel="external">[1]SINGLETON? WE DON’T NEED NO STINKIN’ SINGLETON: THE BORG DESIGN PATTERN</a></p><p><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">[2]Python单例模式的4种实现方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h3&gt;&lt;p&gt;之前介绍了3种实现单例模式方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/10/11/implement
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用Python类__new__方法实现单例模式</title>
    <link href="https://free-free.github.io/2017/10/29/implemenation-of-singleton-using-new-method/"/>
    <id>https://free-free.github.io/2017/10/29/implemenation-of-singleton-using-new-method/</id>
    <published>2017-10-29T10:35:10.000Z</published>
    <updated>2017-11-04T12:26:10.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>前两篇文章分别介绍了<a href="/2017/10/11/implementation-of-singleton-using-decrator/">使用装饰器实现单例模式</a>和<a href="/2017/10/14/implementation-of-singleton-using-metaclass/">使用元类实现单例模式</a>。这篇文章介绍使用Python类的<code>__new__</code>方法来实现单例模式。当谈及Python类实例化对象时，不得不提到创建对象过程中涉及到的两个方法<code>__init__</code>和<code>__new__</code>。在Python的类中，<code>__init__</code>method是对象初始化器，而且<code>__new__</code>method才是真正的构造method，它负责创建对象，并将创建的对象返回。对象的创建流程如下：</p><p><img src="http://oy4cno18k.bkt.clouddn.com/implementation-of-singleton-using-new-method-01.png" alt=""></p><p>图中实线箭头表示调用关系，虚线表示返回。当类创建一个对象时，由类的Metaclass的<code>__call__</code>method来调用类的<code>__new__</code>method，<code>__new__</code>method将对象创建好之后返回给Metaclass的<code>__call__</code>method，然后由Metaclass的<code>__call__</code>method来调用类的<code>__init__</code>method。根据上面的流程可知，要实现单例模式，只需要在类中实现<code>__new__</code>method，并每次返回同一个对象即可。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h3><h5 id="2-1-Environment"><a href="#2-1-Environment" class="headerlink" title="2.1 Environment"></a>2.1 Environment</h5><ul><li>ubuntu16.04</li><li>python3.5</li></ul><h5 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Creating object!"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token string">'_instance'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Initiating object!"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  obj1 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token punctuation">)</span>  obj2 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>obj1 <span class="token operator">==</span> obj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>output:</p><pre class="line-numbers language-python"><code class="language-python">Creating object!Initiating object!Creating object!Initiating object!<span class="token number">140549528785752</span><span class="token number">140549528785752</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由输出可知创建的两个对象都是同一个实例，同时也验证了对象的创建流程。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">[1]Python单例模式的4种实现方法</a></p><p><a href="https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/" target="_blank" rel="external">[2]Understanding Python metaclasses</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h3&gt;&lt;p&gt;前两篇文章分别介绍了&lt;a href=&quot;/2017/10/11/implementation-of-singleton-usi
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Markdown集成mathjax</title>
    <link href="https://free-free.github.io/2017/10/24/integrate-with-mathjax-in-markdown/"/>
    <id>https://free-free.github.io/2017/10/24/integrate-with-mathjax-in-markdown/</id>
    <published>2017-10-24T10:42:57.000Z</published>
    <updated>2018-01-01T13:56:33.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​    之前一直使用markdown写文章，使用的都是markdown常规的语法，并没有考虑过怎样使用markdown插入数学公式，直到最近需要在文章中插入数学公式时，才认真考虑怎样使用markdown插入数学公式。在网上查了之后，发现markdown并不支持直接插入数学公式，需要借助第三方来插入，在草草试用几种插入数学公式的方式之后，个人觉得使用MathJax插入数学公式比较方便、简洁，插入的数学公式也很漂亮。遂在这里把怎样使用MathJax在markdown中插入数学公式的方法和基本的MathJax的语法记录下来，以便之后学习，如有什么错误请大家指教。</p><h1 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h1><h2 id="1-MathJax简介"><a href="#1-MathJax简介" class="headerlink" title="1. MathJax简介"></a>1. MathJax简介</h2><p>MathJax是一个javascript软件包，它允许你通过LaTex、MathML或者AsciiMath语法在网页中插入数学公式，并通过javascript处理之后产生HTML、SVG或者MathML equations 等可视化的格式，以便在浏览器中浏览。</p><h2 id="2-引入MathJax"><a href="#2-引入MathJax" class="headerlink" title="2. 引入MathJax"></a>2. 引入MathJax</h2><ul><li><h3 id="通过CDN引入"><a href="#通过CDN引入" class="headerlink" title="通过CDN引入"></a>通过CDN引入</h3><p>通过CDN网络引入MathJax只需要在Markdown文档加入下面的代码<a href="http://docs.mathjax.org/en/latest/start.html#using-a-content-delivery-network-cdn" target="_blank" rel="external"><a href="http://docs.mathjax.org/en/latest/start.html#using-a-content-delivery-network-cdn" target="_blank" rel="external">1</a></a>，在markdown解析的时候会通过CDN自动将MathJax加载到当前页面中。该方式需要联网，但也是最简单、最快速的方式，个人推荐也使用这种方式。</p><p>​</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> <span class="token keyword">async</span>  src<span class="token operator">=</span><span class="token string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​</p></li></ul><ul><li><h3 id="本地引入"><a href="#本地引入" class="headerlink" title="本地引入"></a>本地引入</h3><p>本地引入需要将MathJax安装到你的服务器上，或者下载到本地磁盘上，具体引入方式请参考官方文档<a href="http://docs.mathjax.org/en/latest/start.html#installing-your-own-copy-of-mathjax" target="_blank" rel="external"><a href="http://docs.mathjax.org/en/latest/start.html#installing-your-own-copy-of-mathjax" target="_blank" rel="external">2</a></a>。</p></li></ul><h2 id="3-MathJax的LaTex语法"><a href="#3-MathJax的LaTex语法" class="headerlink" title="3. MathJax的LaTex语法"></a>3. MathJax的LaTex语法</h2><h3 id="3-1-数学公式呈现方式"><a href="#3-1-数学公式呈现方式" class="headerlink" title="3.1 数学公式呈现方式"></a>3.1 数学公式呈现方式</h3><h4 id="3-1-1-行内公式-inline-formulas"><a href="#3-1-1-行内公式-inline-formulas" class="headerlink" title="3.1.1 行内公式(inline formulas)"></a>3.1.1 行内公式(inline formulas)</h4><p>所谓行内公式是指公式与文字显示在同一行，以<strong>\$……..\$</strong>来标记，在两个<strong>$</strong>符号插入数学公式。例如：</p><ul><li><p>\$\cos{2\theta}=\cos^2{\theta}-\sin^2{\theta}$</p><p>$\displaystyle \cos{2\theta}=\cos^2{\theta}-\sin^2{\theta}$</p></li><li><p>\$\lim_{x \to \infty} \mathrm{e}^{-x} = 0$</p><p>$\lim_{x \to \infty} \mathrm{e}^{-x} = 0$</p></li><li><p>\$f(t)*g(t)=\int_{-\infty}^{+\infty}{f(\tau)g(t-\tau)\mathrm{d}\tau}$</p><p>$ f(t)*g(t)=\int_{-\infty}^{+\infty}{f(\tau)g(t-\tau)\mathrm{d}\tau}$</p><p>​</p></li></ul><h4 id="3-1-2-Displayed-formulas"><a href="#3-1-2-Displayed-formulas" class="headerlink" title="3.1.2 Displayed formulas"></a>3.1.2 Displayed formulas</h4><p>所谓Displayed formulas指单独另起一行居中并放大显示的数学公式，以<strong>\$\$……$$</strong>来标记，例如：</p><ul><li><p>\$\$\cos^2{2\theta}=\cos^2{\theta}-\sin^2{\theta}$$</p><p>$$\displaystyle \cos^2{2\theta}=\cos^2{\theta}-\sin^2{\theta}$$ </p></li><li><p>\$\$\lim_{x \to \infty} \mathrm{e}^(-x) =0$$</p><p>$$\lim_{x \to \infty}\mathrm{e}^{-x}=0$$</p></li><li><p>\$\$f(t)*g(t)=\int_{-\infty}^{+\infty}{f(\tau)g(t-\tau)\mathrm{d}\tau}$$</p><p>$$f(t)*g(t)=\int_{-\infty}^{+\infty}{f(\tau)g(t-\tau)\mathrm{d}\tau}$$</p></li></ul><h3 id="3-2-LaTex数学符号"><a href="#3-2-LaTex数学符号" class="headerlink" title="3.2 LaTex数学符号"></a>3.2 LaTex数学符号</h3><h4 id="3-2-1-希腊字母-Greek-letters"><a href="#3-2-1-希腊字母-Greek-letters" class="headerlink" title="3.2.1 希腊字母(Greek letters)"></a>3.2.1 希腊字母(Greek letters)</h4><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">$A,\alpha$</td><td style="text-align:center">A ,\alpha</td></tr><tr><td style="text-align:center">$B,\alpha$</td><td style="text-align:center">B,\beta</td></tr><tr><td style="text-align:center">$\Gamma,\gamma$</td><td style="text-align:center">\Gamma,\gamma</td></tr><tr><td style="text-align:center">$\Delta,\delta$</td><td style="text-align:center">\Delta,\delta</td></tr><tr><td style="text-align:center">$E,\epsilon,\varepsilon$</td><td style="text-align:center">E,\epsilon,\varepsilon</td></tr><tr><td style="text-align:center">$Z,\zeta$</td><td style="text-align:center">E,\zeta</td></tr><tr><td style="text-align:center">$\Theta,\theta,\vartheta$</td><td style="text-align:center">\Theta,\theta,\vartheta</td></tr><tr><td style="text-align:center">$I,\iota$</td><td style="text-align:center">I,\iota</td></tr><tr><td style="text-align:center">$K,\kappa,\varkappa$</td><td style="text-align:center">K,\kappa,\varkappa</td></tr><tr><td style="text-align:center">$\Lambda,\lambda$</td><td style="text-align:center">\Lambda,\lambda</td></tr><tr><td style="text-align:center">$M,\mu$</td><td style="text-align:center">M,\mu</td></tr><tr><td style="text-align:center">$N,\nu$</td><td style="text-align:center">N,\nu</td></tr><tr><td style="text-align:center">$\Xi,\xi$</td><td style="text-align:center">\Xi,\xi</td></tr><tr><td style="text-align:center">$O,o$</td><td style="text-align:center">O,o</td></tr><tr><td style="text-align:center">$\Pi,\pi,\varpi$</td><td style="text-align:center">\Pi,\pi,\varpi</td></tr><tr><td style="text-align:center">$P,\rho,\varrho$</td><td style="text-align:center">P,\rho,\varrho</td></tr><tr><td style="text-align:center">$\Sigma,\sigma,\varsigma$</td><td style="text-align:center">\Sigma,\sigma,\varsigma</td></tr><tr><td style="text-align:center">$T,\tau$</td><td style="text-align:center">T,\tau</td></tr><tr><td style="text-align:center">$\Upsilon,\upsilon$</td><td style="text-align:center">\Upsilon,\up</td></tr><tr><td style="text-align:center">$\Phi,\phi,\varphi$</td><td style="text-align:center">\Phi,\phi,\varphi</td></tr><tr><td style="text-align:center">$X,\chi$</td><td style="text-align:center">X,\chi</td></tr><tr><td style="text-align:center">$\Psi,\psi$</td><td style="text-align:center">\Psi,\psi</td></tr><tr><td style="text-align:center">$\Omega,\omega$</td><td style="text-align:center">\Omega,\o</td></tr></tbody></table><h4 id="3-2-2-其他常用数学符号"><a href="#3-2-2-其他常用数学符号" class="headerlink" title="3.2.2 其他常用数学符号"></a>3.2.2 其他常用数学符号</h4><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">$\partial$</td><td style="text-align:center">\partial</td></tr><tr><td style="text-align:center">$\eth$</td><td style="text-align:center">\eth</td></tr><tr><td style="text-align:center">$\hbar$</td><td style="text-align:center">\hbar</td></tr><tr><td style="text-align:center">$\imath$</td><td style="text-align:center">\imath</td></tr><tr><td style="text-align:center">$\jmath$</td><td style="text-align:center">\jmath</td></tr><tr><td style="text-align:center">$\ell$</td><td style="text-align:center">\ell</td></tr><tr><td style="text-align:center">$\Re$</td><td style="text-align:center">\Re</td></tr><tr><td style="text-align:center">$\Im$</td><td style="text-align:center">\Im</td></tr><tr><td style="text-align:center">$\wp$</td><td style="text-align:center">\wp</td></tr><tr><td style="text-align:center">$\nabla$</td><td style="text-align:center">\nabla</td></tr><tr><td style="text-align:center">$\Box$</td><td style="text-align:center">\Box</td></tr><tr><td style="text-align:center">$\infty$</td><td style="text-align:center">\infty</td></tr><tr><td style="text-align:center">$\aleph$</td><td style="text-align:center">\aleph</td></tr><tr><td style="text-align:center">$\beth$</td><td style="text-align:center">\beth</td></tr><tr><td style="text-align:center">$\gimel$</td><td style="text-align:center">\gimel</td></tr></tbody></table><h4 id="3-2-3-三角函数符号"><a href="#3-2-3-三角函数符号" class="headerlink" title="3.2.3 三角函数符号"></a>3.2.3 三角函数符号</h4><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">$\sin$</td><td style="text-align:center">\sin</td></tr><tr><td style="text-align:center">$\cos$</td><td style="text-align:center">\cos</td></tr><tr><td style="text-align:center">$\tan$</td><td style="text-align:center">\tan</td></tr><tr><td style="text-align:center">$\cot$</td><td style="text-align:center">\cot</td></tr><tr><td style="text-align:center">$\arcsin$</td><td style="text-align:center">\arcsin</td></tr><tr><td style="text-align:center">$\arccos$</td><td style="text-align:center">\arccos</td></tr><tr><td style="text-align:center">$\arctan$</td><td style="text-align:center">\arctan</td></tr><tr><td style="text-align:center">$\sinh$</td><td style="text-align:center">\sinh</td></tr><tr><td style="text-align:center">$\cosh$</td><td style="text-align:center">\cosh</td></tr><tr><td style="text-align:center">$\tanh$</td><td style="text-align:center">\tanh</td></tr><tr><td style="text-align:center">$\coth$</td><td style="text-align:center">\coth</td></tr><tr><td style="text-align:center">$\sec$</td><td style="text-align:center">\sec</td></tr></tbody></table><h4 id="3-3-4-双目运算符"><a href="#3-3-4-双目运算符" class="headerlink" title="3.3.4 双目运算符"></a>3.3.4 双目运算符</h4><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">$\pm$</td><td style="text-align:center">\pm</td></tr><tr><td style="text-align:center">$\mp$</td><td style="text-align:center">\mp</td></tr><tr><td style="text-align:center">$\times$</td><td style="text-align:center">\times</td></tr><tr><td style="text-align:center">$\div$</td><td style="text-align:center">\div</td></tr><tr><td style="text-align:center">$\ast$</td><td style="text-align:center">\ast</td></tr><tr><td style="text-align:center">$\star$</td><td style="text-align:center">\star</td></tr><tr><td style="text-align:center">$\cap$</td><td style="text-align:center">\cap</td></tr><tr><td style="text-align:center">$\cup$</td><td style="text-align:center">\cup</td></tr><tr><td style="text-align:center">$\sqcap$</td><td style="text-align:center">\sqcap</td></tr><tr><td style="text-align:center">$\sqcup$</td><td style="text-align:center">\sqcup</td></tr><tr><td style="text-align:center">$\vee$</td><td style="text-align:center">\vee</td></tr><tr><td style="text-align:center">$\wedge$</td><td style="text-align:center">\wedge</td></tr><tr><td style="text-align:center">$\cdot$</td><td style="text-align:center">\cdot</td></tr><tr><td style="text-align:center">$\diamond$</td><td style="text-align:center">\diamond</td></tr><tr><td style="text-align:center">$\bigtriangleup$</td><td style="text-align:center">\bigtriangleup</td></tr><tr><td style="text-align:center">$\bigtriangledown$</td><td style="text-align:center">\bigtriangledown</td></tr><tr><td style="text-align:center">$\triangleleft$</td><td style="text-align:center">\triangleleft</td></tr><tr><td style="text-align:center">$\triangleright$</td><td style="text-align:center">\triangleright</td></tr><tr><td style="text-align:center">$\bigcirc$</td><td style="text-align:center">\bigcirc</td></tr><tr><td style="text-align:center">$\bullet$</td><td style="text-align:center">\bullet</td></tr><tr><td style="text-align:center">$\oplus$</td><td style="text-align:center">\oplus</td></tr><tr><td style="text-align:center">$\otimes$</td><td style="text-align:center">\otimes</td></tr><tr><td style="text-align:center">$\ominus$</td><td style="text-align:center">\ominus</td></tr><tr><td style="text-align:center">$\odot$</td><td style="text-align:center">\odot</td></tr><tr><td style="text-align:center">$\circ$</td><td style="text-align:center">\circ</td></tr><tr><td style="text-align:center">$\setminus$</td><td style="text-align:center">\setminus</td></tr><tr><td style="text-align:center">$\oslash$</td><td style="text-align:center">\oslash</td></tr></tbody></table><h4 id="3-2-5-集合逻辑符号"><a href="#3-2-5-集合逻辑符号" class="headerlink" title="3.2.5 集合逻辑符号"></a>3.2.5 集合逻辑符号</h4><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaText符号</th></tr></thead><tbody><tr><td style="text-align:center">$\exists$</td><td style="text-align:center">\exists</td></tr><tr><td style="text-align:center">$\nexists$</td><td style="text-align:center">\nexists</td></tr><tr><td style="text-align:center">$\forall$</td><td style="text-align:center">\forall</td></tr><tr><td style="text-align:center">$\neg$</td><td style="text-align:center">\neg</td></tr><tr><td style="text-align:center">$\subset$</td><td style="text-align:center">\subset</td></tr><tr><td style="text-align:center">$\supset$</td><td style="text-align:center">\supset</td></tr><tr><td style="text-align:center">$\in$</td><td style="text-align:center">\in</td></tr><tr><td style="text-align:center">$\notin$</td><td style="text-align:center">\notin</td></tr><tr><td style="text-align:center">$\ni$</td><td style="text-align:center">\ni</td></tr><tr><td style="text-align:center">$\land$</td><td style="text-align:center">\land</td></tr><tr><td style="text-align:center">$\lor$</td><td style="text-align:center">\lor</td></tr><tr><td style="text-align:center">$\to$</td><td style="text-align:center">\to</td></tr><tr><td style="text-align:center">$\gets$</td><td style="text-align:center">\gets</td></tr><tr><td style="text-align:center">$\mapsto$</td><td style="text-align:center">\mapsto</td></tr><tr><td style="text-align:center">$\implies$</td><td style="text-align:center">\implies</td></tr><tr><td style="text-align:center">$\leftrightarrow$</td><td style="text-align:center">\leftrightarrow</td></tr><tr><td style="text-align:center">$\Leftrightarrow$</td><td style="text-align:center">\Leftrightarrow</td></tr><tr><td style="text-align:center">$\top$</td><td style="text-align:center">\top</td></tr><tr><td style="text-align:center">$\bot$</td><td style="text-align:center">\bot</td></tr><tr><td style="text-align:center">$\emptyset,\varnothing$</td><td style="text-align:center">\emptyset,\varnothing</td></tr></tbody></table><h4 id="3-2-6-上标号和下标号的表示方法"><a href="#3-2-6-上标号和下标号的表示方法" class="headerlink" title="3.2.6 上标号和下标号的表示方法"></a>3.2.6 上标号和下标号的表示方法</h4><p>在LaTex中，使用<code>^</code>符号代表上标号，使用<code>_</code>符号代表下标号，当上/下标号是一个复合的表达式时，需要将使用curly braces<code>{}</code>将表达式包起来，例如:</p><ul><li><p>\$\$k_{n+1} = n^2 + k<em>n^2  - k\</em>{n-1}$$</p><p>$$k_{n+1} = n^2 + k<em>n^2 - k</em>{n-1}$$</p></li><li><p>\$\$n^22$$</p><p>$$n^{22}$$</p></li><li><p>\$\$lim_{x \to \infty} \mathrm(e)^{-x} =0 $$</p><p>$$lim_{x \to \infty} \mathrm{e}^{-x} = 0$$</p></li></ul><p>也可以使用<code>_</code>和<code>|</code>组合去显示下标的取值，例如：</p><p>\$\$f(n) = n^5 + 4n^2 + 2 |_{n=17}$$</p><p>$$f(n) = n^2 + 4n^2 + 2 |_{n=17}$$</p><h4 id="3-2-7-分式和二项式的表示方法"><a href="#3-2-7-分式和二项式的表示方法" class="headerlink" title="3.2.7 分式和二项式的表示方法"></a>3.2.7 分式和二项式的表示方法</h4><ul><li><p>分式</p><p>在LaTex中，使用<code>\frac{numerator}{denominator}</code>来创建一个分式，<code>numerator</code>代表分子，<code>denominator</code>代表分子，具体例子如下:</p><ul><li><p>\$\$\frac{n!}{k!(n-k)!}$$</p><p>$$\frac{n!}{k!(n-k)!}$$</p></li><li><p>\$\$\frac{\frac{1}{x} + \frac{1}{y}}{y-z}$$</p><p>$$\frac{\frac{1}{x} + \frac{1}{y}}{y-z}$$</p></li></ul></li><li><p>二项式</p><p>使用<code>\binom{n}{k}</code>来创建一个二项式表达式，例如：</p><p>\$\$\frac{n!}{k!(n-k)!} =  \binom{n}{k}$$</p><p>$$\frac{n!}{k!(n-k)!} = \binom{n}{k}$$</p></li></ul><h4 id="3-2-8-根号的表示方法"><a href="#3-2-8-根号的表示方法" class="headerlink" title="3.2.8 根号的表示方法"></a>3.2.8 根号的表示方法</h4><p>使用<code>\sqrt{...}</code>去创建一个根号表示，使用<code>[]</code>去改变根号的权重，具体例子如下：</p><ul><li><p>\$\$\sqrt{\frac{x+1}{x}}$$</p><p>$$\sqrt{\frac{x+1}{x}}$$</p></li><li><p>\$\$\sqrt[n]{1 + x + x^2 +\cdots + x^n}$</p><p>$$\sqrt[n]{1 + x + x^2 + \cdots + x^2}$$</p></li></ul><h4 id="3-2-9-求和和积分公式的表示方法"><a href="#3-2-9-求和和积分公式的表示方法" class="headerlink" title="3.2.9 求和和积分公式的表示方法"></a>3.2.9 求和和积分公式的表示方法</h4><ul><li><p>求和</p><p>使用<code>\sum</code>来创建一个求和的公式，使用<code>^</code>来指定求和公式的上限，使用<code>_</code>来指定求和公式的下限，例如：</p><ul><li><p>\$\$\sum_{i=1}^{10} t_i$$</p><p>$$\sum_{i=1}^{10} t_i$$</p></li><li><p>\$\$sum_{i=0}^{n} x^i$$</p><p>$$\sum_{i=0}^{n} x^i$$</p></li></ul></li></ul><p>　　当求和公式的下限需要写多行时，可以使用<code>\substack</code>组合<code>\\</code>来将下标写成多行，例如</p><p>　　\$\$\sum_{\substack{ 0&lt;i&lt;m \\0&lt;j&lt;n}} P(i,j)$$</p><p>​        $$\sum_{\substack{0&lt;i&lt;m\\0&lt;j&lt;n}} P(i,j)$$</p><ul><li><p>积分</p><p>使用<code>\int</code>来创建一个积分公式，使用<code>^</code>来指定求和公式的上限，使用<code>_</code>来指定求和公式的下限，例如：</p><p>\$\$\int_{-\infty}^{+\infty} \mathrm{e}^{-x}\,\mathrm{d}x$$</p><p>$$\int_{-\infty}^{+\infty} \mathrm{e}^{-x}\,\mathrm{d}x$$</p></li></ul><p>LaTex中还有很多命令和<code>\sum</code>和<code>\int表示方式相似</code>,类似的命令如下</p><table><thead><tr><th style="text-align:center">显示符号</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">$\sum$</td><td style="text-align:center">\sum</td></tr><tr><td style="text-align:center">$\bigoplus$</td><td style="text-align:center">\bigoplus</td></tr><tr><td style="text-align:center">$\bigcup$</td><td style="text-align:center">\bigcup</td></tr><tr><td style="text-align:center">$\bigsqcup$</td><td style="text-align:center">\bigsqcup</td></tr><tr><td style="text-align:center">$\int$</td><td style="text-align:center">\int</td></tr><tr><td style="text-align:center">$\iiint$</td><td style="text-align:center">\iiint</td></tr><tr><td style="text-align:center">$\prod$</td><td style="text-align:center">\prod</td></tr><tr><td style="text-align:center">$\bigotimes$</td><td style="text-align:center">\bigcap</td></tr><tr><td style="text-align:center">$\bigvee$</td><td style="text-align:center">\bigvee</td></tr><tr><td style="text-align:center">$\oint$</td><td style="text-align:center">\oint</td></tr><tr><td style="text-align:center">$\iiiint$</td><td style="text-align:center">\iiiint</td></tr><tr><td style="text-align:center">$\coprod$</td><td style="text-align:center">\coprod</td></tr><tr><td style="text-align:center">$\bigwedge$</td><td style="text-align:center">\bigwedge</td></tr><tr><td style="text-align:center">$\iint$</td><td style="text-align:center">\iint</td></tr><tr><td style="text-align:center">$\idotsint$</td><td style="text-align:center">\idotsin</td></tr></tbody></table><h4 id="3-2-10-方括号，圆括号，分隔符"><a href="#3-2-10-方括号，圆括号，分隔符" class="headerlink" title="3.2.10 方括号，圆括号，分隔符"></a>3.2.10 方括号，圆括号，分隔符</h4><table><thead><tr><th style="text-align:center">显示符号</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">$ ( a )$</td><td style="text-align:center">( a )</td></tr><tr><td style="text-align:center">$[ b ]$</td><td style="text-align:center">[ b ]</td></tr><tr><td style="text-align:center">${c}$</td><td style="text-align:center">\{c\}</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">d</td><td>$</td><td>\\</td><td>d\\</td><td></td></tr><tr><td style="text-align:center">$\langle f \rangle$</td><td style="text-align:center">\langle f \rangle</td></tr><tr><td style="text-align:center">$\lfloor g \rfloor$</td><td style="text-align:center">\lfloor g \rfloor</td></tr><tr><td style="text-align:center">$\lceil h \rceil$</td><td style="text-align:center">\lceil h \rceil</td></tr><tr><td style="text-align:center">$\</td><td style="text-align:center">e\</td><td>$</td><td>\\</td><td>e \\</td><td></td></tr><tr><td style="text-align:center">$\ulcorner i \urcorner$</td><td style="text-align:center">\ulcorner i \urcorner</td></tr></tbody></table><h4 id="3-2-11-省略号"><a href="#3-2-11-省略号" class="headerlink" title="3.2.11 省略号"></a>3.2.11 省略号</h4><table><thead><tr><th style="text-align:center">显示符号</th><th style="text-align:center">LaTex符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">$\dots$</td><td style="text-align:center">\dots</td><td style="text-align:left">通用的省略号表示方法，通常使用在文本中，它会根据上下文自动管理空格</td></tr><tr><td style="text-align:center">$\ldots$</td><td style="text-align:center">\ldots</td><td style="text-align:left">和通用的省略号相似，但不会自动管理空格</td></tr><tr><td style="text-align:center">$\cdots$</td><td style="text-align:center">\cdots</td><td style="text-align:left">这种省略号会根据文字的高度自动垂直居中</td></tr><tr><td style="text-align:center">$\vdots$</td><td style="text-align:center">\vdots</td><td style="text-align:left">垂直的省略号</td></tr><tr><td style="text-align:center">$\ddots$</td><td style="text-align:center">\ddots</td><td style="text-align:left">对角省略号</td></tr><tr><td style="text-align:center">$\dotsc$</td><td style="text-align:center">\dotsc</td><td style="text-align:left">dots with commas,$A_1,A_2,\dotsc,$</td></tr><tr><td style="text-align:center">$\dotsb$</td><td style="text-align:center">\dotsb</td><td style="text-align:left">dots with binary operators/relations，$A_1+\dotsb +A_N$</td></tr><tr><td style="text-align:center">$\dotsm$</td><td style="text-align:center">\dotsm</td><td style="text-align:left">mutiplication dots,$Ａ_1\dotsm  A_N$</td></tr><tr><td style="text-align:center">$\dotsi$</td><td style="text-align:center">\dotsi</td><td style="text-align:left">dots with integrals, $\int_a^b \dotsi$</td></tr></tbody></table><h4 id="3-2-12-空格"><a href="#3-2-12-空格" class="headerlink" title="3.2.12 空格"></a>3.2.12 空格</h4><p>LaText语法本身会忽略空格，在LaTex中有两种空格：小空格和四格空格</p><ul><li><p>小空格</p><p>\$a \ b\$ 呈现为：$a \ b$</p></li><li><p>四格空格</p><p>\$a \quad b\$ 呈现为：$a \quad b$</p></li></ul><h4 id="3-2-13-矩阵"><a href="#3-2-13-矩阵" class="headerlink" title="3.2.13 矩阵"></a>3.2.13 矩阵</h4><p>基本的矩阵可以使用matrix 环境来创建，矩阵和其他的类表结构一样，列之间使用<code>&amp;</code>来分开，行之间使用<code>\\</code>来封开，例如：</p><pre class="line-numbers language-laTex"><code class="language-laTex">$$    \begin{matrix}       a &  b & c \\      d &  e & f  \\     g &  h & i     \end{matrix} $$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$ \begin{matrix} a &amp; b &amp;c  \\ d &amp; e &amp; f \\ g &amp; h &amp; i \end{matrix} $$</p><p>LaTex支持多种不同的矩阵声明环境，具体如下表</p><table><thead><tr><th>Environment name</th><th>Surrounding delimiter</th><th style="text-align:center">Notes</th></tr></thead><tbody><tr><td>pmatrix</td><td>$(\ )$</td><td style="text-align:center">列默认居中</td></tr><tr><td>pmatrix*</td><td>$(\ )$</td><td style="text-align:center">可以指定列的对齐方式</td></tr><tr><td>bmatrix</td><td>$[ \ ]$</td><td style="text-align:center">列默认居中</td></tr><tr><td>bmatrix*</td><td>$[\ ]$</td><td style="text-align:center">可以指定列的对齐方式</td></tr><tr><td>Bmatrix</td><td>${ \ }$</td><td style="text-align:center">列默认居中</td></tr><tr><td>Bmatrix*</td><td>${ \ }$</td><td style="text-align:center">可以指定列的对齐方式</td></tr><tr><td>vmatrix</td><td>$</td><td style="text-align:center">\</td><td>$</td><td>列默认居中</td></tr><tr><td>vmatrix*</td><td>$</td><td style="text-align:center">\</td><td>$</td><td>可以指定列的对齐方式</td></tr><tr><td>Vmatrix</td><td>$\</td><td style="text-align:center">\ \</td><td>$</td><td>列默认居中</td></tr><tr><td>Vmatrix*</td><td>$\</td><td style="text-align:center">\ \</td><td>$</td><td>可以指定列的对齐方式</td></tr></tbody></table><ul><li><p>pmatrix</p><pre class="line-numbers language-laTex"><code class="language-laTex">$$ A_{m,n} =       \begin{pmatrix}      a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\     a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\     \vdots & \vdots  & \ddots & \dots \\      a_{m,1} & a_{m,2 }  & \cdots & a_{m,n}      \end{pmatrix}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>呈现为：</p></li></ul><p>$$A<em>{m,n} = \begin{pmatrix} a\</em>{1,1} &amp; a_{1,2} &amp; \cdots &amp; a_{1,n} \\ a_{2,1} &amp; a_{2,2} &amp; \cdots &amp; a_{2,n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_{m,1} &amp; a_{m,2} &amp; \cdots &amp; a_{m,n} \end{pmatrix}$$</p><ul><li><p>bmatrix</p><pre class="line-numbers language-laTex"><code class="language-laTex">$$ A_{m,n} =       \begin{bmatrix}     a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\     a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\     \vdots & \vdots  & \ddots & \dots \\      a_{m,1} & a_{m,2 }  & \cdots & a_{m,n}      \end{bmatrix}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>呈现为</p><p>$$ A<em>{m,n} = \begin{bmatrix} a\</em>{1,1} &amp; a_{1,2} &amp; \cdots &amp; a_{1,n} \\ a_{2,1} &amp; a_{2,2} &amp; \cdots &amp; a_{2,n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_{m,1} &amp; a_{m,2} &amp; \cdots &amp; a_{m,n} \end{bmatrix}$$</p></li><li><p>Bmatrix</p></li></ul><pre class="line-numbers language-latex"><code class="language-latex">  <span class="token equation string">$$</span> A_<span class="token punctuation">{</span>m,n<span class="token punctuation">}</span> =         <span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">Bmatrix</span><span class="token punctuation">}</span>       a_<span class="token punctuation">{</span>1,1<span class="token punctuation">}</span> <span class="token punctuation">&amp;</span> a_<span class="token punctuation">{</span>1,2<span class="token punctuation">}</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\cdots</span> <span class="token punctuation">&amp;</span> a_<span class="token punctuation">{</span>1,n<span class="token punctuation">}</span> <span class="token function selector">\\</span>       a_<span class="token punctuation">{</span>2,1<span class="token punctuation">}</span> <span class="token punctuation">&amp;</span> a_<span class="token punctuation">{</span>2,2<span class="token punctuation">}</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\cdots</span> <span class="token punctuation">&amp;</span> a_<span class="token punctuation">{</span>2,n<span class="token punctuation">}</span> <span class="token function selector">\\</span>       <span class="token function selector">\vdots</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\vdots</span>  <span class="token punctuation">&amp;</span> <span class="token function selector">\ddots</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\dots</span> <span class="token function selector">\\</span>       a_<span class="token punctuation">{</span>m,1<span class="token punctuation">}</span> <span class="token punctuation">&amp;</span> a_<span class="token punctuation">{</span>m,2 <span class="token punctuation">}</span>  <span class="token punctuation">&amp;</span> <span class="token function selector">\cdots</span> <span class="token punctuation">&amp;</span> a_<span class="token punctuation">{</span>m,n<span class="token punctuation">}</span>       <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">Bmatrix</span><span class="token punctuation">}</span>  <span class="token equation string">$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  呈现为</p><p>  $$ A<em>{m,n} = \begin{Bmatrix} a\</em>{1,1} &amp; a_{1,2} &amp; \cdots &amp; a_{1,n} \\ a_{2,1} &amp; a_{2,2} &amp; \cdots &amp; a_{2,n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_{m,1} &amp; a_{m,2} &amp; \cdots &amp; a_{m,n} \end{Bmatrix}$$</p><ul><li><p>vmatrix</p><pre class="line-numbers language-laTex"><code class="language-laTex">$$ A_{m,n} = 　　　　\begin{vmatrix}　　　　a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\　　　　a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\　　　　\vdots & \vdots  & \ddots & \dots \\　　　　a_{m,1} & a_{m,2 }  & \cdots & a_{m,n}　　　　\end{vmatrix}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>呈现为</p><p>$$ A<em>{m,n} = \begin{vmatrix} a\</em>{1,1} &amp; a_{1,2} &amp; \cdots &amp; a_{1,n} \\ a<em>{2,1} &amp; a\</em>{2,2} &amp; \cdots &amp; a_{2,n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_{m,1} &amp; a_{m,2} &amp; \cdots &amp; a_{m,n} \end{vmatrix}$$</p></li><li><p>Vmatrix</p><pre class="line-numbers language-laTex"><code class="language-laTex">$$ A_{m,n} = 　　　\begin{Vmatrix}　　　a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\　　　a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\　　　\vdots & \vdots  & \ddots & \dots \\　　　a_{m,1} & a_{m,2 }  & \cdots & a_{m,n}　　　\end{Vmatrix} $$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>呈现为</p><p>$$ A<em>{m,n} = \begin{Vmatrix} a\</em>{1,1} &amp; a_{1,2} &amp; \cdots &amp; a_{1,n} \\ a<em>{2,1} &amp; a\</em>{2,2} &amp; \cdots &amp; a_{2,n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_{m,1} &amp; a_{m,2} &amp; \cdots &amp; a_{m,n} \end{Vmatrix}$$</p></li></ul><h4 id="3-2-16-方程组"><a href="#3-2-16-方程组" class="headerlink" title="3.2.16 方程组"></a>3.2.16 方程组</h4><p>方程组可以使用cases环境来创建，起始、结束处以{cases}声明，例如：</p><pre class="line-numbers language-laTex"><code class="language-laTex">$$\begin{cases}a_1x_1+b_1x_2+c_1x_3 = d_1\\a_2x_1+b_2x_2+c_2x_3 = d_2\\a_3x_1+b_3x_2+c_2x_3 = d_3\\\end{cases}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>呈现为:</p><p>$$\begin{cases} a_1x_1+b_1x_2+c_1x_3 = d_1 \\ a_2x_1+b_2x_2+c_2x_3 = d_2 \\ a_3x_1+b_3x_2+c_2x_3 = d_3 \end{cases}$$</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics#List_of_Mathematical_Symbols" target="_blank" rel="external">[1]LaTeX/Mathematics</a></p><p><a href="http://blog.csdn.net/ethmery/article/details/50670297" target="_blank" rel="external">[2]基本数学公式语法(of MathJax)</a></p><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">[3]MathJax basic tutorial and quick reference</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;​    之前一直使用markdown写文章，使用的都是markdown常规的语法，并没有考虑过怎样使用markdown插入数学公式，直到最
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="math" scheme="https://free-free.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>从ubuntu16.04/ubuntu17.04升级到ubuntu17.10(译)</title>
    <link href="https://free-free.github.io/2017/10/23/upgrade-ubuntu17-10-from-ubuntu16-04-or-ubuntu17-04/"/>
    <id>https://free-free.github.io/2017/10/23/upgrade-ubuntu17-10-from-ubuntu16-04-or-ubuntu17-04/</id>
    <published>2017-10-23T14:15:31.000Z</published>
    <updated>2017-11-04T12:27:13.218Z</updated>
    
    <content type="html"><![CDATA[<p>最近ubuntu官方发布了又一个LTS：ubuntu17.10。ubuntu17.10有着很大的变化，引入了很多的新的技术。ubuntu17.10是ubuntu第一个使用GNOME Shell作为默认桌面的版本。自己也想着感受一下ubuntu17.10引入的新技术，在这里翻译一篇从ubuntu16.04/ubuntu17.04升级到ubuntu17.10的教程。<a href="https://www.linuxbabe.com/ubuntu/upgrade-from-ubuntu-16-0417-04-to-ubuntu-17-10" target="_blank" rel="external">原本在这里</a></p><h2 id="从ubuntu16-4-17-04升级到ubuntu17-10的两种方式"><a href="#从ubuntu16-4-17-04升级到ubuntu17-10的两种方式" class="headerlink" title="从ubuntu16.4/17.04升级到ubuntu17.10的两种方式"></a>从ubuntu16.4/17.04升级到ubuntu17.10的两种方式</h2><p>官方发布最近发布Ubuntu17.10。此教程打算向你展示两种从Ubuntu16.04/17.04升级到Ubuntu17.10的方法：使用图像界面升级助手升级和使用命令行升级。</p><h3 id="1-使用图形界面升级助手升级到Ubuntu17-10"><a href="#1-使用图形界面升级助手升级到Ubuntu17-10" class="headerlink" title="1. 使用图形界面升级助手升级到Ubuntu17.10"></a>1. 使用图形界面升级助手升级到Ubuntu17.10</h3><p>首先，打开图形终端并且运行下面的命令更新现有的软件包</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> apt dist-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意，在运行上面的命令的时候如果你已经安装了最新的内核，为了继续升级过程你需要重启系统，然后从Unity Dahs或者你自己的应用菜单打开<strong>Software &amp; Updates</strong></p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-16.04-to-ubuntu-17.10-01.png" alt=""></p><p>选择<strong>Updates</strong>选项卡并且在窗口的底部改变通知更新设置，将<strong>For long-term support version</strong>改变成<strong>For any new version</strong>.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-02.png" alt=""></p><p>然后点击关闭按钮。你会被要求输入密码以应用上面的改变，然后在终端中输入一下命令。</p><pre class="line-numbers language-bash"><code class="language-bash">$ update-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你正在使用的是Ubuntu17.04，你会发现软件已经是最新的，并且可以升级到<strong>Ubuntu 17.10</strong>了，点击<strong>Upgrade</strong>按钮。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/how-to-upgrade-from-Ubuntu-17.04-to-ubuntu-17.10-03.png" alt=""></p><p>如果你正在使用Ubuntu16.04，你会发现软件已经是最新的了，并且可以升级到<strong>Ubuntu 17.04</strong>了，点击<strong>Upgrade</strong>按钮。因为Ubuntu17.04还没有过期，Canonical始终会支持会Ubuntu17.04，所以在升级到Ubuntu17.10之前你需要先升级到Ubuntu17.04。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-04.png" alt=""></p><p>然后输入你的密码。输入密码后版本发布窗口将出现，请点击<strong>Upgrade</strong>按钮。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-05.png" alt=""></p><p>等待升级完成。如果你发现一些第三方的软件源是disabled的，只需要accept it，在升级后完成之后你可以re-enable这些软件源。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-06.png" alt=""></p><p>一旦升级完成之后，重启你的电脑。在登录界面，你可以点击cog图标选择使用Gnome,Gnome with X.org 或者Unity 桌面环境。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-07.png" alt=""></p><p>重启之后，在终端中运行下面的命令检查你当前的Ubuntu版本</p><pre class="line-numbers language-bash"><code class="language-bash">$ lsb_release -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你成功升级到Ubuntu17.10，终端将输出下面结果</p><pre class="line-numbers language-bash"><code class="language-bash">No LSB modules are availableDistributor ID: UbuntuDescription:    Ubuntu 17.10Release:        17.10Codename:       artful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用命令行升级到Ubuntu17-10"><a href="#2-使用命令行升级到Ubuntu17-10" class="headerlink" title="2.使用命令行升级到Ubuntu17.10"></a>2.使用命令行升级到Ubuntu17.10</h3><p>你可以使用命令行升级Ubuntu桌面版本和服务器版本。首先，打开终端窗口并且运行下面的命令去升级现有的软件包。</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> apt dist-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，确保你已经安装了<code>update-manager-core</code>，如果没有安装，输入下面命令进行安装</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt <span class="token function">install</span> update-manager-core<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，使用nano或者你自己喜爱的文本编辑器修改配置文件<code>/etc/update-manager/release-upgrades</code>，如下</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">nano</span>　/etc/update-manager/release-upgrades<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在配置文件的底部，将<strong>Prompt</strong>的值从<code>lts</code>改成<code>normal</code>，如下</p><pre class="line-numbers language-bash"><code class="language-bash">Prompt<span class="token operator">=</span>normal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存并关闭文件。之后运行下面的命令开始升级。</p><pre class="line-numbers language-bash"><code class="language-bash">$ do-release-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你正在使用Ubuntu17.04的话，接下来的界面将引导你升级到Ubuntu17.10。如果你正在使用Ubuntu16.04，接下来的界面将引导你先升级到Ubuntu17.04，升级到Ubuntu17.04后再重复上面相同的步骤升级到Ubuntu17.10。一旦升级完成，重启你的电脑。输入下面的命令去check你的Ubuntu版本</p><pre class="line-numbers language-bash"><code class="language-bash">$ lsb-release -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你成功升级到Ubuntu17.10，将输出下面的信息</p><pre class="line-numbers language-bash"><code class="language-bash">No LSB modules are available.Distributor ID: UbuntuDescription:    Ubuntu 17.10Release:        17.10Codename:       artful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>升级完成之后，你需要去re-enable第三方的软件源，比如PPA，因为在升级过程中这些软件源被disable了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近ubuntu官方发布了又一个LTS：ubuntu17.10。ubuntu17.10有着很大的变化，引入了很多的新的技术。ubuntu17.10是ubuntu第一个使用GNOME Shell作为默认桌面的版本。自己也想着感受一下ubuntu17.10引入的新技术，在这里翻
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下绑定串口设备名</title>
    <link href="https://free-free.github.io/2017/10/20/binding-serialport-device-name/"/>
    <id>https://free-free.github.io/2017/10/20/binding-serialport-device-name/</id>
    <published>2017-10-20T10:44:39.000Z</published>
    <updated>2017-11-04T12:25:56.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-为什么我需要绑定串口设备名"><a href="#1-为什么我需要绑定串口设备名" class="headerlink" title="1. 为什么我需要绑定串口设备名"></a>1. 为什么我需要绑定串口设备名</h3><p>　　最近在ubuntu上使用串口进行通信时，由于硬件的原因需要不时的拔掉串口然后再重新插上，可是每次拔掉之后再重新插上去发现串口设备名由原来的<code>/dev/ttyUSB0</code>变为<code>/dev/ttyUSB1</code>，导致每次重新插上串口时都需要在程序中改变串口设备名，来回这么折腾搞得我很毛躁呀。这就是为什么我要去绑定串口设备名的原因，目的很单纯，被造的。</p><h3 id="2-怎样去绑定串口设备名"><a href="#2-怎样去绑定串口设备名" class="headerlink" title="2.  怎样去绑定串口设备名"></a>2.  怎样去绑定串口设备名</h3><h4 id="1-分析"><a href="#1-分析" class="headerlink" title="(1) 分析"></a>(1) 分析</h4><p>为什么每次重新插上同一串口设备的时候，在<code>/dev/</code>目录会是不同的设备文件名(<code>/dev/ttyUSB0</code>或者<code>/dev/ttyUSB1</code>)？由于串口设备属于hot-pluggable设备，每次插入的时注册设备节点分配的设备ID不同，导致同一设备在呈现出不同的设备名。那有没有办法将同一设备绑定为固定的设备文件名呢？答案是有的，这时就需要需求的<code>udev</code>的帮助了，<code>udev</code>是Linux下专门负责管理动态设备，它时基于一定的规则来加载动态设备的，那我们需要做的就是添加相应的规定即可。</p><h4 id="2-绑定串口设备名"><a href="#2-绑定串口设备名" class="headerlink" title="(2) 绑定串口设备名"></a>(2) 绑定串口设备名</h4><ul><li><p>查看当前的串口设备文件名</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ls</span> /dev/ <span class="token operator">|</span><span class="token function">grep</span> ttyUSB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出:</p><p><img src="http://oy4cno18k.bkt.clouddn.com/binding-serialport-device-name-1.png" alt=""></p></li><li><p>查看串口信息，找出串口设备的<code>idVendor</code>和<code>idProduct</code></p><pre class="line-numbers language-bash"><code class="language-bash">$ udevadm info --name /dev/ttyUSB0  --attribute-walk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出:</p><p><img src="http://oy4cno18k.bkt.clouddn.com/binding-serialport-device-name-2.png" alt=""></p></li><li><p>创建文件<code>/etc/udev/rules.d/usb-serialport.rules</code>，并在文件中添加一下内容</p><pre class="line-numbers language-conf"><code class="language-conf">SUBSYSTEM=="tty", ATTRS{idVendor}=="1a86", ATTRS{idProduct}=="7523", SYMLINK+="ch34-serial", MODE:="0777", GROUP:="dialout"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>SYMLINK</strong>即为你为该串口设备指定文件设备名，该设备每次插入时在<code>/dev</code>设备名都为<code>usb-serialport</code>.</p><p><strong>idVendor</strong>和<strong>idProduct</strong>改为你串口对应的vendorid和productid. <strong>MODE</strong>该设备的权限.<strong>GROUP</strong>为该设备所属的组。</p></li><li><p>将配置生效，并查看是否绑定成功</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> udevadm trigger$ <span class="token function">ls</span> -l /dev/ch34-serial<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出：</p><p><img src="http://oy4cno18k.bkt.clouddn.com/binding-serialport-device-name3.png" alt=""></p><p>可以从输出看到<code>ch34-serial</code>只是真实设备名的一个连接，每次重新插入串口设备的时候，会自动创建<code>ch34-serial</code>链接到真正的设备文件名(可能是<code>/dev/ttyUSB0</code>或者<code>/dev/ttyUSB1</code>)。</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/boyixuanbo/article/details/77651109" target="_blank" rel="external">[1]ubuntu下绑定串口</a></p><p><a href="http://www.cnblogs.com/zxouxuewei/p/6140710.html" target="_blank" rel="external">[2]ubuntu绑定串口设备</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-为什么我需要绑定串口设备名&quot;&gt;&lt;a href=&quot;#1-为什么我需要绑定串口设备名&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么我需要绑定串口设备名&quot;&gt;&lt;/a&gt;1. 为什么我需要绑定串口设备名&lt;/h3&gt;&lt;p&gt;　　最近在ubuntu上使用串口
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python黑魔法－元类</title>
    <link href="https://free-free.github.io/2017/10/15/python-black-magic-metaclass/"/>
    <id>https://free-free.github.io/2017/10/15/python-black-magic-metaclass/</id>
    <published>2017-10-15T10:46:31.000Z</published>
    <updated>2017-10-23T08:32:19.219Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>　　python作为一门动态解释型语言，相比于静态编译语言有着相当丰富的语言特性，这些特性是你在静态语言中所无法想象的。以美学的观点来看，这些特性会让你的程序实现的非常优美和简洁，这也正好符合python所遵从的哲学思想。这些特性就像魔法一样，让你为它们感到深深的着迷。而这些魔法特性里还有一部分会让你感觉到比魔法还神奇，这就是传说中的黑魔法，比如，<strong>descriptor</strong> 、<strong>decorator</strong>、<strong>metaclass</strong>等。拥有了这些黑魔法就等于你拥有了Thor的hammer，无敌到爆表。好了，nb吹的差不多了^o^，让我们严肃起来，端庄的迎接我们今天的主角(<em>友情提示：该主角光芒有点强烈，请大家准备好墨镜，保护好自己的眼睛</em>)，ladies and gentlemen welcome our loading actor －<strong>metaclass</strong>。</p><h3 id="2-python-元类"><a href="#2-python-元类" class="headerlink" title="2. python 元类"></a>2. python 元类</h3><p>在python世界中一切皆对象，当谈到一个对象时必然地会涉及到这个对象的类。例如，字符串对象<code>&quot;dede&quot;</code>的类是<code>str</code>，列表对象<code>[1, 2, 4]</code>的类是<code>list</code>，字典对象<code>{&quot;key&quot;:&quot;value&quot;}</code>的类是<code>dict</code>，这些概念对于懂得面向对象的programmer来说都是常识。但是处在一切皆对象的python世界中，你有没有在某一时刻思考过，python中的类是否也是对象？我相信对于大多数pythoner来说，都会给出一个正确的回答。是的，在python的世界里类也是对象。那既然类也是对象，那就必然又会继续思考类的类是什么？其实在你思考类的类是什么时候，可能已经想到这个类的类应该会和普通的类一样，有一系列的method，比如<code>__init__</code>、<code>__call__</code>、<code>__new__</code>等，只是你不知道这个类的类应该叫什么名字。就在你纠结该给类的类取一个什么样的名字的时候，python世界的仲裁者出现了，他们告诉你这个类的类叫做元类。好了，从此天下太平，大家都知道了类的类就做元类。对，元类就是类的类，这个元类并没有什么特殊之处。你现在只需要改变一下你观察类时所在的位置。以前你是站在普通实例对象的位置去观察它的类，现在需要往前走一步站在类的位置去观察它的类－－元类。</p><p>　　现在我们对元类已经有了intuitive的认识，为了彻底搞清楚元类是什么，我们需要到python世界里去实地考察一下。我们先从常见的类下手，去看看这些类的类是什么。就像我们平常查看一个普通实例对象的类一样，需要使用<code>type</code>函数，我们在查看类的类时候，也需要使用<code>type</code>函数，那就让我们开始吧。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>tuple<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当看到上面的输出的时候，有人可能就会产生疑问了。<code>type</code>不是一个函数吗？怎样现在又成一个类了？你以为是你长时间看电脑眼睛花了，你使劲的揉了眼睛之后，再仔细看它还是那样。没毛病，<code>type</code>就是这么的特殊，它是python世界中的万类之<code>元</code>，它是所有类的元类，包括它自己的元类也是它本身(八卦一下，你长这么大见过一个人的父亲就是他自己本身吗？没见过的话，说明你是正常的)，不信的话请看下面的输出。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>type<span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>反正不管怎么说，你的三观肯定是被刷新了的，请直视自己的内心。好吧，既然<code>type</code>这么特殊，那它有什么怪癖呢？怪癖肯定是有的，让我们慢慢来分析一下。</p><ul><li><p>当<code>type</code>作为函数使用时，它的行为会根据传入参数个数的不同而不同。当传入一个参数时，<code>type</code>会返回传入参数的类型，如下面所示。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token string">"hello,python world!"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'list'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1999"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当传入三个参数时，<code>type</code>会返回一个类，参数列表如下所示：</p><ul><li><p><strong>name</strong>  : 返回类的名字，必须是字符串</p></li><li><p><strong>bases</strong>  : 返回类的父类，必须是tuple，可以同时继承自多个父类</p></li><li><p><strong>attrs</strong>  : 返回类的属性，必须是dict，在类初始化的时候会添加到类的<code>__dict__</code>中。</p><p>整个调用原型是这样的<code>type(name, bases, attrs)</code>，具体示例请看下面。</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token string">"ClassOne"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.ClassOne'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> ClassTwo <span class="token operator">=</span> type<span class="token punctuation">(</span><span class="token string">"ClassTwo"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> ClassTwo<span class="token punctuation">.</span>name<span class="token string">'python'</span><span class="token operator">>></span><span class="token operator">></span> ClassTwo<span class="token punctuation">.</span>age<span class="token number">18</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>ClassTwo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#并且ClassTwo的类也是'type'</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看了上面示例之后，肯定有人心里就会有想法了。我们可以使用<code>type</code>来动态的创建类，这确实是一个很好的想法。于是有人真的将这个想法付诸于实践了，请看下面。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_gender</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_gender<span class="token keyword">def</span> <span class="token function">set_gender</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>_gender <span class="token operator">=</span> val<span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_name<span class="token keyword">def</span> <span class="token function">set_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>_name <span class="token operator">=</span> val<span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>_name <span class="token operator">=</span> name    self<span class="token punctuation">.</span>_gender <span class="token operator">=</span> genderStudent <span class="token operator">=</span> type<span class="token punctuation">(</span><span class="token string">"Student"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>object <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"get_gender"</span><span class="token punctuation">:</span> get_gender<span class="token punctuation">,</span> <span class="token string">"set_gender"</span><span class="token punctuation">:</span> \                                    set_gender<span class="token punctuation">,</span> <span class="token string">"get_name"</span><span class="token punctuation">:</span> get_name<span class="token punctuation">,</span> <span class="token string">"set_name"</span><span class="token punctuation">:</span>\                                    set_name<span class="token punctuation">,</span> <span class="token string">"__init__"</span><span class="token punctuation">:</span> init<span class="token punctuation">}</span><span class="token punctuation">)</span>Teacher <span class="token operator">=</span> type<span class="token punctuation">(</span><span class="token string">"Teacher"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"get_gender"</span><span class="token punctuation">:</span> get_gender<span class="token punctuation">,</span> <span class="token string">"set_gender"</span><span class="token punctuation">:</span> \                                     set_gender<span class="token punctuation">,</span> <span class="token string">"get_name"</span><span class="token punctuation">:</span> get_name<span class="token punctuation">,</span> <span class="token string">"set_name"</span><span class="token punctuation">:</span> \                                     set_name<span class="token punctuation">,</span> <span class="token string">"__init__"</span><span class="token punctuation">:</span> init<span class="token punctuation">}</span><span class="token punctuation">)</span>stu1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span>teacher1 <span class="token operator">=</span> Teacher<span class="token punctuation">(</span><span class="token string">"John_Father"</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看了上面的代码，有没有人觉得瘆得慌，反正我是有点。</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.programiz.com/python-programming/methods/built-in/type" target="_blank" rel="external">[1] : Python type()</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h3&gt;&lt;p&gt;　　python作为一门动态解释型语言，相比于静态编译语言有着相当丰富的语言特性，这些特性是你在静态语言中所无法想象的。
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用元类实现Python 单例模式</title>
    <link href="https://free-free.github.io/2017/10/14/implementation-of-singleton-using-metaclass/"/>
    <id>https://free-free.github.io/2017/10/14/implementation-of-singleton-using-metaclass/</id>
    <published>2017-10-14T11:47:18.000Z</published>
    <updated>2017-11-05T11:32:01.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>　　上一篇博客介绍了<a href="/2017/10/11/implementation-of-singleton-using-decrator/">使用装饰器实现python单例模式</a>，这篇博客将介绍使用python的黑魔法－元类(Metaclass)来实现python的单例模式。对于知道元类的pythoner，使用元类实现单例模式应该是很简单的。然而对于不知道python元类的同行来说，理解起来可能要吃力一点，关于元类的介绍请看<a href="/2017/10/15/python-black-magic-metaclass/">这篇文档</a>。在Python中，创建一个对象的流程如下图：</p><p><img src="http://oy4cno18k.bkt.clouddn.com/implementation-of-singleton-using-new-method-01.png" alt=""></p><p>在创建对象时，由元类的<code>__call__</code>method负责调用类的<code>__new__</code>method，<code>__new__</code>method返回对象之后，z再调用<code>__call__</code>method来初始化对象，初始化完成之后，最后由元类的<code>__call__</code>方法返回对象。从上述流程可知，我们只需要在元类的<code>__call__</code>method返回同一对象，即可实现单例模式。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h3><h5 id="2-1-Environment"><a href="#2-1-Environment" class="headerlink" title="2.1 Environment"></a>2.1 Environment</h5><ul><li>ubuntu 16.04</li><li>python3.5</li></ul><h5 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">SingletonMeta</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'_instance'</span> <span class="token operator">not</span> <span class="token keyword">in</span> cls<span class="token punctuation">.</span>__dict__<span class="token punctuation">:</span>      cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__call__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance<span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> metaclass<span class="token operator">=</span>SingletonMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  obj1 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token punctuation">)</span>  obj2 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>obj1 <span class="token operator">==</span> obj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>output:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">140206360941400</span><span class="token number">140206360941400</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">[1]Python单例模式的4种实现方法</a></p><p><a href="https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/" target="_blank" rel="external">[2]Understanding Python metaclasses</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h3&gt;&lt;p&gt;　　上一篇博客介绍了&lt;a href=&quot;/2017/10/11/implementation-of-singleton-usi
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python单例模式:装饰器版</title>
    <link href="https://free-free.github.io/2017/10/11/implementation-of-singleton-using-decrator/"/>
    <id>https://free-free.github.io/2017/10/11/implementation-of-singleton-using-decrator/</id>
    <published>2017-10-11T10:36:47.000Z</published>
    <updated>2017-11-04T12:26:16.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用装饰器实现python单例模式"><a href="#使用装饰器实现python单例模式" class="headerlink" title="使用装饰器实现python单例模式"></a>使用装饰器实现python单例模式</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>不同的编程语言所支持的语言特性不一样，导致实现单例模式的方式也各不相同。python作为一门动态语言，有很大的灵活性，实现的单例模式的方式也不尽相同，在这里总结一下python实现单例模式的方法，以便之后学习。本系列主要简述4种方式实现单例模式:</p><ul><li><strong>装饰器实现单例模式<a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external"><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">1</a></a></strong></li></ul><ul><li><strong>元类实现单例模式</strong></li><li><strong>__new__方法实现单例模式</strong></li><li><strong>共享__dict__实现单例模式</strong></li></ul><p>本节主要简述使用装饰器实现单例模式。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h3><p><strong>plateform</strong>:</p><ul><li>python3.5</li><li>ubuntu16.04</li></ul><p><strong>code</strong>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    instances <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">singleton_wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls <span class="token operator">not</span> <span class="token keyword">in</span> instances<span class="token punctuation">:</span>            instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>    <span class="token keyword">return</span> singleton_wrapper@singleton<span class="token keyword">class</span> <span class="token class-name">Point2D</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>_y <span class="token operator">=</span> y    @property    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_x    @property    <span class="token keyword">def</span> <span class="token function">y</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_y    @x<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> val    @y<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">y</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_y <span class="token operator">=</span> val<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> Point2D<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> Point2D<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>output</strong>:</p><pre class="line-numbers language-bash"><code class="language-bash">139685819815696139685819815696<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由输出可知p1和p2为同一示例，即上述code完美实现了单例模式。</p><h3 id="3-code-辩证分析"><a href="#3-code-辩证分析" class="headerlink" title="3.code 辩证分析"></a>3.code 辩证分析</h3><p>在单例的装饰器函数中，使用词典变量<strong>instances</strong>来储存类的实例，并且<strong>singleton_wrapper</strong>与<strong>instances</strong>形成了闭包环境。当使用<code>类名(*args, **kwargs)</code>实例化时，实际上调用了<code>singleton_wrapper(*args, **kwargs)</code>来进行实例化。通过在<strong>singleton_wrapper</strong>判断<strong>instances</strong>中是否存在类的实例，如果不存在则创建实例，如果存在则直接中从<strong>instances</strong>返回实例。每调用一次<strong>singleton</strong>返回一个闭包，各个闭包之间并没有共享<strong>instances</strong>变量，所以<strong>instances</strong>变量中最多只储存了一个实例，为了验证此将code修改成如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    instances <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">singleton_wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls <span class="token operator">not</span> <span class="token keyword">in</span> instances<span class="token punctuation">:</span>            instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span>        <span class="token keyword">return</span> instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>    <span class="token keyword">return</span> singleton_wrapper@singleton<span class="token keyword">class</span> <span class="token class-name">ClassOne</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">pass</span>@singleton<span class="token keyword">class</span> <span class="token class-name">ClassTwo</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    obj1 <span class="token operator">=</span> ClassOne<span class="token punctuation">(</span><span class="token punctuation">)</span>    obj2 <span class="token operator">=</span> ClassTwo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>output</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token operator">&lt;</span>class <span class="token string">'__main__.ClassOne'</span><span class="token operator">></span>: <span class="token operator">&lt;</span>__main__.ClassOne object at 0x7f276523a828<span class="token operator">></span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>class <span class="token string">'__main__.ClassTwo'</span><span class="token operator">></span>: <span class="token operator">&lt;</span>__main__.ClassTwo object at 0x7f276523a940<span class="token operator">></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从以上输出可以看出，各个类闭包之间没有共享<strong>instances</strong>字典变量，这时小黄鸭问那为什么还需要一个字典变量来保存类的实例，何不直接使用一个普通的变量来保存类的实例呢?说的太多不如直接上code验证一下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    instance <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">singleton_wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> instance<span class="token punctuation">:</span>            instance <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> instance    <span class="token keyword">return</span> singleton_wrapper@singleton<span class="token keyword">class</span> <span class="token class-name">ClassOne</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    obj1 <span class="token operator">=</span> ClassOne<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>output</strong></p><pre class="line-numbers language-bash"><code class="language-bash">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"test.py"</span>, line 21, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    obj1 <span class="token operator">=</span> ClassOne<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"test.py"</span>, line 6, <span class="token keyword">in</span> singleton_wrapper    <span class="token keyword">if</span> not instance:UnboundLocalError: local variable <span class="token string">'instance'</span> referenced before assignment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如上，在<strong>singleton_wrapper</strong>中访问<strong>instance</strong>变量时，遇到<em>UnboundLocalError</em>错误。在这里之所以抛出<em>UnboundLocalError</em>，和python的词法作用域有关。<strong>python内部函数只能访问全局变量不可对全局变量进行赋值修改；当在内部函数中修改同名的全局变量时，则python会认为它是一个局部变量；在内部函数中修改同名全局变量之前读取变量名时，会引发UnboundLocalError错误<a href="http://blog.csdn.net/my2010sam/article/details/17735159" target="_blank" rel="external"><a href="http://blog.csdn.net/my2010sam/article/details/17735159" target="_blank" rel="external">2</a></a>。</strong>说到这里结果好像已经很明显了，既然不能在内部函数中赋值修改一个全局变量，那我们只需要在修改的变量之前，加一个<strong>global</strong>关键字就能解决了。好吧，还是需要用code来验证一下</p><p><strong>note！！！：这里的赋值修改不包括list 或者dict的添加，删除等操作；这也证明我们一开始使用dict来存类实例，巧妙避过UnboundLocalError的问题，god, are you kidding me?</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    instance <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">singleton_wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> instance        <span class="token keyword">if</span> <span class="token operator">not</span> instance<span class="token punctuation">:</span>            instance <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> instance    <span class="token keyword">return</span> singleton_wrapper@singleton<span class="token keyword">class</span> <span class="token class-name">ClassOne</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    obj1 <span class="token operator">=</span> ClassOne<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>output</strong></p><pre class="line-numbers language-bash"><code class="language-bash">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"test.py"</span>, line 30, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    obj1 <span class="token operator">=</span> ClassOne<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"test.py"</span>, line 7, <span class="token keyword">in</span> singleton_wrapper    <span class="token keyword">if</span> not instance:NameError: name <span class="token string">'instance'</span> is not defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>what?又出错了，这次遇到了<em>NameError</em>，简直像是唐僧取经一难又一难。好吧，请不要放弃，让我们继续分析为什么会出现<em>NameError</em>。我们在<strong>singleton_wrapper</strong>中添加<strong>global</strong>关键字时就意味着直接去全局作用域搜索<strong>instance</strong>变量，但在全局作用域中并没有<strong>instance</strong>的存在，所以在这里出现<em>NameError</em>是再正常不过的。这时让我们重新回到上一步，看一下python的词法作用域的规则:</p><blockquote><p>python内部函数只能访问全局变量不可对全局变量进行赋值修改；</p><p>当在内部函数中修改同名的全局变量时，则python会认为它是一个局部变量；</p><p>在内部函数中修改同名全局变量之前读取变量名时，会引发UnboundLocalError错误。</p></blockquote><p>仔细研读和思考后，我们发现，<strong>instance</strong>对于<strong>singleton_wrapper</strong>并不是全局变量，而是extenal 变量。好吧我们以偏概全了，太大意了。事已到此好像已经没有思路，这个时候该是Google大神显神通的时候，在Google大神的帮助下，我们终于找到了一点思路,让我们穿到墙外去看一看这两篇文章吧<a href="https://eli.thegreenplace.net/2011/05/15/understanding-unboundlocalerror-in-python" target="_blank" rel="external"><a href="https://eli.thegreenplace.net/2011/05/15/understanding-unboundlocalerror-in-python" target="_blank" rel="external">3</a></a><a href="https://stackoverflow.com/questions/141642/what-limitations-have-closures-in-python-compared-to-language-x-closures" target="_blank" rel="external"><a href="https://stackoverflow.com/questions/141642/what-limitations-have-closures-in-python-compared-to-language-x-closures" target="_blank" rel="external">4</a></a>。这两篇文章指出：</p><blockquote><p>在closures中不能对external进行赋值修改;</p><p>当在closures中修改同名external变量之前读取变量名，会引发UnboundLocalError错误。</p></blockquote><p>现在可谓大彻大悟了，终于搞清楚了出现<em>UnboundLocalError</em>的真正原因了。那么问题来了，有没有办法可以赶跑这个该死的<em>UnboundLocalError</em>呢?办法肯定是有的，我们娓娓道来</p><p><strong>python2.x</strong>:</p><p>使用<strong>dict</strong>或者<strong>list</strong>是最明智的选择，也是唯一的办法。</p><p><strong>python3.x:</strong></p><ol><li><p>使用<strong>dict</strong>或者<strong>list</strong>储存类实例</p></li><li><p>在closures中访问修改external 变量之前，使用<strong>nonlocal</strong>对external变量进行声明，<strong>nonlocal</strong>关键字是python3.0之后加入的新关键字,说明如下:</p><blockquote><p>The <code>nonlocal</code> statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals. This is important because the default behavior for binding is to search the local namespace first. The statement allows encapsulated code to rebind variables outside of the local scope besides the global (module) scope.</p></blockquote></li></ol><p>经过我们不断思考与实践，结局还不赖。让我们把完整的code写下来吧</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">singleton1</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    instances <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">singleton_wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls <span class="token operator">not</span> <span class="token keyword">in</span> instances<span class="token punctuation">:</span>            instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>    <span class="token keyword">return</span> singleton_wrapper<span class="token keyword">def</span> <span class="token function">singleton2</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    instance <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">singleton_wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        nonlocal instance        <span class="token keyword">if</span> <span class="token operator">not</span> instance<span class="token punctuation">:</span>            instance <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> instance    <span class="token keyword">return</span> singleton_wrapper@singleton1<span class="token keyword">class</span> <span class="token class-name">Point2D</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>_y <span class="token operator">=</span> y    @property    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_x    @property    <span class="token keyword">def</span> <span class="token function">y</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_y    @x<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> val    @y<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">y</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_y <span class="token operator">=</span> val@singleton2<span class="token keyword">class</span> <span class="token class-name">Point3D</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>_y <span class="token operator">=</span> y        self<span class="token punctuation">.</span>_z <span class="token operator">=</span> z<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> Point2D<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> Point2D<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span>    p3 <span class="token operator">=</span> Point3D<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    p4 <span class="token operator">=</span> Point3D<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>output</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">140322002741008</span><span class="token number">140322002741008</span><span class="token number">140322002741176</span><span class="token number">140322002741176</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">[1]  Python单例模式的4种实现方法</a></p><p><a href="http://blog.csdn.net/my2010sam/article/details/17735159" target="_blank" rel="external">[2]  全局变量报错-UnboundLocalError: local variable ‘l’ referenced before assignment</a></p><p><a href="https://eli.thegreenplace.net/2011/05/15/understanding-unboundlocalerror-in-python" target="_blank" rel="external">[3]  Understanding UnboundLocalError in Python</a></p><p><a href="https://stackoverflow.com/questions/141642/what-limitations-have-closures-in-python-compared-to-language-x-closures" target="_blank" rel="external">[4]  What limitations have closures in Python compared to language X closures</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用装饰器实现python单例模式&quot;&gt;&lt;a href=&quot;#使用装饰器实现python单例模式&quot; class=&quot;headerlink&quot; title=&quot;使用装饰器实现python单例模式&quot;&gt;&lt;/a&gt;使用装饰器实现python单例模式&lt;/h2&gt;&lt;h3 id=&quot;1-概述&quot;
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>lua5.2获取函数可变参数</title>
    <link href="https://free-free.github.io/2017/10/11/access-variable-parameter-in-lua5-2/"/>
    <id>https://free-free.github.io/2017/10/11/access-variable-parameter-in-lua5-2/</id>
    <published>2017-10-11T10:22:41.000Z</published>
    <updated>2017-11-04T12:26:03.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lua-gt-5-2-可变参数获取"><a href="#Lua-gt-5-2-可变参数获取" class="headerlink" title="Lua(&gt;=5.2) 可变参数获取"></a>Lua(&gt;=5.2) 可变参数获取</h1><p>在Lua5.2之前，函数的可变参数在函数调用的时候自动获取并放在<strong>arg</strong>变量(table)中，要访问每一可变参数只需要通过<strong>arg[0]</strong>, <strong>arg[1]</strong>,…..<strong>arg[m]</strong>来获取，并且arg中还有一个域<strong>n</strong>负责记录可变参数的个数，示例代码如下所示：</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">myadd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span>  <span class="token keyword">local</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b  <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>arg<span class="token punctuation">.</span>n <span class="token keyword">do</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> arg<span class="token punctuation">[</span>n<span class="token punctuation">]</span>  <span class="token keyword">end</span>  <span class="token keyword">return</span> sum<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Lua5.2之后，需要自己手动获取可变参数，也没有了记录可变参数个数的域<strong>n</strong>，但可以通过长度运算符<strong>#</strong>获取参数个数，我想这也是为什么会去掉域<strong>n</strong>的原因，示例代码如下所示：</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">myadd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span>  <span class="token keyword">local</span> arg <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span>  <span class="token keyword">local</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b  <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>arg <span class="token keyword">do</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> arg<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token keyword">end</span>  <span class="token keyword">return</span> sum<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lua-gt-5-2-可变参数获取&quot;&gt;&lt;a href=&quot;#Lua-gt-5-2-可变参数获取&quot; class=&quot;headerlink&quot; title=&quot;Lua(&amp;gt;=5.2) 可变参数获取&quot;&gt;&lt;/a&gt;Lua(&amp;gt;=5.2) 可变参数获取&lt;/h1&gt;&lt;p&gt;在Lua
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="lua" scheme="https://free-free.github.io/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>Say_hello</title>
    <link href="https://free-free.github.io/2017/09/15/say-hello/"/>
    <id>https://free-free.github.io/2017/09/15/say-hello/</id>
    <published>2017-09-15T10:41:29.000Z</published>
    <updated>2017-11-04T12:27:34.306Z</updated>
    
    <content type="html"><![CDATA[<p>say hello to me</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;say hello to me&lt;/p&gt;

      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="生活" scheme="https://free-free.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Wechat Official Account&#39;s Token Generation and Verification Using Python</title>
    <link href="https://free-free.github.io/2016/08/09/token-generation-and-verification-using-python/"/>
    <id>https://free-free.github.io/2016/08/09/token-generation-and-verification-using-python/</id>
    <published>2016-08-09T07:24:22.000Z</published>
    <updated>2018-03-04T10:35:12.769Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><blockquote><p>最近在做微信公众号开发在进行网页授权时，微信需要用户自己在授权url中带上一个类似token的<strong>state</strong>的参数，以防止跨站攻击。<br>在经过再三思考之后，自己试着实现一个产生token和验证token的方案。接下就把code贴出来。希望读者指导一下。</p></blockquote><h3 id="2-产生token"><a href="#2-产生token" class="headerlink" title="2.产生token"></a>2.产生token</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h4><blockquote><p>通过hmac sha1 算法产生用户给定的key和token的最大过期时间戳的一个消息摘要，<br>将这个消息摘要和最大过期时间戳通过”:”拼接起来，再进行base64编码，生成最终的token</p></blockquote><h4 id="实现"><a href="#实现" class="headerlink" title="实现:"></a>实现:</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> base64<span class="token keyword">import</span> hmac<span class="token keyword">def</span> <span class="token function">generate_token</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> expire<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token triple-quoted-string string">'''        @Args:            key: str (用户给定的key，需要用户保存以便之后验证token,每次产生token时的key 都可以是同一个key)            expire: int(最大有效时间，单位为s)        @Return:            state: str    '''</span>    ts_str <span class="token operator">=</span> str<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expire<span class="token punctuation">)</span>    ts_byte <span class="token operator">=</span> ts_str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    sha1_tshexstr  <span class="token operator">=</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ts_byte<span class="token punctuation">,</span><span class="token string">'sha1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>     token <span class="token operator">=</span> ts_str<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>sha1_tshexstr    b64_token <span class="token operator">=</span> base64<span class="token punctuation">.</span>urlsafe_b64encode<span class="token punctuation">(</span>token<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> b64_token<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-验证token"><a href="#3-验证token" class="headerlink" title="3.验证token"></a>3.验证token</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理:"></a>原理:</h4><blockquote><p>将token进行base64解码,通过token得到token最大过期时间戳和消息摘要。判断token是否过期。<br>如没过期才将 从token中的取得最大过期时间戳进行hmac sha1 算法运算(<strong>注意这里的key要与产生token的key要相同</strong>)，<br>最后将产生的摘要与通过token取得消息摘要进行对比， 如果两个摘要相等，则token有效，否则token无效 。</p></blockquote><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> base64<span class="token keyword">import</span> hmac<span class="token keyword">def</span> <span class="token function">certify_token</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token triple-quoted-string string">'''        @Args:            key: str            token: str        @Returns:            boolean    '''</span>    token_str <span class="token operator">=</span> base64<span class="token punctuation">.</span>urlsafe_b64decode<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    token_list <span class="token operator">=</span> token_str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>token_list<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    ts_str <span class="token operator">=</span> token_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> float<span class="token punctuation">(</span>ts_str<span class="token punctuation">)</span> <span class="token operator">&lt;</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># token expired</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    known_sha1_tsstr <span class="token operator">=</span> token_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    sha1 <span class="token operator">=</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ts_str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'sha1'</span><span class="token punctuation">)</span>    calc_sha1_tsstr <span class="token operator">=</span> sha1<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> calc_sha1_tsstr <span class="token operator">!=</span> known_sha1_tsstr<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># token certification failed</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>     <span class="token comment" spellcheck="true"># token certification success</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-用法"><a href="#4-用法" class="headerlink" title="4.用法"></a>4.用法</h3><pre class="line-numbers language-python"><code class="language-python">key  <span class="token operator">=</span> <span class="token string">"JD98Dskw=23njQndW9D"</span><span class="token comment" spellcheck="true"># 一小时后过期</span>token <span class="token operator">=</span> generate_token<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>certify_token<span class="token punctuation">(</span>key<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Note"><a href="#5-Note" class="headerlink" title="5.Note!!!"></a>5.Note!!!</h3><blockquote><p>本代码只能在python3.x 中运行，</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;最近在做微信公众号开发在进行网页授权时，微信需要用户自己在授权url中带上一个类似token的&lt;s
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
      <category term="wechat-dev" scheme="https://free-free.github.io/tags/wechat-dev/"/>
    
  </entry>
  
  <entry>
    <title>Build Your Own Git Remote Repository on Centos6.5</title>
    <link href="https://free-free.github.io/2015/11/15/build-your-own-git-remote-repository-on-Centos6-5/"/>
    <id>https://free-free.github.io/2015/11/15/build-your-own-git-remote-repository-on-Centos6-5/</id>
    <published>2015-11-15T08:49:06.000Z</published>
    <updated>2018-03-04T10:40:58.711Z</updated>
    
    <content type="html"><![CDATA[<p>####远程仓库搭建</p><h5 id="step1-安装git"><a href="#step1-安装git" class="headerlink" title="step1:安装git"></a>step1:安装git</h5><pre class="line-numbers language-bash"><code class="language-bash">$ yum -y <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>#####step2:创建用户git,用来运行git服务</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">useradd</span> <span class="token function">git</span> $ <span class="token function">passwd</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="step3-创建登录用户证书"><a href="#step3-创建登录用户证书" class="headerlink" title="step3:创建登录用户证书"></a>step3:创建登录用户证书</h5><p>收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个 </p><h5 id="step4-初始化git仓库"><a href="#step4-初始化git仓库" class="headerlink" title="step4:初始化git仓库"></a>step4:初始化git仓库</h5><ol><li>创建目录/git,在/git目下再创建一个.git结尾的目录,作为一仓库,这里创建一个/git/test.git,并且进入/git目录;</li><li>初始化仓库git init –bare test.git Git就会创建一个裸仓库，裸仓库没有工作区，服务器上的Git仓库纯粹是为了共享 所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾;</li><li>将仓库的owner改为git  chown -R git:git test.git;</li><li>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成,找到git用户的那一行将git:x:500:500::/home/git:/bin/bash改为git:x:500:500::/home/git:/usr/bin/git-shell .git-shell每次一登录就自动退出.</li></ol><h5 id="step5-自此整个git远程仓库就搭建完成-就可以像使用github那样使用搭建好的远程仓库与你的team功能开发了"><a href="#step5-自此整个git远程仓库就搭建完成-就可以像使用github那样使用搭建好的远程仓库与你的team功能开发了" class="headerlink" title="step5:自此整个git远程仓库就搭建完成,就可以像使用github那样使用搭建好的远程仓库与你的team功能开发了."></a>step5:自此整个git远程仓库就搭建完成,就可以像使用github那样使用搭建好的远程仓库与你的team功能开发了.</h5><h4 id="本地与搭建好的仓库交互"><a href="#本地与搭建好的仓库交互" class="headerlink" title="本地与搭建好的仓库交互"></a>本地与搭建好的仓库交互</h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> remote add origin git@192.168.0.01:/git/test.git   <span class="token comment" spellcheck="true">#这里的ip是你主机的ip</span>$ <span class="token function">git</span> clone git@192.168.0.1:/git/test.git  <span class="token comment" spellcheck="true">#将远程仓库克隆到本地的仓库</span>$ <span class="token function">git</span> push origin master   <span class="token comment" spellcheck="true">#推送到远程仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####远程仓库搭建&lt;/p&gt;
&lt;h5 id=&quot;step1-安装git&quot;&gt;&lt;a href=&quot;#step1-安装git&quot; class=&quot;headerlink&quot; title=&quot;step1:安装git&quot;&gt;&lt;/a&gt;step1:安装git&lt;/h5&gt;&lt;pre class=&quot;line-nu
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
      <category term="git" scheme="https://free-free.github.io/tags/git/"/>
    
  </entry>
  
</feed>
