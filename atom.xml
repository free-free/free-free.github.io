<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Infinite.ft的博客</title>
  <icon>https://www.gravatar.com/avatar/9b6d3cb75e6e36a069f9079ea692bf81</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://free-free.github.io/"/>
  <updated>2017-12-31T17:30:29.963Z</updated>
  <id>https://free-free.github.io/</id>
  
  <author>
    <name>infinite.ft</name>
    <email>infinite.ft@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Convert State Space Representation to Transfer Function</title>
    <link href="https://free-free.github.io/2017/12/31/convert-state-space-representation-to-transfer-function/"/>
    <id>https://free-free.github.io/2017/12/31/convert-state-space-representation-to-transfer-function/</id>
    <published>2017-12-30T23:24:47.000Z</published>
    <updated>2017-12-31T17:30:29.963Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML"></script><p>In this semester early, I has enrolled my first degree course <em>Linear System Theory</em> . The focus of this course is the state space representation  and illustrate the concept about observable and controllable of a linear system. As a student of Control science and Engineering, i know how importance of it to my career in latter life. Everything must be practical, this course is also not a exception. here, as a practice , <strong>i will give a implementation of converting state space to transfer function representation.</strong></p><p>###Mathematical representation</p><p>Given the transfer function of a linear time invariant (LTI) system,as shown below.</p><p>$$G(s) = \frac{b_{m}s^m + b_{m-1}s^{m-1}+ \dotsb + b_{1}s + b_{0}}{s^n + \alpha_{n-1}s^{n-1} + \alpha_{n-2}s^{n-2} + \dotsb + \alpha_{1}s+\alpha_{0}}$$ </p><p>It’s state space representation as follows.</p><p>$$\begin{cases}\dot{x} = Ax + Bu \\ y = Cx + Du\end{cases}$$</p><p> In above equation,$x$ is the state vector of system, $u$ is the input and $y$ is the output. $A$ called system matrix, it’s dimension is $n\times n$ .B called input matrix, it’s dimension is $n \times p$. C called output matrix , it’s dimension is $q \times n$. D called input &amp; output relational matrix, it’s dimension is $q \times p$.</p><p>According to system’s transfer function , it’s <em>kalman I form</em>  , <em>kalman II form</em> and <em>standard observable  form</em> can be easily provided. Conversely,  given the state space representation , the transfer function could be given in the following formula.</p><p>$$G(s) = C(sI - A)^{-1}B + D$$</p><p>Here the calculation of $(sI - A)^{-1}$ is cumbersome,  especially for student who has no assistance with computer.The computational  method of $(sI - A)^{-1}$ can be given in a more comprehensive way, as shown below.</p><p>$$(sI - A)^{-1} = \frac{adj(sI - A)}{det(sI - A)}$$</p><p>$$adj(sI - A) = R_{n-1}s^{n-1} +R_{n-2}s^{n-2} + \dotsb + R_1s + R_0$$</p><p>$$det(sI - A) = s^n + a_{n-1}s^{n-1} + a_{n-2}s^{n-2}+ \dotsb + a_1s + a_0$$</p><p>So here i have already given  the method of computation of $(sI - A)^{-1}$, the next question is how to calculate $R<em>{n-1}, R</em>{n-2}, \dots, R<em>0$ and $a</em>{n-1}, a<em>{n-1}, \dots, a</em>{0}$. The relationship of them is brief and clear.</p><p>$$\begin{cases} R_{n-1} =  I,a_{n-1} = - \frac{tr(R_{n-1}A)}{1} \\ R_{n-2} = R_{n-1}A + a_{n-1}I, a_{n-2}= -\frac{tr(R_{n-2}A)}{2!} \\ \cdots \\  \cdots \\ R_{1} = R_{2}A + a_{2}I, a_{1}= -\frac{tr(R_{1}A)}{(n-1)!} \\ R_{0} = R_{1}A + a_{1}I, a_{0}= -\frac{tr(R_{0}A)}{n!}\end{cases}$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt;

&lt;p&gt;In this semester early, 
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="matlab" scheme="https://free-free.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>Python Enhancement Proposals(pep)</title>
    <link href="https://free-free.github.io/2017/12/22/python-pep/"/>
    <id>https://free-free.github.io/2017/12/22/python-pep/</id>
    <published>2017-12-22T12:59:28.000Z</published>
    <updated>2017-12-25T08:17:10.429Z</updated>
    
    <content type="html"><![CDATA[<p>This  article is a list notes about <code>Python Enhancement Proposal</code>, aka <code>PEP</code>, which contains proposals those should be well known to every python developer.  So, What’s means of <code>PEP</code>? Here, I don’t want to explain it too much to you, I cite a  brief definition about it  from Wikipedia, as follows:</p><blockquote><p>Python’s development is conducted largely through the <em>Python Enhancement Proposal</em> (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues and documenting Python design decisions. Outstanding PEPs are reviewed and commented on by the Python community and Guido Van Rossum, Python’s <a href="https://en.wikipedia.org/wiki/Benevolent_Dictator_For_Life" target="_blank" rel="external">Benevolent Dictator For Life</a></p><p>​                                                                    — from Wikipedia</p></blockquote><h5 id="PEP-0"><a href="#PEP-0" class="headerlink" title="PEP 0"></a><strong>PEP 0</strong></h5><p>This PEP maintains  the index of all Python Enhancement Proposals, aka PEPs. Each PEP number is assigned by the PEP author, once assigned is never changed.</p><p><a href="https://www.python.org/dev/peps/" target="_blank" rel="external">PEP contents</a></p><h5 id="PEP-1"><a href="#PEP-1" class="headerlink" title="PEP 1"></a><strong>PEP 1</strong></h5><p>This PEP introduces the concept of PEPs and detailly explains the workflow of PEPs.</p><p><a href="https://www.python.org/dev/peps/pep-0001/" target="_blank" rel="external">PEP contents</a></p><h5 id="PEP-8"><a href="#PEP-8" class="headerlink" title="PEP 8"></a><strong>PEP 8</strong></h5><p>This PEP is deadly necessary to python developer who want to write human-readable and concise python code. I strongly recommend you to read it and perform it if want to go further more on python.</p><p><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">PEP contents</a></p><p>This article will be updated at all times.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This  article is a list notes about &lt;code&gt;Python Enhancement Proposal&lt;/code&gt;, aka &lt;code&gt;PEP&lt;/code&gt;, which contains proposals those should
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Find Out First None-Zero Element&#39;s Index of Each Row in Matlab Matrices</title>
    <link href="https://free-free.github.io/2017/12/15/find-first-nonezero-element-index-of-each-row-in-matlab-matrix/"/>
    <id>https://free-free.github.io/2017/12/15/find-first-nonezero-element-index-of-each-row-in-matlab-matrix/</id>
    <published>2017-12-15T12:54:08.000Z</published>
    <updated>2017-12-21T15:07:35.292Z</updated>
    
    <content type="html"><![CDATA[<p>How to find out the none-zero element index of each row in matlab matrix without using for loop?  Honestly, this fucking problem frustrates me  all day, I have no spark about this, fortunately, i get a roughly problem-solving  solution with the help of enthusiastic people. Ok ,lets get down to code.</p><p>Here we assume $A$ is a $m\times n$ matrix, the problem is find out the index of first none-zero element of each row in $A$. </p><h4 id="The-first-try"><a href="#The-first-try" class="headerlink" title="The first try"></a>The first try</h4><p><strong>code</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">idx = sum(A==<span class="number">0</span>, <span class="number">2</span>) + <span class="number">1</span></div></pre></td></tr></table></figure><p>The above code seems to be working, the truths is that it just  works fine in some special matrices, like</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">A = </div><div class="line"></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>    <span class="number">12</span>    <span class="number">11</span></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></div><div class="line">     <span class="number">0</span>    <span class="number">32</span>    <span class="number">21</span>   <span class="number">343</span>    <span class="number">54</span>    <span class="number">43</span></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></div><div class="line">     </div><div class="line">idx = sum(A==<span class="number">0</span>, <span class="number">2</span>) + <span class="number">1</span></div><div class="line"><span class="comment">% The output follows</span></div><div class="line"><span class="built_in">ans</span> =</div><div class="line"></div><div class="line">     <span class="number">5</span></div><div class="line">     <span class="number">4</span></div><div class="line">     <span class="number">2</span></div><div class="line">     <span class="number">6</span></div><div class="line"><span class="comment">% see that,it is corret</span></div></pre></td></tr></table></figure><p>but except other general matrices,like</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">A =</div><div class="line"></div><div class="line">     <span class="number">0</span>     <span class="number">2</span>     <span class="number">0</span>     <span class="number">0</span>    <span class="number">12</span>    <span class="number">11</span></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></div><div class="line">     <span class="number">0</span>    <span class="number">32</span>    <span class="number">21</span>   <span class="number">343</span>    <span class="number">54</span>    <span class="number">43</span></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></div><div class="line">idx = sum(A==<span class="number">0</span>, <span class="number">2</span>) + <span class="number">1</span></div><div class="line"><span class="comment">% The output follows</span></div><div class="line"><span class="built_in">ans</span> =</div><div class="line"></div><div class="line">     <span class="number">4</span></div><div class="line">     <span class="number">4</span></div><div class="line">     <span class="number">2</span></div><div class="line">     <span class="number">6</span></div></pre></td></tr></table></figure><p>The first try  is failed, but it doesn’t mean i was defeated.So i start my second problem-solving try.</p><h4 id="The-second-try"><a href="#The-second-try" class="headerlink" title="The second try"></a>The second try</h4><p><strong>code:</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">idx = sum(cumsum(A~=<span class="number">0</span>, <span class="number">2</span>)==<span class="number">0</span>, <span class="number">2</span>) + <span class="number">1</span>;</div></pre></td></tr></table></figure><p>It seems i find the way to correct answer this time, but ….. it’s not working in some special case, likes the following matrix </p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">A =</div><div class="line"></div><div class="line">     <span class="number">0</span>     <span class="number">2</span>     <span class="number">0</span>     <span class="number">0</span>    <span class="number">12</span>    <span class="number">11</span>     <span class="number">0</span></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">0</span></div><div class="line">     <span class="number">0</span>    <span class="number">32</span>    <span class="number">21</span>   <span class="number">343</span>    <span class="number">54</span>    <span class="number">43</span>     <span class="number">0</span></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></div><div class="line"></div><div class="line">idx = sum(cumsum(A~=<span class="number">0</span>, <span class="number">2</span>)==<span class="number">0</span>, <span class="number">2</span>) + <span class="number">1</span></div><div class="line"><span class="comment">% The last element of output seems to be not working, it's value exceeds the maximum index of A's column.</span></div><div class="line"><span class="built_in">ans</span> =</div><div class="line"></div><div class="line">     <span class="number">2</span></div><div class="line">     <span class="number">4</span></div><div class="line">     <span class="number">2</span></div><div class="line">     <span class="number">8</span></div></pre></td></tr></table></figure><p>OK, this time we get more closer to the correct answer.The next question is we  how to deal with the  index-exceeding problem.Lets go further to launch our  third try</p><h4 id="The-third-try"><a href="#The-third-try" class="headerlink" title="The third try"></a>The third try</h4><p><strong>code:</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">idx = sum(cumsum(A~=<span class="number">0</span>, <span class="number">2</span>)==<span class="number">0</span>, <span class="number">2</span>) + <span class="number">1</span>;</div><div class="line">idx(idx &gt; <span class="built_in">size</span>(A, <span class="number">2</span>)) = <span class="built_in">nan</span>;</div></pre></td></tr></table></figure><p>In the above code, we directly assign the  index which exceed the maximum index number to <code>nan</code>.               I can bet this time , it must work fine in all  cases. What? You don’t believe what i have said. Ok, i don’t want to persuade you. The fact is alway fact, you can run the code on your machine.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;How to find out the none-zero element index of each row in matlab matrix without using for loop?  Honestly, this fucking problem frustrat
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="matlab" scheme="https://free-free.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>A-Brief-Introduction-of-Pytorch</title>
    <link href="https://free-free.github.io/2017/11/23/a-brief-introduction-of-pytorch/"/>
    <id>https://free-free.github.io/2017/11/23/a-brief-introduction-of-pytorch/</id>
    <published>2017-11-23T14:09:53.000Z</published>
    <updated>2017-11-23T14:09:53.266Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A Brief Introduction of Several Useful Convolutional Networks</title>
    <link href="https://free-free.github.io/2017/11/08/brief-introduction-of-several-convolution-networks/"/>
    <id>https://free-free.github.io/2017/11/08/brief-introduction-of-several-convolution-networks/</id>
    <published>2017-11-08T12:09:00.000Z</published>
    <updated>2017-11-08T13:02:43.239Z</updated>
    
    <content type="html"><![CDATA[<p>This  article is the course handout for Stanford University CS231n’s. it mainly contains a brief introduction of several common Convolutional Networks.</p><ul><li><p><strong>LeNet</strong></p><p>The first successful applications of Convolutional Networks were developed by Yann LeCun in 1990’s.Of these, the best known is the LeNet architecture that was used in read zip codes, digits,etc.</p><p><em>paper</em> : <a href="http://yann.lecun.com/exdb/publis/pdf/lecun-98.pdf" target="_blank" rel="external"><em>donwload</em></a></p></li><li><p><strong>AlexNet</strong></p><p>The first work that popularized Convolutional Networks in Computer Vision was the AlexNet,developed by Alex Krizhevsky,llya Sutskever and Geoff Hinton. The AlexNet was submitted to the  <a href="http://www.image-net.org/challenges/LSVRC/2014/" target="_blank" rel="external">ImageNet ILSVRC challenge</a> in 2012 and significantly outperformed  the second runner-up(top 5 error of 16% compared to runner-up with 26% error). The Network had a very similar architecture to LeNet, but was deeper,bigger,and featured Convolutional Layers stacked on top of each other(previously it was common to only have single CONV layer always immediately followed by a POOL layer)</p><p><em>paper</em> : <a href="http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks" target="_blank" rel="external"><em>download</em></a></p></li><li><p><strong>ZF Net</strong></p><p>The ILSVRC 2013 winner was a Convolutional Network from Matthew Zeiler and Rob Fergus. It became known as the ZFNet(short for Zerler &amp; Fergus Net). It was an improvement on AlexNet by tweaking the architecture hyperparameters, in particular by expanding the size of the middle convolutional layers and making the stride and filter size on the first layer smaller</p><p><em>paper</em> : <a href="http://arxiv.org/abs/1311.2901" target="_blank" rel="external"><em>download</em></a></p></li><li><p><strong>GoogLeNet</strong></p><p>The ILSVRC 2014 winner was a Convolutional Network from Szegedy et al. from Google. Its main contribution was the development of an <em>Inception Module</em> that dramatically reduced the number of parameters in the network(4M, compared to AlexNet with 60M). Additionally, this paper uses Average Pooling instead of Fully Connected layers at the top of the ConvNet, eliminating a large amount of parameters that do not seem to matter much. There are also several follow up versions to the GoogLeNet,most recently <a href="http://arxiv.org/abs/1602.07261" target="_blank" rel="external">Inception-v4</a>.</p><p><em>paper</em> : <a href="http://arxiv.org/abs/1409.4842" target="_blank" rel="external"><em>download</em></a></p></li><li><p><strong>VGGNet</strong></p><p>The runner-up in ILSVRC 2014 was the network from Karen Simonyan and Andrew Zisserman that became known as the VGGNet. Its main contribution was in showing that the depth of the network is a critical component for good performance. Their final best network contains 16 CONV/FC layers and, appealingly , features an extremely homogeneous architecture that only performs 3x3 convolutions and 2x2 pooling from the beginning to the end .Their <a href="http://www.robots.ox.ac.uk/~vgg/research/very_deep/" target="_blank" rel="external">pretrained model</a> is available for plug and play use in Caffe. A downside of the VGGNet is that it is more expensive to evaluate and uses a lot more memory and parameters(140M). Most of these parameters are  in the first fully connected layer, and it was since found that these FC layers can be removed with no performance downgrade , significantly reducing the number of necessary parameters</p><p><em>paper</em> : <a href="http://www.robots.ox.ac.uk/~vgg/research/very_deep/" target="_blank" rel="external"><em>donwload</em></a></p></li><li><p><strong>ResNet</strong></p><p>Residual Network developed by Kaiming  He et al. was the winner of ILSVRC 2015. It features special skip connections and a heavy use of batch normalization. The architecture is also missing fully connected layers at the end of the network. The reader is also referred to Kaiming’s presentations(<a href="https://www.youtube.com/watch?v=1PGLj-uKT1w" target="_blank" rel="external">video</a>, <a href="http://research.microsoft.com/en-us/um/people/kahe/ilsvrc15/ilsvrc2015_deep_residual_learning_kaiminghe.pdf" target="_blank" rel="external">slides</a>), and some <a href="https://github.com/gcr/torch-residual-networks" target="_blank" rel="external">recent experiments</a> that reproduce these networks in Torch. ResNets are currently by far state of the art Convolutional Neural Network models and are the default choice for using ConvNets in practice(as of May 10, 2016). In particular, also see more recent developments that tweak the original architecture from <a href="https://arxiv.org/abs/1603.05027" target="_blank" rel="external">Kaiming He et al. Identity Mappings in Deep Residual Networks</a> (published  Marc 2016).</p><p><em>paper</em> : <a href="http://arxiv.org/abs/1512.03385" target="_blank" rel="external"><em>donwload</em></a></p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://cs231n.github.io/convolutional-networks/" target="_blank" rel="external">[1]Convolutional Neural Networks (CNNs / ConvNets)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This  article is the course handout for Stanford University CS231n’s. it mainly contains a brief introduction of several common Convoluti
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="machine-learning" scheme="https://free-free.github.io/tags/machine-learning/"/>
    
      <category term="convolution-network" scheme="https://free-free.github.io/tags/convolution-network/"/>
    
  </entry>
  
  <entry>
    <title>关于学习新技术的方法和反思</title>
    <link href="https://free-free.github.io/2017/11/02/my-mind-pattern01/"/>
    <id>https://free-free.github.io/2017/11/02/my-mind-pattern01/</id>
    <published>2017-11-02T12:49:23.000Z</published>
    <updated>2017-11-04T12:36:15.030Z</updated>
    
    <content type="html"><![CDATA[<p>　　在这个技术日新月异的时代，每天都有很多技术过时，同时也会很多新技术被发明出来，作为一名技术人员，在学习新技术时，会有自己的一套学习方法。在此将自己的学习方法和反思记录下来。</p><p>　　在面对新技术时，不同的技术人员会根据自己的思维习惯采取不同的学习方法，但总的来说，大体分为两类。第一类是抛开其他因素，直接上手，以最快的速度将新技术运用到实践中，然后再根据自己的情况选择是否要在这门技术上深入下去。而第二类则是先做大量相关的基础铺垫，等基础牢固了，再去学习新技术。对于我而言，会根据不同的情况选择不同的学习方法。在项目紧急的情况下，我会选择第一类方法，以最快的速度将技术运用到实践中，等项目完成之后，再去考虑需不需要在这门技术上深入下去。比如，在一次项目中，需要使用QT开发一个Desktop Client，但之前我并没有QT相关的项目经验，也没有使用过C++开发过任何程序，项目又很紧急。在这个时候，唯一的办法就是直接上手QT，看官网文档，跑官网提供的例程。在跑了几个例程之后，大体了解了QT开发程序的基本思路，直接在例程上修改代码，实现自己的Desktop Client。在实现的过程中，也遇到了很多的问题，但相关的网站和论坛都能找得到相关的解决方案，最后顺利在deadline 之前完成。总的来说，第一类方法确实是一个很好的学习方法，在做中学，学中做，但对于我而言，这样做我会很没自信，心里会一种基础不牢而产生的恐惧感，所以在不紧急的情况下我都会选择第二类方法，它会让我感觉很自信、很踏实。研究生期间，自己选择机器学习作为研究方向，我没有选择直接上手机器学习，而是选择先去学习相关的数学知识(概率论、微积分、线性代数、最优化等)。虽然这些知识在本科的时候已经学过，但是自己心里还是很没自信，另一个我在时刻提醒自己必须先把数学再学一次才能去学习机器学习，但是再学这些数学知识又会将整个学习战线拉的很长，我担心自己没坚持到最后先就死在铺路过程中，这在很大程度上打击了自己学习动力(至少目前为止是这样)。在经过一段时间的纠结之后，我认为有必要去改变一下自己的学习方法，要大胆去尝试，不能畏于自己的纠结情绪。在学习新技术时的这种纠结情绪，我想很多技术人都会有，只是轻重不一样。记得一次在Udacity DL学习群里，有一个学员在群里问“学习DL需要哪些数学知识？”，结果另一个学员回答了一大通”微积分、概率论、线性代数、矩阵论、凸优化、流型理论、信息论……..”，结果群里马上出来十几个人批斗他，批的他最后直接退群了。果然语言是最厉害的武器。虽然只是一个小插曲，但是从那时起我就试图去反思自己的学习方法，改变一下学习策略。大多数技术员在刚接触一个新技术时都只是技术的使用者，并不是创造者，在开始我们自己也不知道自己到底缺哪方面的知识，不需要掌握太多相关的细节也能根据自己以往的技术经验快速将新技术应用到实践中去，在实践过程自然会发现自己缺少哪些知识，这时候有针对性的学习才是最好的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　在这个技术日新月异的时代，每天都有很多技术过时，同时也会很多新技术被发明出来，作为一名技术人员，在学习新技术时，会有自己的一套学习方法。在此将自己的学习方法和反思记录下来。&lt;/p&gt;
&lt;p&gt;　　在面对新技术时，不同的技术人员会根据自己的思维习惯采取不同的学习方法，但总的来
      
    
    </summary>
    
      <category term="生活" scheme="https://free-free.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="随笔" scheme="https://free-free.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>未送出的礼物(END)</title>
    <link href="https://free-free.github.io/2017/11/02/not-send-present/"/>
    <id>https://free-free.github.io/2017/11/02/not-send-present/</id>
    <published>2017-11-02T02:31:33.000Z</published>
    <updated>2017-11-03T12:13:37.436Z</updated>
    
    <content type="html"><![CDATA[<p>谢谢你的陪伴，就让这份礼物尘封于此吧。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-01.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-02.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-03.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-04.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-05.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-06.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-07.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-08.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-09.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-10.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-11.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-12.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-13.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-14.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-15.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-16.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-17.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-18.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-19.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-20.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-21.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-22.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-23.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-24.jpg" alt=""></p><p><img src="http://oy4cno18k.bkt.clouddn.com/not-send-present-25.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;谢谢你的陪伴，就让这份礼物尘封于此吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oy4cno18k.bkt.clouddn.com/not-send-present-01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oy4cno18k.
      
    
    </summary>
    
      <category term="我的她" scheme="https://free-free.github.io/categories/%E6%88%91%E7%9A%84%E5%A5%B9/"/>
    
    
      <category term="礼物" scheme="https://free-free.github.io/tags/%E7%A4%BC%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>机器学习相关论文(持续更新)</title>
    <link href="https://free-free.github.io/2017/10/30/machine-learning-latest-topic-article/"/>
    <id>https://free-free.github.io/2017/10/30/machine-learning-latest-topic-article/</id>
    <published>2017-10-30T05:02:05.000Z</published>
    <updated>2017-11-06T12:01:54.611Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><p><strong>Dynamic Routing Between Capsules</strong></p><p>paper : <a href="https://arxiv.org/pdf/1710.09829.pdf" target="_blank" rel="external">download</a></p><p>author : Geoffrey E. Hinton, Sara Sabour and  Nicholas Frosst</p><p>date: September 2017</p></li></ul><hr><ul><li><p><strong>Multi-Scale Context Aggregation by Dilated Convolutions</strong></p><p>paper : <a href="https://arxiv.org/abs/1511.07122" target="_blank" rel="external">download</a></p><p>author : Fisher Yu, Vladlen Koltun</p><p>date : 2015</p></li></ul><hr><ul><li><p><strong>Striving for Simplicity: The All Convolutional Net</strong></p><p>paper : <a href="https://arxiv.org/abs/1412.6806" target="_blank" rel="external">download</a></p><p>author : Jost Tobias Springenberg, Alexey Dosovitskiy, Thomas Brox, Martin Riedmiller</p><p>date: 2014</p></li></ul><hr><ul><li><p><strong>Reducing the Dimensionality of Data with Neural Networks</strong></p><p>paper : <a href="https://pdfs.semanticscholar.org/7d76/b71b700846901ac4ac119403aa737a285e36.pdf" target="_blank" rel="external">download</a></p><p>author : G. E. Hinton and R. R. Salakhutdinov</p><p>date : 2006</p></li></ul><hr><ul><li><p><strong>Deep Learning：Yestoday，Today，and Tomorrow</strong></p><p>paper :  <a href="http://oymgew2u4.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%98%A8%E5%A4%A9%E3%80%81%E4%BB%8A%E5%A4%A9%E5%92%8C%E6%98%8E%E5%A4%A9%28%E4%BD%99%E5%87%AF%2A%29.pdf" target="_blank" rel="external">download</a></p><p>author : Yu Kai，Jia Lei，Chen Yuqiang，and Xu Wei</p><p>date : 2013</p></li></ul><hr><ul><li><p><strong>Backpropagration Applied To Handwrittn Zip Code Recogition</strong></p><p>paper : <a href="http://yann.lecun.com/exdb/publis/pdf/lecun-89e.pdf" target="_blank" rel="external">download</a></p><p>author : Y.LeCun,B.Boser,J.S.Denker,D.Henderson,R.E.Howard,W.Hubbard and L.D.Jackel</p><p>date : 1989</p></li></ul><hr><ul><li><p><strong>Experiments on Learning by Back Propagation</strong></p><p>paper : <a href="http://www.cs.toronto.edu/~fritz/absps/bptr.pdf" target="_blank" rel="external">download</a></p><p>author : David C.Plaut,Steven J.Nowlan and Geoffrey E.Hinton</p><p>date : June 1986</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dynamic Routing Between Capsules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;paper : &lt;a href=&quot;https://arxiv.org/pdf/1710.09829.pdf&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="machine-learning" scheme="https://free-free.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>使用共享状态实现单例模式？</title>
    <link href="https://free-free.github.io/2017/10/30/implementation-of-singleton-using-share-state/"/>
    <id>https://free-free.github.io/2017/10/30/implementation-of-singleton-using-share-state/</id>
    <published>2017-10-30T02:18:47.000Z</published>
    <updated>2017-11-04T12:26:28.593Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>之前介绍了3种实现单例模式方法：</p><ul><li><a href="/2017/10/11/implementation-of-singleton-using-decrator/">使用装饰器实现python单例模式</a></li><li><a href="/2017/10/14/implementation-of-singleton-using-metaclass/">使用元类实现python 单例模式</a></li><li><a href="/2017/10/29/implemenation-of-singleton-using-new-method/">使用Python类 <strong>__new__</strong> 方法实现单例模式</a></li></ul><p>这种三种实现方法都是我们通常理解的单例模式：即每次创建对象时，都返回同一个对象。但从一个更广的层面上讲，单例模式不仅可以理解为一个类创建的所有对象在内存中都是同一个对象，也可以理解为一个类的所有对象都共享同一状态。共享状态之后，虽然类每次创建的对象都不同，但是它们有一个共享的状态，一个对象对自己的状态操作，也会通过共享状态反映到其他的对象上<a href="http://code.activestate.com/recipes/66531/" target="_blank" rel="external">[1]</a>，这样做也能达到传统单例模式要求的功能。对于Python而言，所谓共享状态是将每一个对象的<code>__dict__</code>指向同一个字典。这种通过共享状态实现单例模式的方法被称为<strong>Borg</strong>或者<strong>Monostate</strong>。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h3><h5 id="2-1-Environment"><a href="#2-1-Environment" class="headerlink" title="2.1 Environment"></a>2.1 Environment</h5><ul><li>ubuntu16.04</li><li>python3.5</li></ul><h5 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">  </div><div class="line">  <span class="comment"># 在将共享状态放在类的属性，</span></div><div class="line">  _share_state = &#123;&#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment">#The following code must be placed in first line in your __init__ method</span></div><div class="line">    self.__dict__ = share_state</div><div class="line">    <span class="comment"># The following code is your logical code </span></div><div class="line">    <span class="comment"># .....</span></div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  obj1 = Singleton()</div><div class="line">  obj2 = Singleton()</div><div class="line">  print(id(obj1))</div><div class="line">  print(id(obj2))</div><div class="line">  obj1.age = <span class="number">21</span></div><div class="line">  <span class="comment"># 对obj1的操作会通过共享状态反映到obj2上</span></div><div class="line">  print(obj2.age)</div><div class="line">  obj2.age += <span class="number">10</span></div><div class="line">  <span class="comment"># 对obj2的操作也会通过贡献状态反映到obj1上</span></div><div class="line">  print(obj1.age)</div></pre></td></tr></table></figure><p>output</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">140481749803528</span></div><div class="line"><span class="number">140481749803640</span></div><div class="line"><span class="number">21</span></div><div class="line"><span class="number">31</span></div></pre></td></tr></table></figure><p>another way: 在<code>__new__</code>method实现状态的共享，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">  </div><div class="line">  <span class="comment"># 在将共享状态放在类的属性，</span></div><div class="line">  _share_state = &#123;&#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">    obj = super().__new__(cls, *args, **kwargs)</div><div class="line">    obj.__dict__ = cls._share_state</div><div class="line">    <span class="keyword">return</span> obj</div></pre></td></tr></table></figure><p>上面的两种实现方法是在<code>__init__</code>method中或者<code>__new__</code>method中实现状态共享，都是侵入式的。为了让类的实现显得更加的优美、解耦，可以使用装饰器来实现，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Borg</span><span class="params">(cls)</span>:</span></div><div class="line">  cls._obj_share_state = &#123;&#125;</div><div class="line">  original_init = cls.__init__</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new_init</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">    self.__dict__ = cls._obj_share_state</div><div class="line">    original_init(self, *args, **kwargs)</div><div class="line">  cls.__init__ = new_init</div><div class="line">  <span class="keyword">return</span> cls</div><div class="line"></div><div class="line"><span class="meta">@Borg</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">KlassOne</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">  </div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  obj1 = KlassOne()</div><div class="line">  obj2 = KlassOne()</div><div class="line">  print(id(obj1))</div><div class="line">  print(id(obj2))</div><div class="line">  obj1.age = <span class="number">10</span></div><div class="line">  print(obj2.age)</div><div class="line">  obj2.age += <span class="number">30</span></div><div class="line">  print(obj1.age)</div></pre></td></tr></table></figure><p>output：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">139977434952480</span></div><div class="line"><span class="number">139977434952648</span></div><div class="line"><span class="number">10</span></div><div class="line"><span class="number">40</span></div></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://code.activestate.com/recipes/66531/" target="_blank" rel="external">[1]SINGLETON? WE DON’T NEED NO STINKIN’ SINGLETON: THE BORG DESIGN PATTERN</a></p><p><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">[2]Python单例模式的4种实现方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h3&gt;&lt;p&gt;之前介绍了3种实现单例模式方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/10/11/implement
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用Python类__new__方法实现单例模式</title>
    <link href="https://free-free.github.io/2017/10/29/implemenation-of-singleton-using-new-method/"/>
    <id>https://free-free.github.io/2017/10/29/implemenation-of-singleton-using-new-method/</id>
    <published>2017-10-29T10:35:10.000Z</published>
    <updated>2017-11-04T12:26:10.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>前两篇文章分别介绍了<a href="/2017/10/11/implementation-of-singleton-using-decrator/">使用装饰器实现单例模式</a>和<a href="/2017/10/14/implementation-of-singleton-using-metaclass/">使用元类实现单例模式</a>。这篇文章介绍使用Python类的<code>__new__</code>方法来实现单例模式。当谈及Python类实例化对象时，不得不提到创建对象过程中涉及到的两个方法<code>__init__</code>和<code>__new__</code>。在Python的类中，<code>__init__</code>method是对象初始化器，而且<code>__new__</code>method才是真正的构造method，它负责创建对象，并将创建的对象返回。对象的创建流程如下：</p><p><img src="http://oy4cno18k.bkt.clouddn.com/implementation-of-singleton-using-new-method-01.png" alt=""></p><p>图中实线箭头表示调用关系，虚线表示返回。当类创建一个对象时，由类的Metaclass的<code>__call__</code>method来调用类的<code>__new__</code>method，<code>__new__</code>method将对象创建好之后返回给Metaclass的<code>__call__</code>method，然后由Metaclass的<code>__call__</code>method来调用类的<code>__init__</code>method。根据上面的流程可知，要实现单例模式，只需要在类中实现<code>__new__</code>method，并每次返回同一个对象即可。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h3><h5 id="2-1-Environment"><a href="#2-1-Environment" class="headerlink" title="2.1 Environment"></a>2.1 Environment</h5><ul><li>ubuntu16.04</li><li>python3.5</li></ul><h5 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">    print(<span class="string">"Creating object!"</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</div><div class="line">      cls._instance = super().__new__(cls, *args, **kwargs)</div><div class="line">    <span class="keyword">return</span> cls._instance</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">"Initiating object!"</span>)</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  obj1 = Singleton()</div><div class="line">  obj2 = Singleton()</div><div class="line">  print(id(obj1))</div><div class="line">  print(id(obj2))</div><div class="line">  print(obj1 == obj2)</div></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Creating object!</div><div class="line">Initiating object!</div><div class="line">Creating object!</div><div class="line">Initiating object!</div><div class="line"><span class="number">140549528785752</span></div><div class="line"><span class="number">140549528785752</span></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure><p>由输出可知创建的两个对象都是同一个实例，同时也验证了对象的创建流程。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">[1]Python单例模式的4种实现方法</a></p><p><a href="https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/" target="_blank" rel="external">[2]Understanding Python metaclasses</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h3&gt;&lt;p&gt;前两篇文章分别介绍了&lt;a href=&quot;/2017/10/11/implementation-of-singleton-usi
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>写给她的第一封信</title>
    <link href="https://free-free.github.io/2017/10/26/first-letter-to-her/"/>
    <id>https://free-free.github.io/2017/10/26/first-letter-to-her/</id>
    <published>2017-10-26T12:16:46.000Z</published>
    <updated>2017-11-04T12:21:09.454Z</updated>
    
    <content type="html"><![CDATA[<p>每当看见电影里男主给女主写信的时候，心里特别激动，想着以后自己的女朋友收到我写给她信的时候应该会很开心、很幸福吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每当看见电影里男主给女主写信的时候，心里特别激动，想着以后自己的女朋友收到我写给她信的时候应该会很开心、很幸福吧。&lt;/p&gt;

      
    
    </summary>
    
      <category term="我的她" scheme="https://free-free.github.io/categories/%E6%88%91%E7%9A%84%E5%A5%B9/"/>
    
    
      <category term="for-her" scheme="https://free-free.github.io/tags/for-her/"/>
    
  </entry>
  
  <entry>
    <title>Markdown集成mathjax</title>
    <link href="https://free-free.github.io/2017/10/24/integrate-with-mathjax-in-markdown/"/>
    <id>https://free-free.github.io/2017/10/24/integrate-with-mathjax-in-markdown/</id>
    <published>2017-10-24T10:42:57.000Z</published>
    <updated>2017-11-04T12:26:33.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​    之前一直使用markdown写文章，使用的都是markdown常规的语法，并没有考虑过怎样使用markdown插入数学公式，直到最近需要在文章中插入数学公式时，才认真考虑怎样使用markdown插入数学公式。在网上查了之后，发现markdown并不支持直接插入数学公式，需要借助第三方来插入，在草草试用几种插入数学公式的方式之后，个人觉得使用MathJax插入数学公式比较方便、简洁，插入的数学公式也很漂亮。遂在这里把怎样使用MathJax在markdown中插入数学公式的方法和基本的MathJax的语法记录下来，以便之后学习，如有什么错误请大家指教。</p><h1 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h1><h2 id="1-MathJax简介"><a href="#1-MathJax简介" class="headerlink" title="1. MathJax简介"></a>1. MathJax简介</h2><p>MathJax是一个javascript软件包，它允许你通过LaTex、MathML或者AsciiMath语法在网页中插入数学公式，并通过javascript处理之后产生HTML、SVG或者MathML equations 等可视化的格式，以便在浏览器中浏览。</p><h2 id="2-引入MathJax"><a href="#2-引入MathJax" class="headerlink" title="2. 引入MathJax"></a>2. 引入MathJax</h2><ul><li><h3 id="通过CDN引入"><a href="#通过CDN引入" class="headerlink" title="通过CDN引入"></a>通过CDN引入</h3><p>通过CDN网络引入MathJax只需要在Markdown文档加入下面的代码<a href="http://docs.mathjax.org/en/latest/start.html#using-a-content-delivery-network-cdn" target="_blank" rel="external"><a href="http://docs.mathjax.org/en/latest/start.html#using-a-content-delivery-network-cdn" target="_blank" rel="external">1</a></a>，在markdown解析的时候会通过CDN自动将MathJax加载到当前页面中。该方式需要联网，但也是最简单、最快速的方式，个人推荐也使用这种方式。</p><p>​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> <span class="keyword">async</span></div><div class="line">  src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML"</span>&gt;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><ul><li><h3 id="本地引入"><a href="#本地引入" class="headerlink" title="本地引入"></a>本地引入</h3><p>本地引入需要将MathJax安装到你的服务器上，或者下载到本地磁盘上，具体引入方式请参考官方文档<a href="http://docs.mathjax.org/en/latest/start.html#installing-your-own-copy-of-mathjax" target="_blank" rel="external"><a href="http://docs.mathjax.org/en/latest/start.html#installing-your-own-copy-of-mathjax" target="_blank" rel="external">2</a></a>。</p></li></ul><h2 id="3-MathJax的LaTex语法"><a href="#3-MathJax的LaTex语法" class="headerlink" title="3. MathJax的LaTex语法"></a>3. MathJax的LaTex语法</h2><h3 id="3-1-数学公式呈现方式"><a href="#3-1-数学公式呈现方式" class="headerlink" title="3.1 数学公式呈现方式"></a>3.1 数学公式呈现方式</h3><h4 id="3-1-1-行内公式-inline-formulas"><a href="#3-1-1-行内公式-inline-formulas" class="headerlink" title="3.1.1 行内公式(inline formulas)"></a>3.1.1 行内公式(inline formulas)</h4><p>所谓行内公式是指公式与文字显示在同一行，以<strong>\$……..\$</strong>来标记，在两个<strong>$</strong>符号插入数学公式。例如：</p><ul><li><p>\$\cos{2\theta}=\cos^2{\theta}-\sin^2{\theta}$</p><p>$\displaystyle \cos{2\theta}=\cos^2{\theta}-\sin^2{\theta}$</p></li><li><p>\$\lim_{x \to \infty} \mathrm{e}^{-x} = 0$</p><p>$\lim_{x \to \infty} \mathrm{e}^{-x} = 0$</p></li><li><p>\$f(t)*g(t)=\int_{-\infty}^{+\infty}{f(\tau)g(t-\tau)\mathrm{d}\tau}$</p><p>$ f(t)*g(t)=\int_{-\infty}^{+\infty}{f(\tau)g(t-\tau)\mathrm{d}\tau}$</p><p>​</p></li></ul><h4 id="3-1-2-Displayed-formulas"><a href="#3-1-2-Displayed-formulas" class="headerlink" title="3.1.2 Displayed formulas"></a>3.1.2 Displayed formulas</h4><p>所谓Displayed formulas指单独另起一行居中并放大显示的数学公式，以<strong>\$\$……$$</strong>来标记，例如：</p><ul><li><p>\$\$\cos^2{2\theta}=\cos^2{\theta}-\sin^2{\theta}$$</p><p>$$\displaystyle \cos^2{2\theta}=\cos^2{\theta}-\sin^2{\theta}$$ </p></li><li><p>\$\$\lim_{x \to \infty} \mathrm{e}^(-x) =0$$</p><p>$$\lim_{x \to \infty}\mathrm{e}^{-x}=0$$</p></li><li><p>\$\$f(t)*g(t)=\int_{-\infty}^{+\infty}{f(\tau)g(t-\tau)\mathrm{d}\tau}$$</p><p>$$f(t)*g(t)=\int_{-\infty}^{+\infty}{f(\tau)g(t-\tau)\mathrm{d}\tau}$$</p></li></ul><h3 id="3-2-LaTex数学符号"><a href="#3-2-LaTex数学符号" class="headerlink" title="3.2 LaTex数学符号"></a>3.2 LaTex数学符号</h3><h4 id="3-2-1-希腊字母-Greek-letters"><a href="#3-2-1-希腊字母-Greek-letters" class="headerlink" title="3.2.1 希腊字母(Greek letters)"></a>3.2.1 希腊字母(Greek letters)</h4><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">$A,\alpha$</td><td style="text-align:center">A ,\alpha</td></tr><tr><td style="text-align:center">$B,\alpha$</td><td style="text-align:center">B,\beta</td></tr><tr><td style="text-align:center">$\Gamma,\gamma$</td><td style="text-align:center">\Gamma,\gamma</td></tr><tr><td style="text-align:center">$\Delta,\delta$</td><td style="text-align:center">\Delta,\delta</td></tr><tr><td style="text-align:center">$E,\epsilon,\varepsilon$</td><td style="text-align:center">E,\epsilon,\varepsilon</td></tr><tr><td style="text-align:center">$Z,\zeta$</td><td style="text-align:center">E,\zeta</td></tr><tr><td style="text-align:center">$\Theta,\theta,\vartheta$</td><td style="text-align:center">\Theta,\theta,\vartheta</td></tr><tr><td style="text-align:center">$I,\iota$</td><td style="text-align:center">I,\iota</td></tr><tr><td style="text-align:center">$K,\kappa,\varkappa$</td><td style="text-align:center">K,\kappa,\varkappa</td></tr><tr><td style="text-align:center">$\Lambda,\lambda$</td><td style="text-align:center">\Lambda,\lambda</td></tr><tr><td style="text-align:center">$M,\mu$</td><td style="text-align:center">M,\mu</td></tr><tr><td style="text-align:center">$N,\nu$</td><td style="text-align:center">N,\nu</td></tr><tr><td style="text-align:center">$\Xi,\xi$</td><td style="text-align:center">\Xi,\xi</td></tr><tr><td style="text-align:center">$O,o$</td><td style="text-align:center">O,o</td></tr><tr><td style="text-align:center">$\Pi,\pi,\varpi$</td><td style="text-align:center">\Pi,\pi,\varpi</td></tr><tr><td style="text-align:center">$P,\rho,\varrho$</td><td style="text-align:center">P,\rho,\varrho</td></tr><tr><td style="text-align:center">$\Sigma,\sigma,\varsigma$</td><td style="text-align:center">\Sigma,\sigma,\varsigma</td></tr><tr><td style="text-align:center">$T,\tau$</td><td style="text-align:center">T,\tau</td></tr><tr><td style="text-align:center">$\Upsilon,\upsilon$</td><td style="text-align:center">\Upsilon,\up</td></tr><tr><td style="text-align:center">$\Phi,\phi,\varphi$</td><td style="text-align:center">\Phi,\phi,\varphi</td></tr><tr><td style="text-align:center">$X,\chi$</td><td style="text-align:center">X,\chi</td></tr><tr><td style="text-align:center">$\Psi,\psi$</td><td style="text-align:center">\Psi,\psi</td></tr><tr><td style="text-align:center">$\Omega,\omega$</td><td style="text-align:center">\Omega,\o</td></tr></tbody></table><h4 id="3-2-2-其他常用数学符号"><a href="#3-2-2-其他常用数学符号" class="headerlink" title="3.2.2 其他常用数学符号"></a>3.2.2 其他常用数学符号</h4><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">$\partial$</td><td style="text-align:center">\partial</td></tr><tr><td style="text-align:center">$\eth$</td><td style="text-align:center">\eth</td></tr><tr><td style="text-align:center">$\hbar$</td><td style="text-align:center">\hbar</td></tr><tr><td style="text-align:center">$\imath$</td><td style="text-align:center">\imath</td></tr><tr><td style="text-align:center">$\jmath$</td><td style="text-align:center">\jmath</td></tr><tr><td style="text-align:center">$\ell$</td><td style="text-align:center">\ell</td></tr><tr><td style="text-align:center">$\Re$</td><td style="text-align:center">\Re</td></tr><tr><td style="text-align:center">$\Im$</td><td style="text-align:center">\Im</td></tr><tr><td style="text-align:center">$\wp$</td><td style="text-align:center">\wp</td></tr><tr><td style="text-align:center">$\nabla$</td><td style="text-align:center">\nabla</td></tr><tr><td style="text-align:center">$\Box$</td><td style="text-align:center">\Box</td></tr><tr><td style="text-align:center">$\infty$</td><td style="text-align:center">\infty</td></tr><tr><td style="text-align:center">$\aleph$</td><td style="text-align:center">\aleph</td></tr><tr><td style="text-align:center">$\beth$</td><td style="text-align:center">\beth</td></tr><tr><td style="text-align:center">$\gimel$</td><td style="text-align:center">\gimel</td></tr></tbody></table><h4 id="3-2-3-三角函数符号"><a href="#3-2-3-三角函数符号" class="headerlink" title="3.2.3 三角函数符号"></a>3.2.3 三角函数符号</h4><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">$\sin$</td><td style="text-align:center">\sin</td></tr><tr><td style="text-align:center">$\cos$</td><td style="text-align:center">\cos</td></tr><tr><td style="text-align:center">$\tan$</td><td style="text-align:center">\tan</td></tr><tr><td style="text-align:center">$\cot$</td><td style="text-align:center">\cot</td></tr><tr><td style="text-align:center">$\arcsin$</td><td style="text-align:center">\arcsin</td></tr><tr><td style="text-align:center">$\arccos$</td><td style="text-align:center">\arccos</td></tr><tr><td style="text-align:center">$\arctan$</td><td style="text-align:center">\arctan</td></tr><tr><td style="text-align:center">$\sinh$</td><td style="text-align:center">\sinh</td></tr><tr><td style="text-align:center">$\cosh$</td><td style="text-align:center">\cosh</td></tr><tr><td style="text-align:center">$\tanh$</td><td style="text-align:center">\tanh</td></tr><tr><td style="text-align:center">$\coth$</td><td style="text-align:center">\coth</td></tr><tr><td style="text-align:center">$\sec$</td><td style="text-align:center">\sec</td></tr></tbody></table><h4 id="3-3-4-双目运算符"><a href="#3-3-4-双目运算符" class="headerlink" title="3.3.4 双目运算符"></a>3.3.4 双目运算符</h4><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">$\pm$</td><td style="text-align:center">\pm</td></tr><tr><td style="text-align:center">$\mp$</td><td style="text-align:center">\mp</td></tr><tr><td style="text-align:center">$\times$</td><td style="text-align:center">\times</td></tr><tr><td style="text-align:center">$\div$</td><td style="text-align:center">\div</td></tr><tr><td style="text-align:center">$\ast$</td><td style="text-align:center">\ast</td></tr><tr><td style="text-align:center">$\star$</td><td style="text-align:center">\star</td></tr><tr><td style="text-align:center">$\cap$</td><td style="text-align:center">\cap</td></tr><tr><td style="text-align:center">$\cup$</td><td style="text-align:center">\cup</td></tr><tr><td style="text-align:center">$\sqcap$</td><td style="text-align:center">\sqcap</td></tr><tr><td style="text-align:center">$\sqcup$</td><td style="text-align:center">\sqcup</td></tr><tr><td style="text-align:center">$\vee$</td><td style="text-align:center">\vee</td></tr><tr><td style="text-align:center">$\wedge$</td><td style="text-align:center">\wedge</td></tr><tr><td style="text-align:center">$\cdot$</td><td style="text-align:center">\cdot</td></tr><tr><td style="text-align:center">$\diamond$</td><td style="text-align:center">\diamond</td></tr><tr><td style="text-align:center">$\bigtriangleup$</td><td style="text-align:center">\bigtriangleup</td></tr><tr><td style="text-align:center">$\bigtriangledown$</td><td style="text-align:center">\bigtriangledown</td></tr><tr><td style="text-align:center">$\triangleleft$</td><td style="text-align:center">\triangleleft</td></tr><tr><td style="text-align:center">$\triangleright$</td><td style="text-align:center">\triangleright</td></tr><tr><td style="text-align:center">$\bigcirc$</td><td style="text-align:center">\bigcirc</td></tr><tr><td style="text-align:center">$\bullet$</td><td style="text-align:center">\bullet</td></tr><tr><td style="text-align:center">$\oplus$</td><td style="text-align:center">\oplus</td></tr><tr><td style="text-align:center">$\otimes$</td><td style="text-align:center">\otimes</td></tr><tr><td style="text-align:center">$\ominus$</td><td style="text-align:center">\ominus</td></tr><tr><td style="text-align:center">$\odot$</td><td style="text-align:center">\odot</td></tr><tr><td style="text-align:center">$\circ$</td><td style="text-align:center">\circ</td></tr><tr><td style="text-align:center">$\setminus$</td><td style="text-align:center">\setminus</td></tr><tr><td style="text-align:center">$\oslash$</td><td style="text-align:center">\oslash</td></tr></tbody></table><h4 id="3-2-5-集合逻辑符号"><a href="#3-2-5-集合逻辑符号" class="headerlink" title="3.2.5 集合逻辑符号"></a>3.2.5 集合逻辑符号</h4><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaText符号</th></tr></thead><tbody><tr><td style="text-align:center">$\exists$</td><td style="text-align:center">\exists</td></tr><tr><td style="text-align:center">$\nexists$</td><td style="text-align:center">\nexists</td></tr><tr><td style="text-align:center">$\forall$</td><td style="text-align:center">\forall</td></tr><tr><td style="text-align:center">$\neg$</td><td style="text-align:center">\neg</td></tr><tr><td style="text-align:center">$\subset$</td><td style="text-align:center">\subset</td></tr><tr><td style="text-align:center">$\supset$</td><td style="text-align:center">\supset</td></tr><tr><td style="text-align:center">$\in$</td><td style="text-align:center">\in</td></tr><tr><td style="text-align:center">$\notin$</td><td style="text-align:center">\notin</td></tr><tr><td style="text-align:center">$\ni$</td><td style="text-align:center">\ni</td></tr><tr><td style="text-align:center">$\land$</td><td style="text-align:center">\land</td></tr><tr><td style="text-align:center">$\lor$</td><td style="text-align:center">\lor</td></tr><tr><td style="text-align:center">$\to$</td><td style="text-align:center">\to</td></tr><tr><td style="text-align:center">$\gets$</td><td style="text-align:center">\gets</td></tr><tr><td style="text-align:center">$\mapsto$</td><td style="text-align:center">\mapsto</td></tr><tr><td style="text-align:center">$\implies$</td><td style="text-align:center">\implies</td></tr><tr><td style="text-align:center">$\leftrightarrow$</td><td style="text-align:center">\leftrightarrow</td></tr><tr><td style="text-align:center">$\Leftrightarrow$</td><td style="text-align:center">\Leftrightarrow</td></tr><tr><td style="text-align:center">$\top$</td><td style="text-align:center">\top</td></tr><tr><td style="text-align:center">$\bot$</td><td style="text-align:center">\bot</td></tr><tr><td style="text-align:center">$\emptyset,\varnothing$</td><td style="text-align:center">\emptyset,\varnothing</td></tr></tbody></table><h4 id="3-2-6-上标号和下标号的表示方法"><a href="#3-2-6-上标号和下标号的表示方法" class="headerlink" title="3.2.6 上标号和下标号的表示方法"></a>3.2.6 上标号和下标号的表示方法</h4><p>在LaTex中，使用<code>^</code>符号代表上标号，使用<code>_</code>符号代表下标号，当上/下标号是一个复合的表达式时，需要将使用curly braces<code>{}</code>将表达式包起来，例如:</p><ul><li><p>\$\$k_{n+1} = n^2 + k<em>n^2  - k\</em>{n-1}$$</p><p>$$k_{n+1} = n^2 + k<em>n^2 - k</em>{n-1}$$</p></li><li><p>\$\$n^22$$</p><p>$$n^{22}$$</p></li><li><p>\$\$lim_{x \to \infty} \mathrm(e)^{-x} =0 $$</p><p>$$lim_{x \to \infty} \mathrm{e}^{-x} = 0$$</p></li></ul><p>也可以使用<code>_</code>和<code>|</code>组合去显示下标的取值，例如：</p><p>\$\$f(n) = n^5 + 4n^2 + 2 |_{n=17}$$</p><p>$$f(n) = n^2 + 4n^2 + 2 |_{n=17}$$</p><h4 id="3-2-7-分式和二项式的表示方法"><a href="#3-2-7-分式和二项式的表示方法" class="headerlink" title="3.2.7 分式和二项式的表示方法"></a>3.2.7 分式和二项式的表示方法</h4><ul><li><p>分式</p><p>在LaTex中，使用<code>\frac{numerator}{denominator}</code>来创建一个分式，<code>numerator</code>代表分子，<code>denominator</code>代表分子，具体例子如下:</p><ul><li><p>\$\$\frac{n!}{k!(n-k)!}$$</p><p>$$\frac{n!}{k!(n-k)!}$$</p></li><li><p>\$\$\frac{\frac{1}{x} + \frac{1}{y}}{y-z}$$</p><p>$$\frac{\frac{1}{x} + \frac{1}{y}}{y-z}$$</p></li></ul></li><li><p>二项式</p><p>使用<code>\binom{n}{k}</code>来创建一个二项式表达式，例如：</p><p>\$\$\frac{n!}{k!(n-k)!} =  \binom{n}{k}$$</p><p>$$\frac{n!}{k!(n-k)!} = \binom{n}{k}$$</p></li></ul><h4 id="3-2-8-根号的表示方法"><a href="#3-2-8-根号的表示方法" class="headerlink" title="3.2.8 根号的表示方法"></a>3.2.8 根号的表示方法</h4><p>使用<code>\sqrt{...}</code>去创建一个根号表示，使用<code>[]</code>去改变根号的权重，具体例子如下：</p><ul><li><p>\$\$\sqrt{\frac{x+1}{x}}$$</p><p>$$\sqrt{\frac{x+1}{x}}$$</p></li><li><p>\$\$\sqrt[n]{1 + x + x^2 +\cdots + x^n}$</p><p>$$\sqrt[n]{1 + x + x^2 + \cdots + x^2}$$</p></li></ul><h4 id="3-2-9-求和和积分公式的表示方法"><a href="#3-2-9-求和和积分公式的表示方法" class="headerlink" title="3.2.9 求和和积分公式的表示方法"></a>3.2.9 求和和积分公式的表示方法</h4><ul><li><p>求和</p><p>使用<code>\sum</code>来创建一个求和的公式，使用<code>^</code>来指定求和公式的上限，使用<code>_</code>来指定求和公式的下限，例如：</p><ul><li><p>\$\$\sum_{i=1}^{10} t_i$$</p><p>$$\sum_{i=1}^{10} t_i$$</p></li><li><p>\$\$sum_{i=0}^{n} x^i$$</p><p>$$\sum_{i=0}^{n} x^i$$</p></li></ul></li></ul><p>　　当求和公式的下限需要写多行时，可以使用<code>\substack</code>组合<code>\\</code>来将下标写成多行，例如</p><p>　　\$\$\sum_{\substack{ 0&lt;i&lt;m \\0&lt;j&lt;n}} P(i,j)$$</p><p>​        $$\sum_{\substack{0&lt;i&lt;m\\0&lt;j&lt;n}} P(i,j)$$</p><ul><li><p>积分</p><p>使用<code>\int</code>来创建一个积分公式，使用<code>^</code>来指定求和公式的上限，使用<code>_</code>来指定求和公式的下限，例如：</p><p>\$\$\int_{-\infty}^{+\infty} \mathrm{e}^{-x}\,\mathrm{d}x$$</p><p>$$\int_{-\infty}^{+\infty} \mathrm{e}^{-x}\,\mathrm{d}x$$</p></li></ul><p>LaTex中还有很多命令和<code>\sum</code>和<code>\int表示方式相似</code>,类似的命令如下</p><table><thead><tr><th style="text-align:center">显示符号</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">$\sum$</td><td style="text-align:center">\sum</td></tr><tr><td style="text-align:center">$\bigoplus$</td><td style="text-align:center">\bigoplus</td></tr><tr><td style="text-align:center">$\bigcup$</td><td style="text-align:center">\bigcup</td></tr><tr><td style="text-align:center">$\bigsqcup$</td><td style="text-align:center">\bigsqcup</td></tr><tr><td style="text-align:center">$\int$</td><td style="text-align:center">\int</td></tr><tr><td style="text-align:center">$\iiint$</td><td style="text-align:center">\iiint</td></tr><tr><td style="text-align:center">$\prod$</td><td style="text-align:center">\prod</td></tr><tr><td style="text-align:center">$\bigotimes$</td><td style="text-align:center">\bigcap</td></tr><tr><td style="text-align:center">$\bigvee$</td><td style="text-align:center">\bigvee</td></tr><tr><td style="text-align:center">$\oint$</td><td style="text-align:center">\oint</td></tr><tr><td style="text-align:center">$\iiiint$</td><td style="text-align:center">\iiiint</td></tr><tr><td style="text-align:center">$\coprod$</td><td style="text-align:center">\coprod</td></tr><tr><td style="text-align:center">$\bigwedge$</td><td style="text-align:center">\bigwedge</td></tr><tr><td style="text-align:center">$\iint$</td><td style="text-align:center">\iint</td></tr><tr><td style="text-align:center">$\idotsint$</td><td style="text-align:center">\idotsin</td></tr></tbody></table><h4 id="3-2-10-方括号，圆括号，分隔符"><a href="#3-2-10-方括号，圆括号，分隔符" class="headerlink" title="3.2.10 方括号，圆括号，分隔符"></a>3.2.10 方括号，圆括号，分隔符</h4><table><thead><tr><th style="text-align:center">显示符号</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">$ ( a )$</td><td style="text-align:center">( a )</td></tr><tr><td style="text-align:center">$[ b ]$</td><td style="text-align:center">[ b ]</td></tr><tr><td style="text-align:center">${c}$</td><td style="text-align:center">\{c\}</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">d</td><td>$</td><td>\\</td><td>d\\</td><td></td></tr><tr><td style="text-align:center">$\langle f \rangle$</td><td style="text-align:center">\langle f \rangle</td></tr><tr><td style="text-align:center">$\lfloor g \rfloor$</td><td style="text-align:center">\lfloor g \rfloor</td></tr><tr><td style="text-align:center">$\lceil h \rceil$</td><td style="text-align:center">\lceil h \rceil</td></tr><tr><td style="text-align:center">$\</td><td style="text-align:center">e\</td><td>$</td><td>\\</td><td>e \\</td><td></td></tr><tr><td style="text-align:center">$\ulcorner i \urcorner$</td><td style="text-align:center">\ulcorner i \urcorner</td></tr></tbody></table><h4 id="3-2-11-省略号"><a href="#3-2-11-省略号" class="headerlink" title="3.2.11 省略号"></a>3.2.11 省略号</h4><table><thead><tr><th style="text-align:center">显示符号</th><th style="text-align:center">LaTex符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">$\dots$</td><td style="text-align:center">\dots</td><td style="text-align:left">通用的省略号表示方法，通常使用在文本中，它会根据上下文自动管理空格</td></tr><tr><td style="text-align:center">$\ldots$</td><td style="text-align:center">\ldots</td><td style="text-align:left">和通用的省略号相似，但不会自动管理空格</td></tr><tr><td style="text-align:center">$\cdots$</td><td style="text-align:center">\cdots</td><td style="text-align:left">这种省略号会根据文字的高度自动垂直居中</td></tr><tr><td style="text-align:center">$\vdots$</td><td style="text-align:center">\vdots</td><td style="text-align:left">垂直的省略号</td></tr><tr><td style="text-align:center">$\ddots$</td><td style="text-align:center">\ddots</td><td style="text-align:left">对角省略号</td></tr><tr><td style="text-align:center">$\dotsc$</td><td style="text-align:center">\dotsc</td><td style="text-align:left">dots with commas,$A_1,A_2,\dotsc,$</td></tr><tr><td style="text-align:center">$\dotsb$</td><td style="text-align:center">\dotsb</td><td style="text-align:left">dots with binary operators/relations，$A_1+\dotsb +A_N$</td></tr><tr><td style="text-align:center">$\dotsm$</td><td style="text-align:center">\dotsm</td><td style="text-align:left">mutiplication dots,$Ａ_1\dotsm  A_N$</td></tr><tr><td style="text-align:center">$\dotsi$</td><td style="text-align:center">\dotsi</td><td style="text-align:left">dots with integrals, $\int_a^b \dotsi$</td></tr></tbody></table><h4 id="3-2-12-空格"><a href="#3-2-12-空格" class="headerlink" title="3.2.12 空格"></a>3.2.12 空格</h4><p>LaText语法本身会忽略空格，在LaTex中有两种空格：小空格和四格空格</p><ul><li><p>小空格</p><p>\$a \ b\$ 呈现为：$a \ b$</p></li><li><p>四格空格</p><p>\$a \quad b\$ 呈现为：$a \quad b$</p></li></ul><h4 id="3-2-13-矩阵"><a href="#3-2-13-矩阵" class="headerlink" title="3.2.13 矩阵"></a>3.2.13 矩阵</h4><p>基本的矩阵可以使用matrix 环境来创建，矩阵和其他的类表结构一样，列之间使用<code>&amp;</code>来分开，行之间使用<code>\\</code>来封开，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$$ </div><div class="line">   \begin&#123;matrix&#125;  </div><div class="line">     a &amp;  b &amp; c \\ </div><div class="line">     d &amp;  e &amp; f  \\ </div><div class="line">    g &amp;  h &amp; i </div><div class="line">    \end&#123;matrix&#125; </div><div class="line">$$</div></pre></td></tr></table></figure><p>$$ \begin{matrix} a &amp; b &amp;c  \ d &amp; e &amp; f \ g &amp; h &amp; i\end{matrix} $$</p><p>LaTex支持多种不同的矩阵声明环境，具体如下表</p><table><thead><tr><th>Environment name</th><th>Surrounding delimiter</th><th style="text-align:center">Notes</th></tr></thead><tbody><tr><td>pmatrix</td><td>$(\ )$</td><td style="text-align:center">列默认居中</td></tr><tr><td>pmatrix*</td><td>$(\ )$</td><td style="text-align:center">可以指定列的对齐方式</td></tr><tr><td>bmatrix</td><td>$[ \ ]$</td><td style="text-align:center">列默认居中</td></tr><tr><td>bmatrix*</td><td>$[\ ]$</td><td style="text-align:center">可以指定列的对齐方式</td></tr><tr><td>Bmatrix</td><td>${ \ }$</td><td style="text-align:center">列默认居中</td></tr><tr><td>Bmatrix*</td><td>${ \ }$</td><td style="text-align:center">可以指定列的对齐方式</td></tr><tr><td>vmatrix</td><td>$</td><td style="text-align:center">\</td><td>$</td><td>列默认居中</td></tr><tr><td>vmatrix*</td><td>$</td><td style="text-align:center">\</td><td>$</td><td>可以指定列的对齐方式</td></tr><tr><td>Vmatrix</td><td>$\</td><td style="text-align:center">\ \</td><td>$</td><td>列默认居中</td></tr><tr><td>Vmatrix*</td><td>$\</td><td style="text-align:center">\ \</td><td>$</td><td>可以指定列的对齐方式</td></tr></tbody></table><ul><li><p>pmatrix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$$ A_&#123;m,n&#125; = </div><div class="line"></div><div class="line">      \begin&#123;pmatrix&#125; </div><div class="line"></div><div class="line">     a_&#123;1,1&#125; &amp; a_&#123;1,2&#125; &amp; \cdots &amp; a_&#123;1,n&#125; \\</div><div class="line"></div><div class="line">     a_&#123;2,1&#125; &amp; a_&#123;2,2&#125; &amp; \cdots &amp; a_&#123;2,n&#125; \\</div><div class="line"></div><div class="line">     \vdots &amp; \vdots  &amp; \ddots &amp; \dots \\</div><div class="line"></div><div class="line">      a_&#123;m,1&#125; &amp; a_&#123;m,2 &#125;  &amp; \cdots &amp; a_&#123;m,n&#125;</div><div class="line"></div><div class="line">      \end&#123;pmatrix&#125;</div><div class="line"></div><div class="line">$$</div></pre></td></tr></table></figure><p>呈现为：</p></li></ul><p>$$A<em>{m,n} = \begin{pmatrix} a</em>{1,1} &amp; a<em>{1,2} &amp; \cdots &amp; a</em>{1,n} \ a<em>{2,1} &amp; a</em>{2,2} &amp; \cdots &amp; a<em>{2,n} \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \ a</em>{m,1} &amp; a<em>{m,2} &amp; \cdots &amp; a</em>{m,n} \end{pmatrix}$$</p><ul><li><p>bmatrix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$$ A_&#123;m,n&#125; = </div><div class="line"></div><div class="line">      \begin&#123;bmatrix&#125;</div><div class="line"></div><div class="line">     a_&#123;1,1&#125; &amp; a_&#123;1,2&#125; &amp; \cdots &amp; a_&#123;1,n&#125; \\</div><div class="line"></div><div class="line">     a_&#123;2,1&#125; &amp; a_&#123;2,2&#125; &amp; \cdots &amp; a_&#123;2,n&#125; \\</div><div class="line"></div><div class="line">     \vdots &amp; \vdots  &amp; \ddots &amp; \dots \\</div><div class="line"></div><div class="line">      a_&#123;m,1&#125; &amp; a_&#123;m,2 &#125;  &amp; \cdots &amp; a_&#123;m,n&#125;</div><div class="line"></div><div class="line">      \end&#123;bmatrix&#125;</div><div class="line"></div><div class="line">$$</div></pre></td></tr></table></figure><p>呈现为</p><p>$$ A<em>{m,n} = \begin{bmatrix} a</em>{1,1} &amp; a<em>{1,2} &amp; \cdots &amp; a</em>{1,n} \ a<em>{2,1} &amp; a</em>{2,2} &amp; \cdots &amp; a<em>{2,n} \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \ a</em>{m,1} &amp; a<em>{m,2} &amp; \cdots &amp; a</em>{m,n} \end{bmatrix}$$</p></li><li><p>Bmatrix</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$$ A_&#123;m,n&#125; = </div><div class="line"></div><div class="line">      \begin&#123;Bmatrix&#125;</div><div class="line"></div><div class="line">     a_&#123;1,1&#125; &amp; a_&#123;1,2&#125; &amp; \cdots &amp; a_&#123;1,n&#125; \\</div><div class="line"></div><div class="line">     a_&#123;2,1&#125; &amp; a_&#123;2,2&#125; &amp; \cdots &amp; a_&#123;2,n&#125; \\</div><div class="line"></div><div class="line">     \vdots &amp; \vdots  &amp; \ddots &amp; \dots \\</div><div class="line"></div><div class="line">     a_&#123;m,1&#125; &amp; a_&#123;m,2 &#125;  &amp; \cdots &amp; a_&#123;m,n&#125;</div><div class="line"></div><div class="line">     \end&#123;Bmatrix&#125;</div><div class="line"></div><div class="line">$$</div></pre></td></tr></table></figure><p>  呈现为</p><p>  $$ A<em>{m,n} = \begin{Bmatrix} a</em>{1,1} &amp; a<em>{1,2} &amp; \cdots &amp; a</em>{1,n} \ a<em>{2,1} &amp; a</em>{2,2} &amp; \cdots &amp; a<em>{2,n} \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \ a</em>{m,1} &amp; a<em>{m,2} &amp; \cdots &amp; a</em>{m,n} \end{Bmatrix}$$</p><ul><li><p>vmatrix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$$ A_&#123;m,n&#125; = </div><div class="line"></div><div class="line">　　　　\begin&#123;vmatrix&#125;</div><div class="line"></div><div class="line">　　　　a_&#123;1,1&#125; &amp; a_&#123;1,2&#125; &amp; \cdots &amp; a_&#123;1,n&#125; \\</div><div class="line"></div><div class="line">　　　　a_&#123;2,1&#125; &amp; a_&#123;2,2&#125; &amp; \cdots &amp; a_&#123;2,n&#125; \\</div><div class="line"></div><div class="line">　　　　\vdots &amp; \vdots  &amp; \ddots &amp; \dots \\</div><div class="line"></div><div class="line">　　　　a_&#123;m,1&#125; &amp; a_&#123;m,2 &#125;  &amp; \cdots &amp; a_&#123;m,n&#125;</div><div class="line"></div><div class="line">　　　　\end&#123;vmatrix&#125;</div><div class="line"></div><div class="line">$$</div></pre></td></tr></table></figure><p>呈现为</p><p>$$ A<em>{m,n} = \begin{vmatrix} a</em>{1,1} &amp; a<em>{1,2} &amp; \cdots &amp; a</em>{1,n} \ a<em>{2,1} &amp; a</em>{2,2} &amp; \cdots &amp; a<em>{2,n} \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \ a</em>{m,1} &amp; a<em>{m,2} &amp; \cdots &amp; a</em>{m,n} \end{vmatrix}$$</p></li><li><p>Vmatrix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$$ A_&#123;m,n&#125; = </div><div class="line"></div><div class="line">　　　\begin&#123;Vmatrix&#125;</div><div class="line"></div><div class="line">　　　a_&#123;1,1&#125; &amp; a_&#123;1,2&#125; &amp; \cdots &amp; a_&#123;1,n&#125; \\</div><div class="line"></div><div class="line">　　　a_&#123;2,1&#125; &amp; a_&#123;2,2&#125; &amp; \cdots &amp; a_&#123;2,n&#125; \\</div><div class="line"></div><div class="line">　　　\vdots &amp; \vdots  &amp; \ddots &amp; \dots \\</div><div class="line"></div><div class="line">　　　a_&#123;m,1&#125; &amp; a_&#123;m,2 &#125;  &amp; \cdots &amp; a_&#123;m,n&#125;</div><div class="line"></div><div class="line">　　　\end&#123;Vmatrix&#125;</div><div class="line"></div><div class="line"> $$</div></pre></td></tr></table></figure><p>呈现为</p><p>$$ A<em>{m,n} = \begin{Vmatrix} a</em>{1,1} &amp; a<em>{1,2} &amp; \cdots &amp; a</em>{1,n} \ a<em>{2,1} &amp; a</em>{2,2} &amp; \cdots &amp; a<em>{2,n} \ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \ a</em>{m,1} &amp; a<em>{m,2} &amp; \cdots &amp; a</em>{m,n} \end{Vmatrix}$$</p></li></ul><h4 id="3-2-16-方程组"><a href="#3-2-16-方程组" class="headerlink" title="3.2.16 方程组"></a>3.2.16 方程组</h4><p>方程组可以使用cases环境来创建，起始、结束处以{cases}声明，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">\begin&#123;cases&#125;</div><div class="line"></div><div class="line">a_1x_1+b_1x_2+c_1x_3 = d_1\\</div><div class="line"></div><div class="line">a_2x_1+b_2x_2+c_2x_3 = d_2\\</div><div class="line"></div><div class="line">a_3x_1+b_3x_2+c_2x_3 = d_3\\</div><div class="line"></div><div class="line">\end&#123;cases&#125;</div><div class="line">$$</div></pre></td></tr></table></figure><p>呈现为:</p><p>$$\begin{cases} a_1x_1+b_1x_2+c_1x_3 = d_1 \ a_2x_1+b_2x_2+c_2x_3 = d_2 \ a_3x_1+b_3x_2+c_2x_3 = d_3 \end{cases}$$</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics#List_of_Mathematical_Symbols" target="_blank" rel="external">[1]LaTeX/Mathematics</a></p><p><a href="http://blog.csdn.net/ethmery/article/details/50670297" target="_blank" rel="external">[2]基本数学公式语法(of MathJax)</a></p><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">[3]MathJax basic tutorial and quick reference</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;​    之前一直使用markdown写文章，使用的都是markdown常规的语法，并没有考虑过怎样使用markdown插入数学公式，直到最
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="math" scheme="https://free-free.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>从ubuntu16.04/ubuntu17.04升级到ubuntu17.10(译)</title>
    <link href="https://free-free.github.io/2017/10/23/upgrade-ubuntu17-10-from-ubuntu16-04-or-ubuntu17-04/"/>
    <id>https://free-free.github.io/2017/10/23/upgrade-ubuntu17-10-from-ubuntu16-04-or-ubuntu17-04/</id>
    <published>2017-10-23T14:15:31.000Z</published>
    <updated>2017-11-04T12:27:13.218Z</updated>
    
    <content type="html"><![CDATA[<p>最近ubuntu官方发布了又一个LTS：ubuntu17.10。ubuntu17.10有着很大的变化，引入了很多的新的技术。ubuntu17.10是ubuntu第一个使用GNOME Shell作为默认桌面的版本。自己也想着感受一下ubuntu17.10引入的新技术，在这里翻译一篇从ubuntu16.04/ubuntu17.04升级到ubuntu17.10的教程。<a href="https://www.linuxbabe.com/ubuntu/upgrade-from-ubuntu-16-0417-04-to-ubuntu-17-10" target="_blank" rel="external">原本在这里</a></p><h2 id="从ubuntu16-4-17-04升级到ubuntu17-10的两种方式"><a href="#从ubuntu16-4-17-04升级到ubuntu17-10的两种方式" class="headerlink" title="从ubuntu16.4/17.04升级到ubuntu17.10的两种方式"></a>从ubuntu16.4/17.04升级到ubuntu17.10的两种方式</h2><p>官方发布最近发布Ubuntu17.10。此教程打算向你展示两种从Ubuntu16.04/17.04升级到Ubuntu17.10的方法：使用图像界面升级助手升级和使用命令行升级。</p><h3 id="1-使用图形界面升级助手升级到Ubuntu17-10"><a href="#1-使用图形界面升级助手升级到Ubuntu17-10" class="headerlink" title="1. 使用图形界面升级助手升级到Ubuntu17.10"></a>1. 使用图形界面升级助手升级到Ubuntu17.10</h3><p>首先，打开图形终端并且运行下面的命令更新现有的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt update &amp;&amp; sudo apt dist-upgrade</div></pre></td></tr></table></figure><p>请注意，在运行上面的命令的时候如果你已经安装了最新的内核，为了继续升级过程你需要重启系统，然后从Unity Dahs或者你自己的应用菜单打开<strong>Software &amp; Updates</strong></p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-16.04-to-ubuntu-17.10-01.png" alt=""></p><p>选择<strong>Updates</strong>选项卡并且在窗口的底部改变通知更新设置，将<strong>For long-term support version</strong>改变成<strong>For any new version</strong>.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-02.png" alt=""></p><p>然后点击关闭按钮。你会被要求输入密码以应用上面的改变，然后在终端中输入一下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ update-manager</div></pre></td></tr></table></figure><p>如果你正在使用的是Ubuntu17.04，你会发现软件已经是最新的，并且可以升级到<strong>Ubuntu 17.10</strong>了，点击<strong>Upgrade</strong>按钮。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/how-to-upgrade-from-Ubuntu-17.04-to-ubuntu-17.10-03.png" alt=""></p><p>如果你正在使用Ubuntu16.04，你会发现软件已经是最新的了，并且可以升级到<strong>Ubuntu 17.04</strong>了，点击<strong>Upgrade</strong>按钮。因为Ubuntu17.04还没有过期，Canonical始终会支持会Ubuntu17.04，所以在升级到Ubuntu17.10之前你需要先升级到Ubuntu17.04。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-04.png" alt=""></p><p>然后输入你的密码。输入密码后版本发布窗口将出现，请点击<strong>Upgrade</strong>按钮。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-05.png" alt=""></p><p>等待升级完成。如果你发现一些第三方的软件源是disabled的，只需要accept it，在升级后完成之后你可以re-enable这些软件源。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-06.png" alt=""></p><p>一旦升级完成之后，重启你的电脑。在登录界面，你可以点击cog图标选择使用Gnome,Gnome with X.org 或者Unity 桌面环境。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-07.png" alt=""></p><p>重启之后，在终端中运行下面的命令检查你当前的Ubuntu版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lsb_release -a</div></pre></td></tr></table></figure><p>如果你成功升级到Ubuntu17.10，终端将输出下面结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">No LSB modules are available</div><div class="line">Distributor ID: Ubuntu</div><div class="line">Description:    Ubuntu 17.10</div><div class="line">Release:        17.10</div><div class="line">Codename:       artful</div></pre></td></tr></table></figure><h3 id="2-使用命令行升级到Ubuntu17-10"><a href="#2-使用命令行升级到Ubuntu17-10" class="headerlink" title="2.使用命令行升级到Ubuntu17.10"></a>2.使用命令行升级到Ubuntu17.10</h3><p>你可以使用命令行升级Ubuntu桌面版本和服务器版本。首先，打开终端窗口并且运行下面的命令去升级现有的软件包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt update &amp;&amp; sudo apt dist-upgrade</div></pre></td></tr></table></figure><p>然后，确保你已经安装了<code>update-manager-core</code>，如果没有安装，输入下面命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt install update-manager-core</div></pre></td></tr></table></figure><p>接下来，使用nano或者你自己喜爱的文本编辑器修改配置文件<code>/etc/update-manager/release-upgrades</code>，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo nano　/etc/update-manager/release-upgrades</div></pre></td></tr></table></figure><p>在配置文件的底部，将<strong>Prompt</strong>的值从<code>lts</code>改成<code>normal</code>，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Prompt=normal</div></pre></td></tr></table></figure><p>保存并关闭文件。之后运行下面的命令开始升级。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">do</span>-release-upgrade</div></pre></td></tr></table></figure><p>如果你正在使用Ubuntu17.04的话，接下来的界面将引导你升级到Ubuntu17.10。如果你正在使用Ubuntu16.04，接下来的界面将引导你先升级到Ubuntu17.04，升级到Ubuntu17.04后再重复上面相同的步骤升级到Ubuntu17.10。一旦升级完成，重启你的电脑。输入下面的命令去check你的Ubuntu版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lsb-release -a</div></pre></td></tr></table></figure><p>如果你成功升级到Ubuntu17.10，将输出下面的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">No LSB modules are available.</div><div class="line">Distributor ID: Ubuntu</div><div class="line">Description:    Ubuntu 17.10</div><div class="line">Release:        17.10</div><div class="line">Codename:       artful</div></pre></td></tr></table></figure><p>升级完成之后，你需要去re-enable第三方的软件源，比如PPA，因为在升级过程中这些软件源被disable了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近ubuntu官方发布了又一个LTS：ubuntu17.10。ubuntu17.10有着很大的变化，引入了很多的新的技术。ubuntu17.10是ubuntu第一个使用GNOME Shell作为默认桌面的版本。自己也想着感受一下ubuntu17.10引入的新技术，在这里翻
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>送给她的第一个礼物</title>
    <link href="https://free-free.github.io/2017/10/21/myher-first-presents/"/>
    <id>https://free-free.github.io/2017/10/21/myher-first-presents/</id>
    <published>2017-10-21T12:42:37.000Z</published>
    <updated>2017-10-25T05:19:28.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我的她"><a href="#我的她" class="headerlink" title="我的她"></a>我的她</h3><p>可能老天太眷顾我了，终于让我遇到我的那个她。虽然不知道她心里怎么想的，但是我始终觉得她就是我最终的那个她了，活了二十几年，第一次有这种如此强烈、真真切切的感觉。她说她要到学校来找我，我被乐坏了，忍不住有点激动。于是就在想她第一次来找我，我要送一个礼物给她，想了很久始终不知道第一次见面送什么比较合适(不要说送鲜花，这显示不是我的style，第一次来送她鲜花略先太着急了)。好吧，这让我很扣脑袋，连续处于冥思苦想中不能自拔。说来也巧，有一天她在我和聊天的时候，发了一张可爱的猫猫照片给我，她说很喜欢这张照片，正好我也很喜欢这张照片(原因可能看了照片就懂了)。就在这时我似乎有想法了，可以将这张照片做成一个纪念品送给她。但是做成什么样的纪念品呢？这时灵光乍现，我想起了一次在公交车上看到将照片转印到木板的教程(当时就在想，以后有女朋友了一定要自己转印一个照片送给她)。很愉快的就这么决定了，就送一个转印的猫猫照片给她。在做之前，先展示一下她喜欢的这张猫猫照片，请看下图，老实说是不是很可爱^V^。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/myher-first-presents-01.jpg" alt=""></p><h3 id="送给她的第一个礼物"><a href="#送给她的第一个礼物" class="headerlink" title="送给她的第一个礼物"></a>送给她的第一个礼物</h3><p>要制作转印照片大体需要以下材料：</p><ul><li>要转印的照片(可以是激光打印的照片，或者普通打印纸打印的照片，我使用是打印纸打印的照片)</li><li>modpodge胶水(亮光即可)</li><li>原木切片(表面需要光滑)</li><li>海绵刷(用于涂抹modpodge胶水)</li><li>几个木条(用于制作支架)</li><li>湿的帕子(用于均匀打湿贴在木片的转印照片，我没找到帕子就直接找了一件不穿的短袖，让它发挥最后一点余热?V?)</li></ul><h4 id="1-制作前准备"><a href="#1-制作前准备" class="headerlink" title="1.制作前准备"></a>1.制作前准备</h4><p>照片转印之间要进行镜像处理，这样转印到木片上的照片才和原照片一样。由于电脑上没有装PS，在网上搜寻了一下，找到一个在线版的精简PS<a href="http://www.uupoop.com/" target="_blank" rel="external">uupoop</a>，个人感觉还不错。</p><ul><li><p>从电脑上载入照片</p><p><img src="http://oy4cno18k.bkt.clouddn.com/myher-first-presents-03.png" alt=""></p></li><li><p>点击图层菜单－&gt;选择水平翻转，即可完成图片的镜像处理</p><p><img src="http://oy4cno18k.bkt.clouddn.com/myher-first-presents-04.png" alt=""></p></li><li><p>将翻转之后的照片另存，至此照片的镜像的完成。翻转之后的照片如下</p><p><img src="http://oy4cno18k.bkt.clouddn.com/myher-first-presents-02.jpg" alt=""></p><p>​</p></li></ul><h4 id="2-制作过程"><a href="#2-制作过程" class="headerlink" title="2.制作过程"></a>2.制作过程</h4><p>由于已经把转印照片送给她了，在制作的过程并没有拍摄照片，所以下面只使用文字大体叙述一下制作的过程</p><ul><li>(1) : 使用海绵刷将modpodge胶水均匀涂抹在打印出来的照片正面</li><li>(2) : 将涂抹了modpodge的照片贴在转印的木板上，并使用银行轻轻刮表面，将照片与木板之间的空气挤出。然后将木板放在通风处，等待modpodge胶水完全晾干(大约3个小时以上)</li><li>(3) : 使用湿润的帕子盖在木板，等待10min使照片完全打湿，然后使用海绵刷轻轻将打湿的照片纸刮掉(一定要轻一点，我当时太用力将一部分图像都刮掉，很懵逼)直到能够在木板上清晰的看到转印的图片，放置通风处等待木板完全晾干</li><li>(4) : 使用海绵刷在转印好照片的木板上再次均匀涂抹modpodge胶水，最后等待胶水完成晾干。</li><li>(5) : 使用小木条制作一个类似画架的简易的小支架(请参考画架的结构)。</li><li>(6) : 到这一步转印照片已制作完成。至于包装盒怎么制作，完全看个人喜好(讲真，制作包装盒很痛苦。为了使包装盒好看并且颜色适合她，我丧心病狂地到学校外面礼物店和文具店买了制作礼物需要的各种材料(双面胶、拉花、礼物袋、礼物包装纸、直尺、胶棒)。在礼物店整整挑选了一个多小时才找到一款适合她颜色的礼物袋(黑色配白色斑点)，总共买了两个礼物袋，一个拆掉制作礼物盒，一个装礼物盒。感谢我工科男的手，花了一晚上终于做出一个我觉得还可以礼物盒，nice)。</li><li>制作完成。心里祈祷希望她能够喜欢这个礼物。</li></ul><h4 id="3-成果展示"><a href="#3-成果展示" class="headerlink" title="3. 成果展示"></a>3. 成果展示</h4><p>当时制作完成的时候，自己拍了一张实物照片，贴出来我以后欣赏。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/myher-first-presents-05.jpg" alt=""></p><h4 id="4-结果"><a href="#4-结果" class="headerlink" title="4. 结果"></a>4. 结果</h4><p>礼物她看了之后，觉得还不错，我当时高兴的想要起飞了。平生第一次做礼物送给女生，总体感觉还是很不错的^_^。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;我的她&quot;&gt;&lt;a href=&quot;#我的她&quot; class=&quot;headerlink&quot; title=&quot;我的她&quot;&gt;&lt;/a&gt;我的她&lt;/h3&gt;&lt;p&gt;可能老天太眷顾我了，终于让我遇到我的那个她。虽然不知道她心里怎么想的，但是我始终觉得她就是我最终的那个她了，活了二十几年，第一次有这
      
    
    </summary>
    
      <category term="我的她" scheme="https://free-free.github.io/categories/%E6%88%91%E7%9A%84%E5%A5%B9/"/>
    
    
      <category term="礼物" scheme="https://free-free.github.io/tags/%E7%A4%BC%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下绑定串口设备名</title>
    <link href="https://free-free.github.io/2017/10/20/binding-serialport-device-name/"/>
    <id>https://free-free.github.io/2017/10/20/binding-serialport-device-name/</id>
    <published>2017-10-20T10:44:39.000Z</published>
    <updated>2017-11-04T12:25:56.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-为什么我需要绑定串口设备名"><a href="#1-为什么我需要绑定串口设备名" class="headerlink" title="1. 为什么我需要绑定串口设备名"></a>1. 为什么我需要绑定串口设备名</h3><p>　　最近在ubuntu上使用串口进行通信时，由于硬件的原因需要不时的拔掉串口然后再重新插上，可是每次拔掉之后再重新插上去发现串口设备名由原来的<code>/dev/ttyUSB0</code>变为<code>/dev/ttyUSB1</code>，导致每次重新插上串口时都需要在程序中改变串口设备名，来回这么折腾搞得我很毛躁呀。这就是为什么我要去绑定串口设备名的原因，目的很单纯，被造的。</p><h3 id="2-怎样去绑定串口设备名"><a href="#2-怎样去绑定串口设备名" class="headerlink" title="2.  怎样去绑定串口设备名"></a>2.  怎样去绑定串口设备名</h3><h4 id="1-分析"><a href="#1-分析" class="headerlink" title="(1) 分析"></a>(1) 分析</h4><p>为什么每次重新插上同一串口设备的时候，在<code>/dev/</code>目录会是不同的设备文件名(<code>/dev/ttyUSB0</code>或者<code>/dev/ttyUSB1</code>)？由于串口设备属于hot-pluggable设备，每次插入的时注册设备节点分配的设备ID不同，导致同一设备在呈现出不同的设备名。那有没有办法将同一设备绑定为固定的设备文件名呢？答案是有的，这时就需要需求的<code>udev</code>的帮助了，<code>udev</code>是Linux下专门负责管理动态设备，它时基于一定的规则来加载动态设备的，那我们需要做的就是添加相应的规定即可。</p><h4 id="2-绑定串口设备名"><a href="#2-绑定串口设备名" class="headerlink" title="(2) 绑定串口设备名"></a>(2) 绑定串口设备名</h4><ul><li><p>查看当前的串口设备文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls /dev/ |grep ttyUSB</div></pre></td></tr></table></figure><p>输出:</p><p><img src="http://oy4cno18k.bkt.clouddn.com/binding-serialport-device-name-1.png" alt=""></p></li><li><p>查看串口信息，找出串口设备的<code>idVendor</code>和<code>idProduct</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ udevadm info --name /dev/ttyUSB0  --attribute-walk</div></pre></td></tr></table></figure><p>输出:</p><p><img src="http://oy4cno18k.bkt.clouddn.com/binding-serialport-device-name-2.png" alt=""></p></li><li><p>创建文件<code>/etc/udev/rules.d/usb-serialport.rules</code>，并在文件中添加一下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SUBSYSTEM==&quot;tty&quot;, ATTRS&#123;idVendor&#125;==&quot;1a86&quot;, ATTRS&#123;idProduct&#125;==&quot;7523&quot;, SYMLINK+=&quot;ch34-serial&quot;, MODE:=&quot;0777&quot;, GROUP:=&quot;dialout&quot;</div></pre></td></tr></table></figure><p><strong>SYMLINK</strong>即为你为该串口设备指定文件设备名，该设备每次插入时在<code>/dev</code>设备名都为<code>usb-serialport</code>.</p><p><strong>idVendor</strong>和<strong>idProduct</strong>改为你串口对应的vendorid和productid. <strong>MODE</strong>该设备的权限.<strong>GROUP</strong>为该设备所属的组。</p></li><li><p>将配置生效，并查看是否绑定成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo udevadm trigger</div><div class="line">$ ls -l /dev/ch34-serial</div></pre></td></tr></table></figure><p>输出：</p><p><img src="http://oy4cno18k.bkt.clouddn.com/binding-serialport-device-name3.png" alt=""></p><p>可以从输出看到<code>ch34-serial</code>只是真实设备名的一个连接，每次重新插入串口设备的时候，会自动创建<code>ch34-serial</code>链接到真正的设备文件名(可能是<code>/dev/ttyUSB0</code>或者<code>/dev/ttyUSB1</code>)。</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/boyixuanbo/article/details/77651109" target="_blank" rel="external">[1]ubuntu下绑定串口</a></p><p><a href="http://www.cnblogs.com/zxouxuewei/p/6140710.html" target="_blank" rel="external">[2]ubuntu绑定串口设备</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-为什么我需要绑定串口设备名&quot;&gt;&lt;a href=&quot;#1-为什么我需要绑定串口设备名&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么我需要绑定串口设备名&quot;&gt;&lt;/a&gt;1. 为什么我需要绑定串口设备名&lt;/h3&gt;&lt;p&gt;　　最近在ubuntu上使用串口
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python黑魔法－元类</title>
    <link href="https://free-free.github.io/2017/10/15/python-black-magic-metaclass/"/>
    <id>https://free-free.github.io/2017/10/15/python-black-magic-metaclass/</id>
    <published>2017-10-15T10:46:31.000Z</published>
    <updated>2017-10-23T08:32:19.219Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>　　python作为一门动态解释型语言，相比于静态编译语言有着相当丰富的语言特性，这些特性是你在静态语言中所无法想象的。以美学的观点来看，这些特性会让你的程序实现的非常优美和简洁，这也正好符合python所遵从的哲学思想。这些特性就像魔法一样，让你为它们感到深深的着迷。而这些魔法特性里还有一部分会让你感觉到比魔法还神奇，这就是传说中的黑魔法，比如，<strong>descriptor</strong> 、<strong>decorator</strong>、<strong>metaclass</strong>等。拥有了这些黑魔法就等于你拥有了Thor的hammer，无敌到爆表。好了，nb吹的差不多了^o^，让我们严肃起来，端庄的迎接我们今天的主角(<em>友情提示：该主角光芒有点强烈，请大家准备好墨镜，保护好自己的眼睛</em>)，ladies and gentlemen welcome our loading actor －<strong>metaclass</strong>。</p><h3 id="2-python-元类"><a href="#2-python-元类" class="headerlink" title="2. python 元类"></a>2. python 元类</h3><p>在python世界中一切皆对象，当谈到一个对象时必然地会涉及到这个对象的类。例如，字符串对象<code>&quot;dede&quot;</code>的类是<code>str</code>，列表对象<code>[1, 2, 4]</code>的类是<code>list</code>，字典对象<code>{&quot;key&quot;:&quot;value&quot;}</code>的类是<code>dict</code>，这些概念对于懂得面向对象的programmer来说都是常识。但是处在一切皆对象的python世界中，你有没有在某一时刻思考过，python中的类是否也是对象？我相信对于大多数pythoner来说，都会给出一个正确的回答。是的，在python的世界里类也是对象。那既然类也是对象，那就必然又会继续思考类的类是什么？其实在你思考类的类是什么时候，可能已经想到这个类的类应该会和普通的类一样，有一系列的method，比如<code>__init__</code>、<code>__call__</code>、<code>__new__</code>等，只是你不知道这个类的类应该叫什么名字。就在你纠结该给类的类取一个什么样的名字的时候，python世界的仲裁者出现了，他们告诉你这个类的类叫做元类。好了，从此天下太平，大家都知道了类的类就做元类。对，元类就是类的类，这个元类并没有什么特殊之处。你现在只需要改变一下你观察类时所在的位置。以前你是站在普通实例对象的位置去观察它的类，现在需要往前走一步站在类的位置去观察它的类－－元类。</p><p>　　现在我们对元类已经有了intuitive的认识，为了彻底搞清楚元类是什么，我们需要到python世界里去实地考察一下。我们先从常见的类下手，去看看这些类的类是什么。就像我们平常查看一个普通实例对象的类一样，需要使用<code>type</code>函数，我们在查看类的类时候，也需要使用<code>type</code>函数，那就让我们开始吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(str)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">type</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(dict)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(list)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(tuple)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(object)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></div></pre></td></tr></table></figure><p>当看到上面的输出的时候，有人可能就会产生疑问了。<code>type</code>不是一个函数吗？怎样现在又成一个类了？你以为是你长时间看电脑眼睛花了，你使劲的揉了眼睛之后，再仔细看它还是那样。没毛病，<code>type</code>就是这么的特殊，它是python世界中的万类之<code>元</code>，它是所有类的元类，包括它自己的元类也是它本身(八卦一下，你长这么大见过一个人的父亲就是他自己本身吗？没见过的话，说明你是正常的)，不信的话请看下面的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(type)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">type</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(type<span class="params">(type)</span>)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></div></pre></td></tr></table></figure><p>反正不管怎么说，你的三观肯定是被刷新了的，请直视自己的内心。好吧，既然<code>type</code>这么特殊，那它有什么怪癖呢？怪癖肯定是有的，让我们慢慢来分析一下。</p><ul><li><p>当<code>type</code>作为函数使用时，它的行为会根据传入参数个数的不同而不同。当传入一个参数时，<code>type</code>会返回传入参数的类型，如下面所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">"hello,python world!"</span>)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">([<span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>])</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">list</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(<span class="params">(<span class="number">4096</span>, )</span>)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(&#123;<span class="string">"name"</span>: <span class="string">"python"</span>, <span class="string">"birthday"</span>: <span class="string">"1999"</span>&#125;)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">dict</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(str)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></div></pre></td></tr></table></figure><p>当传入三个参数时，<code>type</code>会返回一个类，参数列表如下所示：</p><ul><li><p><strong>name</strong>  : 返回类的名字，必须是字符串</p></li><li><p><strong>bases</strong>  : 返回类的父类，必须是tuple，可以同时继承自多个父类</p></li><li><p><strong>attrs</strong>  : 返回类的属性，必须是dict，在类初始化的时候会添加到类的<code>__dict__</code>中。</p><p>整个调用原型是这样的<code>type(name, bases, attrs)</code>，具体示例请看下面。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">"ClassOne"</span>, (), &#123;&#125;) <span class="comment">#</span></div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">ClassOne</span>'&gt;</span></div><div class="line">&gt;&gt;&gt; ClassTwo = type("ClassTwo", (), &#123;"name": "python", "age": 18&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ClassTwo.name</div><div class="line"><span class="string">'python'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ClassTwo.age</div><div class="line"><span class="number">18</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(ClassTwo) <span class="comment">#并且ClassTwo的类也是'type'</span></div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">type</span>'&gt;</span></div></pre></td></tr></table></figure><p>看了上面示例之后，肯定有人心里就会有想法了。我们可以使用<code>type</code>来动态的创建类，这确实是一个很好的想法。于是有人真的将这个想法付诸于实践了，请看下面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gender</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._gender</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_gender</span><span class="params">(self, val)</span>:</span></div><div class="line">    self._gender = val</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._name</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self, val)</span>:</span></div><div class="line">    self._name = val</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">    self._name = name</div><div class="line">    self._gender = gender</div><div class="line">    </div><div class="line">Student = type(<span class="string">"Student"</span>, (object ), &#123;<span class="string">"get_gender"</span>: get_gender, <span class="string">"set_gender"</span>: \</div><div class="line">                                    set_gender, <span class="string">"get_name"</span>: get_name, <span class="string">"set_name"</span>:\</div><div class="line">                                    set_name, <span class="string">"__init__"</span>: init&#125;)</div><div class="line">Teacher = type(<span class="string">"Teacher"</span>,(object, ), &#123;<span class="string">"get_gender"</span>: get_gender, <span class="string">"set_gender"</span>: \</div><div class="line">                                     set_gender, <span class="string">"get_name"</span>: get_name, <span class="string">"set_name"</span>: \</div><div class="line">                                     set_name, <span class="string">"__init__"</span>: init&#125;)</div><div class="line">stu1 = Student(<span class="string">"John"</span>, <span class="string">"male"</span>)</div><div class="line">teacher1 = Teacher(<span class="string">"John_Father"</span>, <span class="string">"male"</span>)</div></pre></td></tr></table></figure><p>看了上面的代码，有没有人觉得瘆得慌，反正我是有点。</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.programiz.com/python-programming/methods/built-in/type" target="_blank" rel="external">[1] : Python type()</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h3&gt;&lt;p&gt;　　python作为一门动态解释型语言，相比于静态编译语言有着相当丰富的语言特性，这些特性是你在静态语言中所无法想象的。
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用元类实现Python 单例模式</title>
    <link href="https://free-free.github.io/2017/10/14/implementation-of-singleton-using-metaclass/"/>
    <id>https://free-free.github.io/2017/10/14/implementation-of-singleton-using-metaclass/</id>
    <published>2017-10-14T11:47:18.000Z</published>
    <updated>2017-11-05T11:32:01.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>　　上一篇博客介绍了<a href="/2017/10/11/implementation-of-singleton-using-decrator/">使用装饰器实现python单例模式</a>，这篇博客将介绍使用python的黑魔法－元类(Metaclass)来实现python的单例模式。对于知道元类的pythoner，使用元类实现单例模式应该是很简单的。然而对于不知道python元类的同行来说，理解起来可能要吃力一点，关于元类的介绍请看<a href="/2017/10/15/python-black-magic-metaclass/">这篇文档</a>。在Python中，创建一个对象的流程如下图：</p><p><img src="http://oy4cno18k.bkt.clouddn.com/implementation-of-singleton-using-new-method-01.png" alt=""></p><p>在创建对象时，由元类的<code>__call__</code>method负责调用类的<code>__new__</code>method，<code>__new__</code>method返回对象之后，z再调用<code>__call__</code>method来初始化对象，初始化完成之后，最后由元类的<code>__call__</code>方法返回对象。从上述流程可知，我们只需要在元类的<code>__call__</code>method返回同一对象，即可实现单例模式。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h3><h5 id="2-1-Environment"><a href="#2-1-Environment" class="headerlink" title="2.1 Environment"></a>2.1 Environment</h5><ul><li>ubuntu 16.04</li><li>python3.5</li></ul><h5 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonMeta</span><span class="params">(type)</span>:</span></div><div class="line">  </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="string">'_instance'</span> <span class="keyword">not</span> <span class="keyword">in</span> cls.__dict__:</div><div class="line">      cls._instance = super().__call__(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> cls._instance</div><div class="line">  </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object, metaclass=SingletonMeta)</span>:</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">pass</span> </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  obj1 = Singleton()</div><div class="line">  obj2 = Singleton()</div><div class="line">  print(id(obj1))</div><div class="line">  print(id(obj2))</div><div class="line">  print(obj1 == obj2)</div></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">140206360941400</span></div><div class="line"><span class="number">140206360941400</span></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">[1]Python单例模式的4种实现方法</a></p><p><a href="https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/" target="_blank" rel="external">[2]Understanding Python metaclasses</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h3&gt;&lt;p&gt;　　上一篇博客介绍了&lt;a href=&quot;/2017/10/11/implementation-of-singleton-usi
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python单例模式:装饰器版</title>
    <link href="https://free-free.github.io/2017/10/11/implementation-of-singleton-using-decrator/"/>
    <id>https://free-free.github.io/2017/10/11/implementation-of-singleton-using-decrator/</id>
    <published>2017-10-11T10:36:47.000Z</published>
    <updated>2017-11-04T12:26:16.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用装饰器实现python单例模式"><a href="#使用装饰器实现python单例模式" class="headerlink" title="使用装饰器实现python单例模式"></a>使用装饰器实现python单例模式</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>不同的编程语言所支持的语言特性不一样，导致实现单例模式的方式也各不相同。python作为一门动态语言，有很大的灵活性，实现的单例模式的方式也不尽相同，在这里总结一下python实现单例模式的方法，以便之后学习。本系列主要简述4种方式实现单例模式:</p><ul><li><strong>装饰器实现单例模式<a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external"><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">1</a></a></strong></li></ul><ul><li><strong>元类实现单例模式</strong></li><li><strong>__new__方法实现单例模式</strong></li><li><strong>共享__dict__实现单例模式</strong></li></ul><p>本节主要简述使用装饰器实现单例模式。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h3><p><strong>plateform</strong>:</p><ul><li>python3.5</li><li>ubuntu16.04</li></ul><p><strong>code</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></div><div class="line">    instances = &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</div><div class="line">            instances[cls] = cls(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> instances[cls]</div><div class="line">    <span class="keyword">return</span> singleton_wrapper</div><div class="line"></div><div class="line">  </div><div class="line"><span class="meta">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point2D</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span></div><div class="line">        self._x = x</div><div class="line">        self._y = y</div><div class="line">       </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._x</div><div class="line">      </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._y</div><div class="line">      </div><div class="line"><span class="meta">    @x.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, val)</span>:</span></div><div class="line">        self._x = val</div><div class="line">        </div><div class="line"><span class="meta">    @y.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(self, val)</span>:</span></div><div class="line">        self._y = val</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    p1 = Point2D(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">    p2 = Point2D(<span class="number">2</span>, <span class="number">10</span>)</div><div class="line">    print(id(p1))</div><div class="line">    print(id(p2))</div></pre></td></tr></table></figure><p><strong>output</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">139685819815696</div><div class="line">139685819815696</div></pre></td></tr></table></figure><p>由输出可知p1和p2为同一示例，即上述code完美实现了单例模式。</p><h3 id="3-code-辩证分析"><a href="#3-code-辩证分析" class="headerlink" title="3.code 辩证分析"></a>3.code 辩证分析</h3><p>在单例的装饰器函数中，使用词典变量<strong>instances</strong>来储存类的实例，并且<strong>singleton_wrapper</strong>与<strong>instances</strong>形成了闭包环境。当使用<code>类名(*args, **kwargs)</code>实例化时，实际上调用了<code>singleton_wrapper(*args, **kwargs)</code>来进行实例化。通过在<strong>singleton_wrapper</strong>判断<strong>instances</strong>中是否存在类的实例，如果不存在则创建实例，如果存在则直接中从<strong>instances</strong>返回实例。每调用一次<strong>singleton</strong>返回一个闭包，各个闭包之间并没有共享<strong>instances</strong>变量，所以<strong>instances</strong>变量中最多只储存了一个实例，为了验证此将code修改成如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></div><div class="line">    instances = &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</div><div class="line">            instances[cls] = cls(*args, **kwargs)</div><div class="line">        print(instances)</div><div class="line">        <span class="keyword">return</span> instances[cls]</div><div class="line">    <span class="keyword">return</span> singleton_wrapper</div><div class="line">  </div><div class="line"><span class="meta">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassOne</span><span class="params">(object)</span>:</span></div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">pass</span></div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="meta">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassTwo</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">  </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    obj1 = ClassOne()</div><div class="line">    obj2 = ClassTwo()</div></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;&lt;class <span class="string">'__main__.ClassOne'</span>&gt;: &lt;__main__.ClassOne object at 0x7f276523a828&gt;&#125;</div><div class="line">&#123;&lt;class <span class="string">'__main__.ClassTwo'</span>&gt;: &lt;__main__.ClassTwo object at 0x7f276523a940&gt;&#125;</div></pre></td></tr></table></figure><p>从以上输出可以看出，各个类闭包之间没有共享<strong>instances</strong>字典变量，这时小黄鸭问那为什么还需要一个字典变量来保存类的实例，何不直接使用一个普通的变量来保存类的实例呢?说的太多不如直接上code验证一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></div><div class="line">    instance = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</div><div class="line">            instance = cls(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> instance</div><div class="line">    <span class="keyword">return</span> singleton_wrapper</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="meta">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassOne</span><span class="params">(object)</span>:</span></div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    obj1 = ClassOne()</div></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"test.py"</span>, line 21, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    obj1 = ClassOne()</div><div class="line">  File <span class="string">"test.py"</span>, line 6, <span class="keyword">in</span> singleton_wrapper</div><div class="line">    <span class="keyword">if</span> not instance:</div><div class="line">UnboundLocalError: <span class="built_in">local</span> variable <span class="string">'instance'</span> referenced before assignment</div></pre></td></tr></table></figure><p>输出结果如上，在<strong>singleton_wrapper</strong>中访问<strong>instance</strong>变量时，遇到<em>UnboundLocalError</em>错误。在这里之所以抛出<em>UnboundLocalError</em>，和python的词法作用域有关。<strong>python内部函数只能访问全局变量不可对全局变量进行赋值修改；当在内部函数中修改同名的全局变量时，则python会认为它是一个局部变量；在内部函数中修改同名全局变量之前读取变量名时，会引发UnboundLocalError错误<a href="http://blog.csdn.net/my2010sam/article/details/17735159" target="_blank" rel="external"><a href="http://blog.csdn.net/my2010sam/article/details/17735159" target="_blank" rel="external">2</a></a>。</strong>说到这里结果好像已经很明显了，既然不能在内部函数中赋值修改一个全局变量，那我们只需要在修改的变量之前，加一个<strong>global</strong>关键字就能解决了。好吧，还是需要用code来验证一下</p><p><strong>note！！！：这里的赋值修改不包括list 或者dict的添加，删除等操作；这也证明我们一开始使用dict来存类实例，巧妙避过UnboundLocalError的问题，god, are you kidding me?</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></div><div class="line">    instance = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">global</span> instance</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</div><div class="line">            instance = cls(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> instance</div><div class="line">    <span class="keyword">return</span> singleton_wrapper</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="meta">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassOne</span><span class="params">(object)</span>:</span></div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    obj1 = ClassOne()</div></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"test.py"</span>, line 30, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    obj1 = ClassOne()</div><div class="line">  File <span class="string">"test.py"</span>, line 7, <span class="keyword">in</span> singleton_wrapper</div><div class="line">    <span class="keyword">if</span> not instance:</div><div class="line">NameError: name <span class="string">'instance'</span> is not defined</div></pre></td></tr></table></figure><p>what?又出错了，这次遇到了<em>NameError</em>，简直像是唐僧取经一难又一难。好吧，请不要放弃，让我们继续分析为什么会出现<em>NameError</em>。我们在<strong>singleton_wrapper</strong>中添加<strong>global</strong>关键字时就意味着直接去全局作用域搜索<strong>instance</strong>变量，但在全局作用域中并没有<strong>instance</strong>的存在，所以在这里出现<em>NameError</em>是再正常不过的。这时让我们重新回到上一步，看一下python的词法作用域的规则:</p><blockquote><p>python内部函数只能访问全局变量不可对全局变量进行赋值修改；</p><p>当在内部函数中修改同名的全局变量时，则python会认为它是一个局部变量；</p><p>在内部函数中修改同名全局变量之前读取变量名时，会引发UnboundLocalError错误。</p></blockquote><p>仔细研读和思考后，我们发现，<strong>instance</strong>对于<strong>singleton_wrapper</strong>并不是全局变量，而是extenal 变量。好吧我们以偏概全了，太大意了。事已到此好像已经没有思路，这个时候该是Google大神显神通的时候，在Google大神的帮助下，我们终于找到了一点思路,让我们穿到墙外去看一看这两篇文章吧<a href="https://eli.thegreenplace.net/2011/05/15/understanding-unboundlocalerror-in-python" target="_blank" rel="external"><a href="https://eli.thegreenplace.net/2011/05/15/understanding-unboundlocalerror-in-python" target="_blank" rel="external">3</a></a><a href="https://stackoverflow.com/questions/141642/what-limitations-have-closures-in-python-compared-to-language-x-closures" target="_blank" rel="external"><a href="https://stackoverflow.com/questions/141642/what-limitations-have-closures-in-python-compared-to-language-x-closures" target="_blank" rel="external">4</a></a>。这两篇文章指出：</p><blockquote><p>在closures中不能对external进行赋值修改;</p><p>当在closures中修改同名external变量之前读取变量名，会引发UnboundLocalError错误。</p></blockquote><p>现在可谓大彻大悟了，终于搞清楚了出现<em>UnboundLocalError</em>的真正原因了。那么问题来了，有没有办法可以赶跑这个该死的<em>UnboundLocalError</em>呢?办法肯定是有的，我们娓娓道来</p><p><strong>python2.x</strong>:</p><p>使用<strong>dict</strong>或者<strong>list</strong>是最明智的选择，也是唯一的办法。</p><p><strong>python3.x:</strong></p><ol><li><p>使用<strong>dict</strong>或者<strong>list</strong>储存类实例</p></li><li><p>在closures中访问修改external 变量之前，使用<strong>nonlocal</strong>对external变量进行声明，<strong>nonlocal</strong>关键字是python3.0之后加入的新关键字,说明如下:</p><blockquote><p>The <code>nonlocal</code> statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals. This is important because the default behavior for binding is to search the local namespace first. The statement allows encapsulated code to rebind variables outside of the local scope besides the global (module) scope.</p></blockquote></li></ol><p>经过我们不断思考与实践，结局还不赖。让我们把完整的code写下来吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton1</span><span class="params">(cls)</span>:</span></div><div class="line">    instances = &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</div><div class="line">            instances[cls] = cls(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> instances[cls]</div><div class="line">    <span class="keyword">return</span> singleton_wrapper</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton2</span><span class="params">(cls)</span>:</span></div><div class="line">    instance = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">nonlocal</span> instance</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</div><div class="line">            instance = cls(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> instance</div><div class="line">    <span class="keyword">return</span> singleton_wrapper</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="meta">@singleton1</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point2D</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span></div><div class="line">        self._x = x</div><div class="line">        self._y = y</div><div class="line">       </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._x</div><div class="line">      </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._y</div><div class="line">      </div><div class="line"><span class="meta">    @x.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, val)</span>:</span></div><div class="line">        self._x = val</div><div class="line">        </div><div class="line"><span class="meta">    @y.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(self, val)</span>:</span></div><div class="line">        self._y = val</div><div class="line"></div><div class="line">        </div><div class="line"><span class="meta">@singleton2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point3D</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>, z=<span class="number">0</span>)</span>:</span></div><div class="line">        self._x = x</div><div class="line">        self._y = y</div><div class="line">        self._z = z</div><div class="line">    </div><div class="line">  </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    p1 = Point2D(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">    p2 = Point2D(<span class="number">2</span>, <span class="number">10</span>)</div><div class="line">    print(id(p1))</div><div class="line">    print(id(p2))</div><div class="line">    p3 = Point3D(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</div><div class="line">    p4 = Point3D(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">    print(id(p3))</div><div class="line">    print(id(p4))</div></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">140322002741008</span></div><div class="line"><span class="number">140322002741008</span></div><div class="line"><span class="number">140322002741176</span></div><div class="line"><span class="number">140322002741176</span></div></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">[1]  Python单例模式的4种实现方法</a></p><p><a href="http://blog.csdn.net/my2010sam/article/details/17735159" target="_blank" rel="external">[2]  全局变量报错-UnboundLocalError: local variable ‘l’ referenced before assignment</a></p><p><a href="https://eli.thegreenplace.net/2011/05/15/understanding-unboundlocalerror-in-python" target="_blank" rel="external">[3]  Understanding UnboundLocalError in Python</a></p><p><a href="https://stackoverflow.com/questions/141642/what-limitations-have-closures-in-python-compared-to-language-x-closures" target="_blank" rel="external">[4]  What limitations have closures in Python compared to language X closures</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用装饰器实现python单例模式&quot;&gt;&lt;a href=&quot;#使用装饰器实现python单例模式&quot; class=&quot;headerlink&quot; title=&quot;使用装饰器实现python单例模式&quot;&gt;&lt;/a&gt;使用装饰器实现python单例模式&lt;/h2&gt;&lt;h3 id=&quot;1-概述&quot;
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>lua5.2获取函数可变参数</title>
    <link href="https://free-free.github.io/2017/10/11/access-variable-parameter-in-lua5-2/"/>
    <id>https://free-free.github.io/2017/10/11/access-variable-parameter-in-lua5-2/</id>
    <published>2017-10-11T10:22:41.000Z</published>
    <updated>2017-11-04T12:26:03.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lua-gt-5-2-可变参数获取"><a href="#Lua-gt-5-2-可变参数获取" class="headerlink" title="Lua(&gt;=5.2) 可变参数获取"></a>Lua(&gt;=5.2) 可变参数获取</h1><p>在Lua5.2之前，函数的可变参数在函数调用的时候自动获取并放在<strong>arg</strong>变量(table)中，要访问每一可变参数只需要通过<strong>arg[0]</strong>, <strong>arg[1]</strong>,…..<strong>arg[m]</strong>来获取，并且arg中还有一个域<strong>n</strong>负责记录可变参数的个数，示例代码如下所示：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myadd</span><span class="params">(a, b, ...)</span></span></div><div class="line">  <span class="keyword">local</span> sum = a + b</div><div class="line">  <span class="keyword">for</span> i = <span class="number">1</span>,<span class="built_in">arg</span>.n <span class="keyword">do</span></div><div class="line">    sum = sum + <span class="built_in">arg</span>[n]</div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="keyword">return</span> sum</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>在Lua5.2之后，需要自己手动获取可变参数，也没有了记录可变参数个数的域<strong>n</strong>，但可以通过长度运算符<strong>#</strong>获取参数个数，我想这也是为什么会去掉域<strong>n</strong>的原因，示例代码如下所示：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myadd</span><span class="params">(a, b, ...)</span></span></div><div class="line">  <span class="keyword">local</span> <span class="built_in">arg</span> = &#123;...&#125;</div><div class="line">  <span class="keyword">local</span> sum = a + b</div><div class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, #<span class="built_in">arg</span> <span class="keyword">do</span></div><div class="line">    sum = sum + <span class="built_in">arg</span>[i]</div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="keyword">return</span> sum</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lua-gt-5-2-可变参数获取&quot;&gt;&lt;a href=&quot;#Lua-gt-5-2-可变参数获取&quot; class=&quot;headerlink&quot; title=&quot;Lua(&amp;gt;=5.2) 可变参数获取&quot;&gt;&lt;/a&gt;Lua(&amp;gt;=5.2) 可变参数获取&lt;/h1&gt;&lt;p&gt;在Lua
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="lua" scheme="https://free-free.github.io/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>Say_hello</title>
    <link href="https://free-free.github.io/2017/09/15/say-hello/"/>
    <id>https://free-free.github.io/2017/09/15/say-hello/</id>
    <published>2017-09-15T10:41:29.000Z</published>
    <updated>2017-11-04T12:27:34.306Z</updated>
    
    <content type="html"><![CDATA[<p>say hello to me</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;say hello to me&lt;/p&gt;

      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="生活" scheme="https://free-free.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
