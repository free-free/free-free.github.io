<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Infinite.ft的博客</title>
  <icon>https://www.gravatar.com/avatar/9b6d3cb75e6e36a069f9079ea692bf81</icon>
  <subtitle>Hello</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://free-free.github.io/"/>
  <updated>2019-03-13T09:21:15.415Z</updated>
  <id>https://free-free.github.io/</id>
  
  <author>
    <name>infinite.ft</name>
    <email>infinite.ft@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Random Forest Regressor Implementation</title>
    <link href="https://free-free.github.io/2019/01/01/random-forest-regressor-implementation/"/>
    <id>https://free-free.github.io/2019/01/01/random-forest-regressor-implementation/</id>
    <published>2019-01-01T08:52:25.000Z</published>
    <updated>2019-03-13T09:21:15.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a><strong>一、前言</strong></h2><p>回归随机森林作为一种机器学习和数据分析领域常用且有效的算法，对其原理和代码实现过程的掌握是非常有必要的。为此，本文将着重介绍从零开始实现回归随机森林的过程，对于随机森林和决策树的相关理论原理将不做太深入的描述。本文的目的只是为了演示回归随机森林主要功能的具体实现过程，在实现过程中不会考虑代码性能，会更加注重代码可读性。</p><p>实现语言：<em>Python</em></p><p>依赖：<em>pandas, numpy</em></p><h2 id="二、原理介绍"><a href="#二、原理介绍" class="headerlink" title="二、原理介绍"></a><strong>二、原理介绍</strong></h2><p>随机森林属于Bagging类算法，而Bagging 又属于<a href="http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E9%259B%2586%25E6%2588%2590%25E5%25AD%25A6%25E4%25B9%25A0/3440721" target="_blank" rel="external">集成学习</a>一种方法（集成学习方法大致分为Boosting和Bagging方法，两个方法的不同请参考[10]），集成学习的大致思路是训练多个弱模型打包起来组成一个强模型，强模型的性能要比单个弱模型好很多（三个臭皮匠顶一个诸葛亮。注意：这里的弱和强是相对的），其中的弱模型可以是决策树、SVM等模型，在随机森林中，弱模型选用决策树。</p><p>在训练阶段，随机森林使用bootstrap采样从输入训练数据集中采集多个不同的子训练数据集来依次训练多个不同决策树；在预测阶段，随机森林将内部多个决策树的预测结果取平均得到最终的结果。本文主要介绍回归随机森林从零实现的过程，实现的RFR(回归随机森林)具有以下功能：</p><ul><li><strong>模型训练</strong></li><li><strong>模型数据预测</strong></li><li><strong>计算feature importance</strong></li></ul><p><strong>2.1 模型训练</strong></p><p><strong>2.1.1 基础理论</strong></p><p>本文实现的<strong>RFR</strong>是将多个<strong>二叉决策树（</strong>即<strong>CART，</strong>这也是<em>sklearn,spark</em>内部实现的模型<strong>）</strong>打包组合而成的，训练RFR便是训练多个二叉决策树。在训练二叉决策树模型的时候需要考虑<strong>怎样选择切分变量(特征）、切分点</strong>以及<strong>怎样衡量一个切分变量、切分点的好坏</strong>。针对于切分变量和切分点的选择，本实现采用穷举法，即遍历每个特征和每个特征的所有取值，最后从中找出最好的切分变量和切分点；针对于切分变量和切分点的好坏，一般以切分后节点的不纯度来衡量，即各个子节点不纯度的加权和\(G(x_i, v_{ij})\) ，其计算公式如下：</p><p><script type="math/tex">G(x_i, v_{ij}) = \frac{n_{left}}{N_s}H(X_{left}) +\frac{n_{right}}{N_s}H(X_{right})</script>                                               (2-1)</p><p>其中， \(x_i\) 为某一个切分变量， \(v_{ij}\) 为切分变量的一个切分值， \(n_{left}, n_{right},N_s\) 分别为切分后左子节点的训练样本个数、右子节点的训练样本个数以及当前节点所有训练样本个数， \(X_{left},X_{right}\)  分为左右子节点的训练样本集合， \(H(X)\) 为衡量节点不纯度的函数(impurity function/criterion)，分类和回归任务一般采用不同的不纯度函数，在分类和回归常采用的不纯度函数有以下四种：</p><p><img src="https://pic2.zhimg.com/80/v2-e5dec7d64aef5eca9ca54db57ffada75_hd.jpg" alt="img">图 1. 四种不同的impurity function</p><ul><li>备注1：</li></ul><p>Gini不纯度只适用于分类任务， \(X_m\) 为当前节点的训练样本集合， \(p_{mk}\) 为当前节点训练样本中目标变量取值\(p_{mk} = \frac{N_{mk}}{N_m}]\)出现的概率。</p><ul><li>备注2：</li></ul><p>信息熵只适用于分类任务， 其他同备注1。</p><ul><li>备注3</li></ul><p>MSE只适用于回归任务， \(\bar{y}_m\) 为当前节点样本目标变量的平均值。</p><ul><li>备注4</li></ul><p>MAE只适用于回归任务，\(\bar{y}_m\) 为当前节点样本目标变量的平均值。</p><ul><li>备注5</li></ul><p>在<em>sklearn</em>内部，<em>DecisionTreeClassifier, RandomForestClassifier</em>等基于决策树的分类模型默认使用<strong>*‘gini’*</strong>作为impurity function<em>，</em>也可通过<em>criterion</em>参数指定为<em>‘*<em>entropy’ *</em>；</em>而<em>DecisionTreeRegressor, RandomForestRegressor</em>等基于决策树的回归模型默认使用<strong>*‘mse’*</strong>作为impurity function<em>，</em>也可通过<em>criterion</em>参数指定为<strong>*‘mae’</strong>。*</p><p>决策树中某一节点的训练过程在数学等价于下面优化问题：</p><p><script type="math/tex">(x^*, v^*) = \operatorname{argmin}_{x, v}  G(x_i, v_{ij})</script>                                               (2-2)</p><p>即寻找\(G\) 最小的切分变量和切分点。</p><p><strong>在本文实现的回归随机森林中，\(H(X)\) 选用MSE，即针对某一切分点</strong></p><p><script type="math/tex">G(x, v) = \frac{1}{N_s} (\sum_{y_i \in X_{left}} (y_i - \bar{y}_{left})^2 +\sum_{y_j \in X_{right}} (y_j - \bar{y}_{right})^2 )</script>     (2-3)</p><p><strong>2.1.2 训练过程</strong></p><p><strong>RFR</strong>训练过程示意图如图2所示。</p><p>&lt;&gt;<img src="https://pic4.zhimg.com/80/v2-8123d3a064ff3e1ec60dec3fcd6c895b_hd.jpg" alt="img"></p><center>图 2. RFR训练示意图</center><p>说明：</p><ul><li>bootstrap[1]是对输入训练样本集合 \(D\)进行<strong>N</strong>次放回重复抽样得到样本集合 \(D_{b}\)(<strong>N</strong>一般等于\(D\) 的大小[2]，具体可以查看<em>sklearn</em>的实现<a href="http://link.zhihu.com/?target=https%3A//github.com/scikit-learn/scikit-learn/blob/55bf5d9/sklearn/ensemble/forest.py%23L101" target="_blank" rel="external">代码</a>)，这暗示了 <img src="https://www.zhihu.com/equation?tex=D" alt="D"> 中的某些样本会在 \(D_{b}\) 中重复出现多次。在对 \(D\) 进行bootstrap采样时，\(D\) 中每个样本会以<strong>63.3%</strong>的概率被抽中。为什么是<strong>63.3%</strong>？考虑N次放回重复抽样，每次抽样每个样本被选中的概率为 \(\frac{1}{N}\)，进行N次抽样，被选中概率为：</li></ul><p><script type="math/tex">(1- (1- \frac{1}{N})^N) =>(1- \lim_{N->\infty}{(1-\frac{1}{N})^N}) = (1- \frac{1}{e}) \simeq 0.633</script>      (2-4)</p><p>   具体可以参考[3-4]。</p><ul><li>subsample会根据输入参数<em>sample_sz</em>的大小从 \(D_{b}\)中采样<em>sample_sz</em>个样本组成subsample样本集合\(D_{bs}\)(在<em>sklearn</em>中，subsample大小就是输入训练样本集合 \(D\) 的大小N，不可以通过输入参数指定subsample的大小，详见<a href="http://link.zhihu.com/?target=https%3A//github.com/scikit-learn/scikit-learn/blob/master/sklearn/ensemble/forest.py%23L102" target="_blank" rel="external">这里</a>)。</li></ul><ul><li>为什么要进行bootstrap? 集成学习（包括随机森林）的目的是为了使用多个不同的子模型来增加最终模型预测结果的鲁棒性和稳定性(即减小方差)，如果多个子模型都采用同样的数据集训练，那么训练得出的子模型都是相同的，集成学习将变得没有意义，为了能从原输入训练数据集得到多个不同的数据集，需要使用bootstrap来从原数据集采样出不同的子数据集来训练子模型。</li></ul><p>图2中n个回归决策树的训练过程如图3所示。</p><p><img src="https://pic4.zhimg.com/80/v2-afdf542e209af2e0cd5ec5d9ea07956b_hd.jpg" alt="img">图 3. 回归决策树训练过程</p><p><strong>2.2 模型预测</strong></p><p>RFR的预测结果是由内部所有二叉决策树的预测结果取平均值得到的。二叉决策树的预测过程主要分为以下步骤：</p><ol><li>针对某一输入样本，从二叉决策树的根节点起，判断当前节点是否为叶子节点，如果是则返回叶子节点的预测值(即当前叶子中样本目标变量的平均值），如果不是则进入下一步；</li><li>根据当前节点的切分变量的和切分值，将样本中对应变量的值与节点的切分值对比。如果样本变量值小于等于当前节点切分值，则访问当前节点的左子节点；如果样本变量值大于当前节点切分值，则访问当前节点的右子节点；</li><li>循环步骤2，直到访问到叶子节点，并返回叶子节点的预测值。</li></ol><p><strong>2.3 计算feature importance</strong></p><p>特征的重要性表示特征对预测结果影响程度，某一特征重要性越大，表明该特征对预测结果的影响越大，重要性越小，表明该特征对预测结果越小。RFR中某一特征的重要性，是该特征在内部所有决策树重要性的平均值，而在决策树中，计算某一个特征的重要性可以采用以下三种方法：</p><p><strong>方法1</strong></p><p>步骤如下：</p><ul><li>使用训练数据训练模型；</li><li>计算训练数据在模型上依据某一metric的score，记为 \(s_o\) （在回归中，可以选用r2）；</li><li>遍历训练数据集中的每一个feature，每次在原训练数据集的基础上将对应的feature进行shuffle操作，然后使用模型得到shuffle后数据集的score，记为 \(s_i\) ，最后通过 \(\frac{s_o - s_i}{s_o}\)计算出第 \(i\) 个feature的重要性。</li></ul><p><strong>方法2</strong></p><p>如果一个feature很重要，那么从数据集中去除该feature后，模型的prediction error会增大；相反，如果一个feature不重要，那么从数据集中去除后，模型的prediction error不会变化太大。该方法的步骤如下：</p><ul><li>使用原数据集训练模型，并评估模型在训练数据集上的prediction error，记为 \(e_o\);</li><li>遍历训练数据集中的每一个feature，每次从原训练数据集的基础上去除该feature，然后使用得到数据集训练模型，最终计算出prediction error，记为 \(e_i\) ，最后通过 \(\frac{e_o - e_i}{e_o}\) 计算出第 \(i\) 个feature的重要性。</li></ul><p>该方法和方法1有点类似，但该方法在计算每个feature的重要性的时候都需要重新训练模型，会增加额外的计算量，在实际应用一般不采用该方法。</p><p><strong>方法3</strong></p><p>该方法是sklearn内部树模型计算feature重要性时采用的方法。即某一节点 \(k\) 的重要性为 </p><p><script type="math/tex">n_k = w_k * G_k - w_{left} * G_{left} - w_{right} * G_{right}</script>                (2-5)</p><p>其中， \(w_k,w_{left}, w_{right} \) 分别为节点 \(k\) 以及其左右子节点中训练样本个数与总训练样本数目的比例，  分为为节点  以及其左右子节点的不纯度。知道每一个节点的重要性之后，即可通过公式(2-6)得出某一feature的重要性。</p><p><script type="math/tex">f_i = \frac{\sum_{j \in nodes \space split \space on \space feature \space i } n_j}{\sum_{k \in all \space nodes}{ n_k}}</script>                                   (2-6)</p><p>为了使所有feature的重要性加起来等于1，需要每一feature的重要性进行normalization，即公式(2-7)</p><p><script type="math/tex">f_{ni} = \frac{f_i}{\sum_{j \in all \space features} f_j}</script>                                                    (2-7)</p><p>方法3在<em>sklearn</em>中的实现，请查看<a href="http://link.zhihu.com/?target=https%3A//github.com/scikit-learn/scikit-learn/blob/18cdaa69c14a5c84ab03fce4fb5dc6cd77619e35/sklearn/tree/_tree.pyx%23L1056" target="_blank" rel="external">_tree.pyx</a>。</p><p>在本文实现的RFR中，同时实现了<strong>方法1</strong>和<strong>方法3</strong>。</p><h2 id="三、回归随机森林实现"><a href="#三、回归随机森林实现" class="headerlink" title="三、回归随机森林实现"></a><strong>三、回归随机森林实现</strong></h2><p><strong>3.1 代码</strong></p><p>代码有点长，不想看的可以直接跳过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, cpu_count</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RFRegressor</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""Random Forest Regressor</span></div><div class="line"><span class="string">    """</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n_trees, sample_sz, min_leaf_sz=<span class="number">5</span>, n_jobs=None, max_depth=None)</span>:</span></div><div class="line">        self._n_trees = n_trees</div><div class="line">        self._sample_sz = sample_sz</div><div class="line">        self._min_leaf_sz = min_leaf_sz</div><div class="line">        self._n_jobs = n_jobs</div><div class="line">        self._max_depth = max_depth</div><div class="line">        self._trees = [self._create_tree() <span class="keyword">for</span> i <span class="keyword">in</span> range(self._n_trees)]</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_sample_data</span><span class="params">(self, bootstrap=True)</span>:</span></div><div class="line">        <span class="string">"""Generate training data for each underlying decision tree</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        Parameters</span></div><div class="line"><span class="string">        ----------</span></div><div class="line"><span class="string">        bootstrap: boolean value, True/False</span></div><div class="line"><span class="string">            The default value is True, it would bootstrap sample from </span></div><div class="line"><span class="string">            input training data. If False, the exclusive sampling will</span></div><div class="line"><span class="string">            be performed.</span></div><div class="line"><span class="string">            </span></div><div class="line"><span class="string">        Returns</span></div><div class="line"><span class="string">        -------</span></div><div class="line"><span class="string">        idxs: array-like object</span></div><div class="line"><span class="string">            Return the indices of sampled data from input training data</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">if</span> bootstrap:</div><div class="line">            idxs = np.random.choice(len(self._X), self._sample_sz)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            idxs = np.random.permutation(len(self._X))[:self._sample_sz]</div><div class="line">        <span class="keyword">return</span> idxs</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_tree</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Build decision treee</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        Returns</span></div><div class="line"><span class="string">        -------</span></div><div class="line"><span class="string">        dtree : DTreeRegressor object</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">return</span> DTreeRegressor(self._min_leaf_sz, self._max_depth)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_single_tree_fit</span><span class="params">(self, tree)</span>:</span></div><div class="line">        <span class="string">"""Fit the single underlying decision tree</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        Parameters</span></div><div class="line"><span class="string">        ----------</span></div><div class="line"><span class="string">        tree : DTreeRegressor object</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        Returns</span></div><div class="line"><span class="string">        -------</span></div><div class="line"><span class="string">        tree : DTreeRegressor object</span></div><div class="line"><span class="string">        """</span></div><div class="line">        sample_idxs = self._get_sample_data()</div><div class="line">        <span class="keyword">return</span> tree.fit(self._X.iloc[sample_idxs], self._y[sample_idxs])</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        <span class="string">"""Train a forest regressor of trees from the training set(x, y)</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        Parameters</span></div><div class="line"><span class="string">        ----------</span></div><div class="line"><span class="string">        x : DataFrame,</span></div><div class="line"><span class="string">            The training input samples.</span></div><div class="line"><span class="string">            </span></div><div class="line"><span class="string">        y : Series or array-like object</span></div><div class="line"><span class="string">            The target values.</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        """</span></div><div class="line">        self._X = x</div><div class="line">        self._y = y</div><div class="line">        <span class="keyword">if</span> self._n_jobs:</div><div class="line">            self._trees = self._parallel(self._trees, self._single_tree_fit, self._n_jobs)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">for</span> tree <span class="keyword">in</span> self._trees:</div><div class="line">                self._single_tree_fit(tree)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="string">"""Predict target values using trained model</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        Parameters</span></div><div class="line"><span class="string">        ---------</span></div><div class="line"><span class="string">        x : DataFrame or array-like object</span></div><div class="line"><span class="string">           input samples</span></div><div class="line"><span class="string">           </span></div><div class="line"><span class="string">        Returns</span></div><div class="line"><span class="string">        -------</span></div><div class="line"><span class="string">        ypreds : array-like object</span></div><div class="line"><span class="string">            predicted target values</span></div><div class="line"><span class="string">        """</span></div><div class="line">        all_tree_preds = np.stack([tree.predict(x) <span class="keyword">for</span> tree <span class="keyword">in</span> self._trees]) </div><div class="line">        <span class="keyword">return</span> np.mean(all_tree_preds, axis=<span class="number">0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_parallel</span><span class="params">(self, trees, fn, n_jobs=<span class="number">1</span>)</span>:</span></div><div class="line">        <span class="string">"""Parallel jobs execution</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        Parameters</span></div><div class="line"><span class="string">        ----------</span></div><div class="line"><span class="string">        trees : list-like object</span></div><div class="line"><span class="string">            a list-like object contains all underlying trees</span></div><div class="line"><span class="string">            </span></div><div class="line"><span class="string">        fn : function-like object</span></div><div class="line"><span class="string">            map function</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        n_jobs : integer</span></div><div class="line"><span class="string">            The number of jobs.</span></div><div class="line"><span class="string">            </span></div><div class="line"><span class="string">        Returns</span></div><div class="line"><span class="string">        -------</span></div><div class="line"><span class="string">        result : list-like object</span></div><div class="line"><span class="string">            a list-like result object for each call of map function `fn`</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            workers = cpu_count()</div><div class="line">        <span class="keyword">except</span> NotImplementedError:</div><div class="line">            workers = <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> n_jobs:</div><div class="line">            workders = n_jobs</div><div class="line">        pool = Pool(processes=workers)</div><div class="line">        result = pool.map(fn, trees)</div><div class="line">        <span class="keyword">return</span> list(result)</div><div class="line">    </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feature_importances_</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Calculate feature importance</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        Returns</span></div><div class="line"><span class="string">        -------</span></div><div class="line"><span class="string">        self._feature_importances : array-like object</span></div><div class="line"><span class="string">            the importance score of each feature </span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_feature_importances'</span>):</div><div class="line">            norm_imp = np.zeros(len(self._X.columns))</div><div class="line">            <span class="keyword">for</span> tree <span class="keyword">in</span> self._trees:</div><div class="line">                t_imp = tree.calc_feature_importance()</div><div class="line">                norm_imp = norm_imp + t_imp / np.sum(t_imp)</div><div class="line">            self._feature_importances = norm_imp / self._n_trees</div><div class="line">        <span class="keyword">return</span> self._feature_importances</div><div class="line">       </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feature_importances_extra</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Another method to calculate feature importance</span></div><div class="line"><span class="string">        """</span></div><div class="line">        norm_imp = np.zeros(len(self._X.columns))</div><div class="line">        <span class="keyword">for</span> tree <span class="keyword">in</span> self._trees:</div><div class="line">            t_imp = tree.calc_feature_importance_extra()</div><div class="line">            norm_imp = norm_imp + t_imp / np.sum(t_imp)</div><div class="line">        norm_imp = norm_imp / self._n_trees</div><div class="line">        imp = pd.DataFrame(&#123;<span class="string">'col'</span>:self._X.columns, <span class="string">'imp'</span>:norm_imp&#125;).sort_values(<span class="string">'imp'</span>, ascending=<span class="keyword">False</span>)</div><div class="line">        <span class="keyword">return</span> imp</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DTreeRegressor</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, min_leaf_sz, max_depth=None)</span>:</span></div><div class="line">        self._min_leaf_sz = min_leaf_sz</div><div class="line">        self._split_point = <span class="number">0</span></div><div class="line">        self._split_col_idx = <span class="number">0</span></div><div class="line">        self._score = float(<span class="string">'inf'</span>)</div><div class="line">        self._sample_sz = <span class="number">0</span></div><div class="line">        self._left_child_tree = <span class="keyword">None</span></div><div class="line">        self._right_child_tree = <span class="keyword">None</span></div><div class="line">        self._feature_importances = []</div><div class="line">        self._node_importance= <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> max_depth <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            max_depth = max_depth - <span class="number">1</span></div><div class="line">        self._max_depth = max_depth</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        self._X = x</div><div class="line">        self._y = y</div><div class="line">        self._col_names = self._X.columns</div><div class="line">        self._feature_importances = np.zeros(len(self._col_names))</div><div class="line">        self._sample_sz = len(self._X)</div><div class="line">        self._val = np.mean(self._y)</div><div class="line">        <span class="keyword">if</span> self._max_depth <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> self._max_depth &lt; <span class="number">2</span>:</div><div class="line">            <span class="keyword">return</span> self</div><div class="line">        self._find_best_split()</div><div class="line">        <span class="keyword">return</span> self</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_calc_mse_inpurity</span><span class="params">(self, y_squared_sum, y_sum, n_y)</span>:</span></div><div class="line">        <span class="string">"""Calculate Mean Squared Error impurity</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        This is just the recursive version for calculating variance</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        Parameters</span></div><div class="line"><span class="string">        ----------</span></div><div class="line"><span class="string">        y_squared_sum: float or int , the sum  of y squared </span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        y_sum: float or int , the sum of y value</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        n_y: int, the number of samples</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        Returns</span></div><div class="line"><span class="string">        -------</span></div><div class="line"><span class="string">        </span></div><div class="line"><span class="string">        """</span></div><div class="line">        dev = (y_squared_sum / n_y) - (y_sum / n_y) ** <span class="number">2</span></div><div class="line">        <span class="keyword">return</span> dev</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_find_best_split</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> col_idx <span class="keyword">in</span> range(len(self._col_names)):</div><div class="line">            self._find_col_best_split_point(col_idx)</div><div class="line">            </div><div class="line">        self._feature_importances[self._split_col_idx] = self._node_importance</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> self.is_leaf:</div><div class="line">            <span class="keyword">return</span> </div><div class="line">        </div><div class="line">        left_child_sample_idxs = np.nonzero(self.split_col &lt;= self.split_point)[<span class="number">0</span>]</div><div class="line">        right_child_sample_idxs = np.nonzero(self.split_col &gt; self.split_point)[<span class="number">0</span>]</div><div class="line">        </div><div class="line">        self._left_child_tree = (DTreeRegressor(self._min_leaf_sz, self._max_depth)</div><div class="line">                                 .fit(self._X.iloc[left_child_sample_idxs], self._y[left_child_sample_idxs]))</div><div class="line">        self._right_child_tree = (DTreeRegressor(self._min_leaf_sz, self._max_depth)</div><div class="line">                                  .fit(self._X.iloc[right_child_sample_idxs], self._y[right_child_sample_idxs]))</div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_find_col_best_split_point</span><span class="params">(self, col_idx)</span>:</span></div><div class="line">        x_col = self._X.values[:, col_idx]</div><div class="line">        sorted_idxs = np.argsort(x_col)</div><div class="line">        sorted_x_col = x_col[sorted_idxs]</div><div class="line">        sorted_y =  self._y[sorted_idxs]</div><div class="line">        </div><div class="line">        lchild_n_samples = <span class="number">0</span></div><div class="line">        lchild_y_sum  = <span class="number">0.0</span></div><div class="line">        lchild_y_square_sum = <span class="number">0.0</span></div><div class="line"></div><div class="line">        rchild_n_samples = self._sample_sz</div><div class="line">        rchild_y_sum = sorted_y.sum()</div><div class="line">        rchild_y_square_sum = (sorted_y ** <span class="number">2</span>).sum()</div><div class="line">        </div><div class="line">        node_y_sum = rchild_y_sum</div><div class="line">        node_y_square_sum = rchild_y_square_sum </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, self._sample_sz - self._min_leaf_sz):</div><div class="line">            xi, yi = sorted_x_col[i], sorted_y[i]</div><div class="line">            </div><div class="line">            rchild_n_samples -= <span class="number">1</span></div><div class="line">            rchild_y_sum -= yi</div><div class="line">            rchild_y_square_sum -= (yi ** <span class="number">2</span>)</div><div class="line">            </div><div class="line">            lchild_n_samples  +=  <span class="number">1</span></div><div class="line">            lchild_y_sum += yi</div><div class="line">            lchild_y_square_sum += (yi ** <span class="number">2</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> i &lt; self._min_leaf_sz  <span class="keyword">or</span> xi == sorted_x_col[i+<span class="number">1</span>]:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            </div><div class="line">            lchild_impurity = self._calc_mse_inpurity(lchild_y_square_sum,</div><div class="line">                                                      lchild_y_sum, lchild_n_samples)</div><div class="line">            rchild_impurity = self._calc_mse_inpurity(rchild_y_square_sum,</div><div class="line">                                                      rchild_y_sum, rchild_n_samples)</div><div class="line">            split_score  = (lchild_n_samples * lchild_impurity </div><div class="line">                            + rchild_n_samples * rchild_impurity) / self._sample_sz</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> split_score &lt; self._score:</div><div class="line">                self._score = split_score</div><div class="line">                self._split_point = xi</div><div class="line">                self._split_col_idx = col_idx</div><div class="line">                self._node_importance = (self._sample_sz </div><div class="line">                    * (self._calc_mse_inpurity(node_y_square_sum, node_y_sum, self._sample_sz) </div><div class="line">                    - split_score))</div><div class="line">                    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="keyword">if</span> type(x) == pd.DataFrame:</div><div class="line">            x = x.values</div><div class="line">        <span class="keyword">return</span> np.array([self._predict_row(row) <span class="keyword">for</span> row <span class="keyword">in</span> x])</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_predict_row</span><span class="params">(self, row)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.is_leaf:</div><div class="line">            <span class="keyword">return</span> self._val</div><div class="line">        t = (self._left_child_tree <span class="keyword">if</span> row[self._split_col_idx] </div><div class="line">             &lt;= self.split_point <span class="keyword">else</span> self._right_child_tree)</div><div class="line">        <span class="keyword">return</span> t._predict_row(row)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        pr =  <span class="string">f'sample: <span class="subst">&#123;self._sample_sz&#125;</span>, value: <span class="subst">&#123;self._val&#125;</span>\r\n'</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_leaf:</div><div class="line">            pr += <span class="string">f'split column: <span class="subst">&#123;self.split_name&#125;</span>, \</span></div><div class="line"><span class="string">                split point: <span class="subst">&#123;self.split_point&#125;</span>, score: <span class="subst">&#123;self._score&#125;</span> '</span></div><div class="line">        <span class="keyword">return</span> pr</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc_feature_importance</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.is_leaf:</div><div class="line">            <span class="keyword">return</span> self._feature_importances</div><div class="line">        <span class="keyword">return</span> (self._feature_importances </div><div class="line">                + self._left_child_tree.calc_feature_importance()</div><div class="line">                + self._right_child_tree.calc_feature_importance()</div><div class="line">               )</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc_feature_importance_extra</span><span class="params">(self)</span>:</span></div><div class="line">        imp = []</div><div class="line">        o_preds = self.predict(self._X.values)</div><div class="line">        o_r2 = metrics.r2_score(self._y, o_preds)</div><div class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> self._col_names:</div><div class="line">            tmp_x = self._X.copy()</div><div class="line">            shuffle_col = tmp_x[col].values</div><div class="line">            np.random.shuffle(shuffle_col)</div><div class="line">            tmp_x.loc[:,col] = shuffle_col</div><div class="line">            tmp_preds = self.predict(tmp_x.values)</div><div class="line">            tmp_r2 = metrics.r2_score(self._y, tmp_preds)</div><div class="line">            imp.append((o_r2 - tmp_r2))</div><div class="line">        imp = imp / np.sum(imp)</div><div class="line">        <span class="keyword">return</span> imp</div><div class="line">    </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._col_names[self._split_col_idx]</div><div class="line">    </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_col</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._X.iloc[:, self._split_col_idx]</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._score == float(<span class="string">'inf'</span>)</div><div class="line">    </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_point</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._split_point</div></pre></td></tr></table></figure><p><strong>3.2 测试</strong></p><p><strong>训练与预测：</strong></p><p>&lt;&gt;<img src="https://pic4.zhimg.com/80/v2-406efb4b5b5a3f69b16f36906636c5b3_hd.jpg" alt="img"></p><p>使用<strong>*sklearn*</strong>内部的<strong>*RandomForestRegressor*</strong>的结果：</p><p>&lt;&gt;<img src="https://pic2.zhimg.com/80/v2-cf23c1651fd18b722a36cee8aa3100cd_hd.jpg" alt="img"></p><p>需要注意的是，上面两次训练的样本不同，所以和实际情况有点出入，但大体趋势是对。</p><p><strong>feature importance:</strong></p><p>RFRegressor采用<strong>方法3</strong>计算的feature重要性：</p><p>&lt;&gt;<img src="https://pic2.zhimg.com/80/v2-3b36ab778879f5d834b34d9ce00b5759_hd.jpg" alt="img"></p><p>RandomForestRegressor计算的feature重要性：</p><p>&lt;;<img src="https://pic4.zhimg.com/80/v2-9b7b78ebcb92e6496a80d66f1ddf3dcb_hd.jpg" alt="img"></p><p>RFRegressor采用<strong>方法1</strong>计算的feature重要性：</p><p>&lt;&gt;<img src="https://pic1.zhimg.com/80/v2-8661db1ed6e8b314ec77fed8d082aaa0_hd.jpg" alt="img"></p><h2 id="参考与荐读："><a href="#参考与荐读：" class="headerlink" title="参考与荐读："></a><strong>参考与荐读：</strong></h2><p><a href="http://link.zhihu.com/?target=https%3A//www.statisticshowto.datasciencecentral.com/bootstrap-sample/" target="_blank" rel="external">[1] Bootstrap Sample: Definition, Example</a></p><p><a href="http://link.zhihu.com/?target=https%3A//stats.stackexchange.com/questions/347818/number-of-samples-per-tree-in-a-random-forest" target="_blank" rel="external">[2] Number of Samples per-Tree in a Random Forest</a></p><p><a href="http://link.zhihu.com/?target=https%3A//stats.stackexchange.com/questions/88980/why-on-average-does-each-bootstrap-sample-contain-roughly-two-thirds-of-observat%3Flq%3D1" target="_blank" rel="external">[3] Why on average does each bootstrap sample contain roughly two thirds of observations?</a></p><p><a href="http://link.zhihu.com/?target=https%3A//stats.stackexchange.com/questions/173520/random-forests-out-of-bag-sample-size" target="_blank" rel="external">[4] Random Forests out-of-bag sample size</a></p><p><a href="http://link.zhihu.com/?target=https%3A//www.stat.berkeley.edu/%7Ebreiman/RandomForests/cc_home.htm" target="_blank" rel="external">[5] Random Forests Leo Breiman and Adele Cutler</a></p><p><a href="http://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/48239242/why-is-random-forest-with-a-single-tree-much-better-than-a-decision-tree-classif/48239653%2348239653" target="_blank" rel="external">[6] Why is Random Forest with a single tree much better than a Decision Tree classifier?</a></p><p><a href="http://link.zhihu.com/?target=https%3A//jvns.ca/blog/2016/01/02/winning-the-bias-variance-tradeoff/" target="_blank" rel="external">[7] Winning the bias-variance tradeoff</a></p><p><a href="http://link.zhihu.com/?target=https%3A//stats.stackexchange.com/questions/33948/subsample-bootstrapping" target="_blank" rel="external">[8] subsample-bootstrapping</a></p><p><a href="http://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/35827446/how-can-scikit-learn-random-forest-sub-sample-size-may-be-equal-to-original-trai" target="_blank" rel="external">[9] How can SciKit-Learn Random Forest sub sample size may be equal to original training data size?</a></p><p><a href="http://link.zhihu.com/?target=https%3A//quantdare.com/what-is-the-difference-between-bagging-and-boosting/" target="_blank" rel="external">[10] the difference between bagging and boosting</a></p><p><a href="http://link.zhihu.com/?target=https%3A//medium.com/%40srnghn/the-mathematics-of-decision-trees-random-forest-and-feature-importance-in-scikit-learn-and-spark-f2861df67e3" target="_blank" rel="external">[11] The Mathematics of Decision Trees, Random Forest and Feature Importance in Scikit-learn and Spark</a></p><p><a href="http://link.zhihu.com/?target=https%3A//scikit-learn.org/stable/modules/tree.html%23tree-algorithms-id3-c4-5-c5-0-and-cart" target="_blank" rel="external">[12] Sklearn  Decision Trees documentation</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;回归随机森林作为一种机器学习和数据分析领域常用且有效的算法，对其原理和代码实现过程的掌握是
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="machine learning" scheme="https://free-free.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Feature Selection Tool Feature-Selector</title>
    <link href="https://free-free.github.io/2018/12/13/feature-selection-tool-feature-selector/"/>
    <id>https://free-free.github.io/2018/12/13/feature-selection-tool-feature-selector/</id>
    <published>2018-12-13T14:25:40.000Z</published>
    <updated>2019-03-12T14:35:27.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a><strong>1. 前言</strong></h2><p>上一篇文章简要介绍了简谈ML模型特征选取的方法[6]，并使用sklearn提供的特征选择算法进行了demo性的演示，这篇文章主要介绍一个基础的特征选择工具：feature-selector[7]。feature-selector是由Feature Labs的一名数据科学家williamkoehrsen写的特征选择库。feature-selector主要对以下类型的特征进行选择：</p><ul><li>具有高missing-values百分比的特征</li><li>具有高相关性的特征</li><li>对模型预测结果无贡献的特征（即zero importance）</li><li>对模型预测结果只有很小贡献的特征（即low importance）</li><li>具有单个值的特征（即数据集中该特征取值的集合只有一个元素）</li></ul><p>从上面可以看出feature-selector确实是非常基础的特征选择工具，正因为非常的基础，所以才非常的常用（这也是为什么williamkoehrsen要写这个特征选择库的原因），在拿到一个数据集的时候，往往都需要将上述类型的特征从数据集中剔除掉。针对上面五种类型的特征，feature-selector分别提供以下五个函数来对此处理：</p><ul><li>identify_missing(*)</li><li>identify_collinear(*)</li><li>identify_zero_importance(*)</li><li>identify_low_importance(*)</li><li>identify_single_unique(*)</li></ul><p>接下来看看feature-selector具体使用方法。</p><h2 id="2-数据集准备"><a href="#2-数据集准备" class="headerlink" title="2. 数据集准备"></a><strong>2. 数据集准备</strong></h2><p>在这里使用kaggle上<a href="http://link.zhihu.com/?target=https%3A//www.kaggle.com/c/home-credit-default-risk/data" target="_blank" rel="external">Home Credit Default Risk Competition</a>的训练数据集。原训练数据集稍微有点大，30+万行(150+MB)，pandas导入数据都花了一点时间，为此我从原数据集中采样了1万+行数据作为此次练习的数据集，下载请戳<a href="http://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1G7eB09RVMd6hdIQbdOsxXw" target="_blank" rel="external">这里</a>，下载原数据集请戳<a href="http://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1K1vMVIBTsyighRxSXsk7Kw" target="_blank" rel="external">这里</a>。数据集采样代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">data = pd.read_csv(<span class="string">'./appliation_train.csv'</span>)</div><div class="line"><span class="comment"># 从原数据中采样5%的数据</span></div><div class="line">sample = data.sample(frac=<span class="number">0.05</span>)</div><div class="line"><span class="comment"># 重新创建索引</span></div><div class="line">sample.reset_index(drop=<span class="keyword">True</span>)</div><div class="line"><span class="comment"># 将采样数据存到'application_train_sample.csv'文件中</span></div><div class="line">sample.to_csv(<span class="string">'./application_train_sample.csv'</span>)</div></pre></td></tr></table></figure><h2 id="3-feature-selector用法"><a href="#3-feature-selector用法" class="headerlink" title="3.feature-selector用法"></a><strong>3.feature-selector用法</strong></h2><p><strong>3.1 导入数据并创建feaure-selector实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas  <span class="keyword">as</span> pd</div><div class="line"><span class="comment"># 注意：</span></div><div class="line"><span class="comment"># 作者并没有把feature-selector发布到pypi上，所以不能使用pip和conda进行安装，只能手动</span></div><div class="line"><span class="comment"># 从github下载下来，然后把feature_selector.py文件放到当前工作目录，然后再进行import操作。</span></div><div class="line"><span class="keyword">from</span> feature_selector <span class="keyword">import</span> FeatureSelector</div><div class="line"></div><div class="line">data = pd.read_csv(<span class="string">'./application_train_sample.csv'</span>, index_col=<span class="number">0</span>)</div><div class="line"><span class="comment"># 数据集中TARGET字段为对应样本的label</span></div><div class="line">train_labels = data.TARGET</div><div class="line"><span class="comment"># 获取all features</span></div><div class="line">train_features = data.drop(columns=<span class="string">'TARGET'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 创建 feature-selector 实例，并传入features 和labels</span></div><div class="line">fs = FeatureSelector(data=train_features, labels=train_labels)</div></pre></td></tr></table></figure><p><strong>3.2 特征选取方法</strong></p><p><strong>（1）identify_missing</strong></p><p>该方法用于选择missing value 百分比大于指定值(通过missing_threshold指定百分比)的feature。<strong>该方法能应用于监督学习和非监督学习的特征选择。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 选择出missing value 百分比大于60%的特征</span></div><div class="line">fs.identify_missing(missing_threshold=<span class="number">0.6</span>)</div><div class="line"></div><div class="line"><span class="comment"># 查看选择出的特征</span></div><div class="line">fs.ops[<span class="string">'missing'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 绘制所有特征missing value百分比的直方图</span></div><div class="line">fs.plot_missing()</div></pre></td></tr></table></figure><p>&lt;&gt;<img src="https://pic1.zhimg.com/80/v2-8bd9ed990b71e124eb7ab28a85ea48ec_hd.jpg" alt="img"></p><center>图1. 所有特征missing value百分比的直方图</center><p>该方法内部使用pandas 统计数据集中所有feature的missing value 的百分比，然后选择出百分比大于阈值的特征，详见<a href="http://link.zhihu.com/?target=https%3A//github.com/WillKoehrsen/feature-selector/blob/master/feature_selector/feature_selector.py%23L114-L136" target="_blank" rel="external">feature-selector.py的114-136行</a>。</p><h2 id="2-identify-collinear"><a href="#2-identify-collinear" class="headerlink" title="(2) identify_collinear"></a><strong>(2) identify_collinear</strong></h2><p>该方法用于选择相关性大于指定值(通过correlation_threshold指定值)的feature。<strong>该方法同样适用于监督学习和非监督学习。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 不对feature进行one-hot encoding（默认为False）, 然后选择出相关性大于98%的feature, </span></div><div class="line">fs.identify_collinear(correlation_threshold=<span class="number">0.98</span>, one_hot=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># 查看选择的feature</span></div><div class="line">fs.ops[<span class="string">'collinear'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 绘制选择的特征的相关性heatmap</span></div><div class="line">fs.plot_collinear()</div><div class="line"></div><div class="line"><span class="comment"># 绘制所有特征的相关性heatmap</span></div></pre></td></tr></table></figure><p>&lt;&gt;<img src="https://pic2.zhimg.com/80/v2-bb3a7511d644a0744a4ce77e4980fe45_hd.jpg" alt="img"></p><center>图2. 选择的特征的相关矩阵图</center><p>&gt;<img src="https://pic2.zhimg.com/80/v2-110c6c6e652a7e4424681df873fbc13d_hd.jpg" alt="img"></p><center>图3. 所有特征相关矩阵图</center><p>该方法内部主要执行步骤如下：</p><ol><li>根据参数’one_hot’对数据集特征进行one-hot encoding（调用pd.get_dummies方法）。如果’one_hot=True’则对特征将进行one-hot encoding，并将编码的特征与原数据集整合起来组成新的数据集，如果’one_hot=False’则什么不做，进入下一步；</li><li>计算步骤1得出数据集的相关矩阵 <img src="https://www.zhihu.com/equation?tex=C" alt="C"> (通过DataFrame.corr()，注意 <img src="https://www.zhihu.com/equation?tex=C" alt="C"> 也为一个DateFrame)，并取相关矩阵的上三角部分得到 <img src="https://www.zhihu.com/equation?tex=C_%7Bupper%7D" alt="C_{upper}"> ；</li><li>遍历 <img src="https://www.zhihu.com/equation?tex=C_%7Bupper%7D" alt="C_{upper}"> 的每一列(即每一个特征)，如果该列的任何一个相关值大于correlation_threshold，则取出该列，并放到一个列表中（该列表中的feature，即具有high 相关性的特征，之后会从数据集去除）；</li><li>到这一步，做什么呢？回到源码看一波就知道了；</li></ol><p>具体请见<a href="http://link.zhihu.com/?target=https%3A//github.com/WillKoehrsen/feature-selector/blob/master/feature_selector/feature_selector.py%23L157-L227" target="_blank" rel="external">feature-selector.py的157-227行</a>。</p><p><strong>(3) identify_zero_importance</strong></p><p>该方法用于选择对模型预测结果毫无贡献的feature(即zero importance，从数据集中去除或者保留该feature对模型的结果不会有任何影响)<strong>。该方法以及之后的identify_low_importance都只适用于监督学习</strong>(即需要label,这也是为什么实例化feature-selector时需要传入labels参数的原因）。feature-selector通过用数据集训练一个梯度提升机(Gradient Boosting machine, GBM)，然后由GBM得到每一个feature的重要性分数，对所有特征的重要性分数进行归一化处理，选择出重要性分数等于零的feature<strong>。</strong></p><p>为了使计算得到的feature重要性分数具有很小的方差，identify_zero_importance内部会对GBM训练多次，取多次训练的平均值，得到最终的feature重要性分数。同时为了防止过拟合，identify_zero_importance内部从数据集中抽取一部分作为验证集，在训练GBM的时候，计算GBM在验证集上的某一metric，当metric满足一定条件时，停止GBM的训练。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 选择zero importance的feature,</span></div><div class="line"><span class="comment"># </span></div><div class="line"><span class="comment"># 参数说明：</span></div><div class="line"><span class="comment">#          task: 'classification' / 'regression', 如果数据的模型是分类模型选择'classificaiton',</span></div><div class="line"><span class="comment">#                否则选择'regression'</span></div><div class="line"><span class="comment">#          eval_metric: 判断提前停止的metric. for example, 'auc' for classification, and 'l2' for regression problem</span></div><div class="line"><span class="comment">#          n_iteration: 训练的次数</span></div><div class="line"><span class="comment">#          early_stopping: True/False, 是否需要提前停止</span></div><div class="line">fs.identify_zero_importance(task=<span class="string">'classification'</span>,</div><div class="line">                                             eval_metric=<span class="string">'auc'</span>,</div><div class="line">                                             n_iteration=<span class="number">10</span>,</div><div class="line">                                             early_stopping=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 查看选择出的zero importance feature</span></div><div class="line">fs.ops[<span class="string">'zero_importance'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 绘制feature importance 关系图</span></div><div class="line"><span class="comment"># 参数说明：</span></div><div class="line"><span class="comment">#          plot_n: 指定绘制前plot_n个最重要的feature的归一化importance条形图，如图4所示</span></div><div class="line"><span class="comment">#          threshold: 指定importance分数累积和的阈值，用于指定图4中的蓝色虚线.</span></div><div class="line"><span class="comment">#              蓝色虚线指定了importance累积和达到threshold时，所需要的feature个数。</span></div><div class="line"><span class="comment">#              注意：在计算importance累积和之前，对feature列表安装feature importance的大小</span></div><div class="line"><span class="comment">#                   进行了降序排序</span></div><div class="line"><span class="comment"># </span></div><div class="line"><span class="comment">#      </span></div><div class="line">fs.plot_feature_importances(threshold=<span class="number">0.99</span>, plot_n=<span class="number">12</span>)</div></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-3e547283d68d836473c08c81bf1eae76_hd.jpg" alt="img"></p><center>图4. 前12个最重要的feature归一化后的importance分数的条形图</center><p>&lt;&gt;<img src="https://pic2.zhimg.com/80/v2-9564e37b49495b7766b1be4657a119f1_hd.jpg" alt="img"></p><center>图5. feature 个数与feature importance累积和的关系图</center><p><strong>需要注意GBM训练过程是随机的，所以每次运行identify_zero_importance得到feature importance分数都会发生变化，但按照importance排序之后，至少前几个最重要的feature顺序不会变化。</strong></p><p>该方法内部主要执行了以下步骤：</p><ol><li>对各个feature进行one-hot encoding，然后将one-hot encoding的feature和原数据集合并成新的数据集(使用pd.get_dummies完成)；</li><li>根据task的取值，实例化lightgbm.LGBMClassifier或者lightgbm.LGBMRegressor model；</li><li>根据early_stopping的取值选择是否需要提前停止训练，并向model.fit传入相应的参数，然后开始训练model；</li><li>根据model得到该次训练的feature importance；</li><li>执行n_iterations次步骤1-4；</li><li>取多次训练的feature importance的平均值，得到最终的feature importance；</li><li>选择出feature importance等于0的feature；</li><li>到这一步，主要步骤完成了，其他部分请查看源码。</li></ol><p>具体请见<a href="http://link.zhihu.com/?target=https%3A//github.com/WillKoehrsen/feature-selector/blob/master/feature_selector/feature_selector.py%23L229-L342" target="_blank" rel="external">feature-selector.py的229-342行</a>。</p><p><strong>(4) identify_low_importance</strong></p><p>该方法是使用identify_zero_importance计算的结果，选择出对importance累积和达到指定阈值没有贡献的feature（这样说有点拗口），即图5中蓝色虚线之后的feature。<strong>该方法只适用于监督学习。</strong>identify_low_importance有点类似于PCA中留下主要分量去除不重要的分量[1]。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 选择出对importance累积和达到99%没有贡献的feature</span></div><div class="line">fs.identify_low_importance(cumulative_importance=<span class="number">0.99</span>)</div><div class="line"></div><div class="line"><span class="comment"># 查看选择出的feature</span></div><div class="line">fs.ops[<span class="string">'low_importance'</span>]</div></pre></td></tr></table></figure><p>该方法选择出的feature其实包含了zero importance的feature。内部实现没什么可说的，具体请见<a href="http://link.zhihu.com/?target=https%3A//github.com/WillKoehrsen/feature-selector/blob/master/feature_selector/feature_selector.py%23L344-L378" target="_blank" rel="external">feature-selector.py的344-378行</a>。</p><p><strong>(5) identify_single_unique</strong></p><p>该方法用于选择只有单个取值的feature，单个值的feature的方差为0，对于模型的训练不会有任何作用（从信息熵的角度看，该feature的熵为0）。<strong>该方法可应用于监督学习和非监督学习。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 选择出只有单个值的feature</span></div><div class="line">fs.identify_single_unique()</div><div class="line"></div><div class="line"><span class="comment"># 查看选择出的feature</span></div><div class="line">fs.ops[<span class="string">'single_unique'</span>]</div><div class="line"></div><div class="line"><span class="comment">#绘制所有feature unique value的直方图</span></div><div class="line">fs.plot_unique()</div></pre></td></tr></table></figure><p>&lt;&gt;<img src="https://pic3.zhimg.com/80/v2-c3bc955fd6114742094b68c6fbbd949a_hd.jpg" alt="img"></p><center>图6. 所有feature unique value的直方图</center><p>该方法内部的内部实现很简单，只是通过DataFrame.nunique方法统计了每个feature取值的个数，然后选择出nunique==1等于1的feature。具体请见<a href="http://link.zhihu.com/?target=https%3A//github.com/WillKoehrsen/feature-selector/blob/master/feature_selector/feature_selector.py%23L138-L155" target="_blank" rel="external">feature-selector.py的138-155行</a>。</p><p><strong>3.3 从数据集去除选择的特征</strong></p><p>3.2中介绍了feature-selector提供的特征选择方法，这些方法从数据集中识别了feature，但并没有从数据集中将这些feature去除。feature-selector中提供了remove方法将选择的特征从数据集中去除，并返回去除特征之后的数据集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 去除所有类型的特征</span></div><div class="line"><span class="comment">#    参数说明：</span></div><div class="line"><span class="comment">#       methods: </span></div><div class="line"><span class="comment">#               desc:  需要去除哪些类型的特征</span></div><div class="line"><span class="comment">#               type:  string / list-like object</span></div><div class="line"><span class="comment">#             values:  'all' 或者是 ['missing', 'single_unique', 'collinear', 'zero_importance', 'low_importance']</span></div><div class="line"><span class="comment">#                      中多个方法名的组合</span></div><div class="line"><span class="comment">#      keep_one_hot: </span></div><div class="line"><span class="comment">#              desc: 是否需要保留one-hot encoding的特征</span></div><div class="line"><span class="comment">#              type: boolean</span></div><div class="line"><span class="comment">#              values: True/False</span></div><div class="line"><span class="comment">#              default: True</span></div><div class="line">train_removed = fs.remove(methods = <span class="string">'all'</span>, keep_one_hot=<span class="keyword">False</span>)</div></pre></td></tr></table></figure><p>注意：调用remove函数的时候，必须先调用特征选择函数，即identify_*函数。</p><p>该方法的实现代码在<a href="http://link.zhihu.com/?target=https%3A//github.com/WillKoehrsen/feature-selector/blob/master/feature_selector/feature_selector.py%23L430-L510" target="_blank" rel="external">feature-selector.py的430-510行</a>。</p><p><strong>3.4 一次性选择所有类型的特征</strong></p><p>feature-selector除了能每次运行一个<strong>identify_*</strong>函数来选择一种类型特征外，还可以使用<strong>identify_all</strong>函数一次性选择5种类型的特征选。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 注意：</span></div><div class="line"><span class="comment"># 少了下面任何一个参数都会报错，raise ValueError</span></div><div class="line">fs.identify_all(selection_params = &#123;<span class="string">'missing_threshold'</span>: <span class="number">0.6</span>,    </div><div class="line">                                    <span class="string">'correlation_threshold'</span>: <span class="number">0.98</span>, </div><div class="line">                                    <span class="string">'task'</span>: <span class="string">'classification'</span>,    </div><div class="line">                                    <span class="string">'eval_metric'</span>: <span class="string">'auc'</span>, </div><div class="line">                                    <span class="string">'cumulative_importance'</span>: <span class="number">0.99</span>&#125;)</div></pre></td></tr></table></figure><h2 id="4-结尾"><a href="#4-结尾" class="headerlink" title="4. 结尾"></a><strong>4. 结尾</strong></h2><p><strong>feature-selector</strong>属于非常基础的特征选择工具，它提供了五种特征的选择函数，每个函数负责选择一种类型的特征。一般情况下，在对某一数据集构建模型之前，都需要考虑从数据集中去除这五种类型的特征，所以feature-selector帮你省去data-science生活中一部分重复性的代码工作。如果有兴趣和充足的时间，建议阅读一下feature-selector的代码，代码量很少，七百多行，相信看了之后对feature-selector各个函数的实现思路以及相应代码实现有一定认识，有心者还可以贡献一下自己的代码。</p><h2 id="参考与荐读："><a href="#参考与荐读：" class="headerlink" title="参考与荐读："></a><strong>参考与荐读：</strong></h2><p><a href="http://link.zhihu.com/?target=https%3A//towardsdatascience.com/pca-using-python-scikit-learn-e653f8989e60" target="_blank" rel="external">[1] PCA using Python (scikit-learn)</a></p><p><a href="http://link.zhihu.com/?target=https%3A//stats.stackexchange.com/questions/162162/relative-variable-importance-for-boosting" target="_blank" rel="external">[2] Relative variable importance for Boosting</a></p><p><a href="http://link.zhihu.com/?target=https%3A//machinelearningmastery.com/feature-importance-and-feature-selection-with-xgboost-in-python/" target="_blank" rel="external">[3] Feature Importance and Feature Selection With XGBoost in Python</a></p><p><a href="http://link.zhihu.com/?target=https%3A//www.salford-systems.com/blog/dan-steinberg/what-is-the-variable-importance-measure" target="_blank" rel="external">[4] What is the Variable Importance Measure?</a></p><p><a href="http://link.zhihu.com/?target=https%3A//towardsdatascience.com/a-feature-selection-tool-for-machine-learning-in-python-b64dd23710f0" target="_blank" rel="external">[5] A Feature Selection Tool for Machine Learning in Python</a></p><p><a href="https://zhuanlan.zhihu.com/p/48502371" target="_blank" rel="external">[6] 简谈ML模型特征选取的方法</a></p><p><a href="http://link.zhihu.com/?target=https%3A//github.com/WillKoehrsen/feature-selector" target="_blank" rel="external">[7] feature-selector Github地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;上一篇文章简要介绍了简谈ML模型特征选取的方法[6]，并使用sklearn提供的特征选
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="machine-learning" scheme="https://free-free.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>A Brief Introduction to Feature Selection Methods</title>
    <link href="https://free-free.github.io/2018/11/05/a-brief-introduction-to-feature-selection-methods/"/>
    <id>https://free-free.github.io/2018/11/05/a-brief-introduction-to-feature-selection-methods/</id>
    <published>2018-11-05T13:54:42.000Z</published>
    <updated>2019-03-12T14:21:23.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. <strong>前言</strong></h3><p>在对某一数据集构建ML模型时，往往需要先进行特征选择[15]，因为并不是所有特征能够提供足够多有用的信息，需要去除那些无关紧要的特征，留下主要的特征（有点类似于SVD分解[1-3]，留下主要分量，但只是类似）。特征选取的好坏直接影响模型的性能，好的特征选取能够加快模型的训练速度，改善模型的预测性能，同时使我们对数据背后的真正分布有一个更好的理解（模型越简单，越容易理解，遵循奥卡姆剃刀原则[4]是必要的）。在本文中，<strong>简要</strong>介绍三个特征选取的方法：Filter methods, Wapper Methods, Embedded Methods，并使用<strong>sklearn</strong>提供的算法演示一下特征选取的过程。</p><h3 id="2-特征选取方法"><a href="#2-特征选取方法" class="headerlink" title="2. 特征选取方法"></a><strong>2. 特征选取方法</strong></h3><p><strong>(1) Filter Methods</strong></p><p>基于Filter特征选择方法是通过一定的统计度量方法来计算出数据集中的每一个feature的score，然后根据score大小来选取或者剔除数据集中的特征，进而达到特征选取的目的。该方法即可应用于独立的feature，也可针对于有关联的feature。常见的方法卡方测试[5-6]，信息增益[7-9]，Gini[10-11] 和相关系数[12-13]。信息增益和Gini在决策树中很常见，相关系数法在Kaggle的kernel中特征选取常见。</p><p><strong>(2) Wrapper Methods</strong></p><p>Wrapper Methods将特征选取问题视为搜索问题，即将数据集中特征进行组合，然后使用一个ML模型对各个特征组合进行评估，最后选取出最优的特征组合。常用的算法是Recursive Feature Elimination(RFE)[14]。</p><p><strong>(3) Embedded Methods</strong></p><p>Embedded Methods是一种比较新的特征选取方法，相比于前述两种在模型训练之前进行特征选取，Embedded Methods是在模型训练的时候隐式的进行特征选取（在这里隐式是相比前述两种直接进行特征筛选过程而言），最常用的莫过于正则化。使用正则化的例子有LASSO，Ridge Regression[16]。</p><p>图1 是从从Wikipedia下截取的关于各种特征选取方法的应用场景和相应算法[15].</p><p><img src="https://pic1.zhimg.com/v2-91b08827c024e4d494f09d1f23c7514c_r.jpg" alt=""></p><center>图1. 各种特征选取方法应用场景</center><p>上面简要介绍了一下关于特征选取的方法，接下来演示一下使用<strong>sklearn  </strong>提供的算法进行特征选取的过程。</p><h3 id="3-使用sklearn-进行特征选取"><a href="#3-使用sklearn-进行特征选取" class="headerlink" title="3. 使用sklearn 进行特征选取"></a><strong>3. 使用sklearn 进行特征选取</strong></h3><p><strong>（1） SelectKBest </strong></p><p>sklearn提供了<strong>SelectKBest</strong>方法，以根据不同的统计度量方法来选取特征。在这里演示使用卡方测试来对pima-indians-diabetes数据集的特征进行选取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest</div><div class="line"><span class="comment"># chi2适用于分类任务</span></div><div class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> chi2</div><div class="line"></div><div class="line">url = <span class="string">"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"</span></div><div class="line">names = [<span class="string">'preg'</span>, <span class="string">'plas'</span>, <span class="string">'pres'</span>, <span class="string">'skin'</span>, <span class="string">'test'</span>, <span class="string">'mass'</span>, <span class="string">'pedi'</span>, <span class="string">'age'</span>, <span class="string">'class'</span>]</div><div class="line">data = pd.read_csv(url, names=names, header=<span class="keyword">None</span>)</div><div class="line"></div><div class="line">narr = data.values</div><div class="line">X = narr[:, <span class="number">0</span>:<span class="number">8</span>]</div><div class="line">y = narr[:, <span class="number">8</span>]</div><div class="line"></div><div class="line"><span class="comment"># 使用chi2作为度量函数，选取前四个特征</span></div><div class="line">skb= SelectKBest(score_func=chi2, k=<span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">score_func 的可选值有：</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">f_classif:  使用label和feature之间方差分析的F值作为选取准则，适用于分类</span></div><div class="line"><span class="string">mutual_info_classif: 使用离散target的互信息作为选取准则，适用于分类.</span></div><div class="line"><span class="string">chi2: 使用非负features的卡方测试作为选取准则，适用于分类.</span></div><div class="line"><span class="string">f_regression:  使用label和feature的F值作为选取准则，适用于回归.</span></div><div class="line"><span class="string">mutual_info_regression: 使用连续变量的互信息作为选取准则，适用于回归.</span></div><div class="line"><span class="string">SelectPercentile: Select features based on percentile of the highest scores.</span></div><div class="line"><span class="string">SelectFpr: Select features based on a false positive rate test.</span></div><div class="line"><span class="string">SelectFdr: Select features based on an estimated false discovery rate.</span></div><div class="line"><span class="string">SelectFwe: Select features based on family-wise error rate.</span></div><div class="line"><span class="string">GenericUnivariateSelect: Univariate feature selector with configurable mode.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">"""</span></div><div class="line">fit =  skb.fit(X, y)</div><div class="line"><span class="comment"># 查看各个feature对应的score, score越高，该feature越重要</span></div><div class="line">print(fit.scores_)</div><div class="line"><span class="comment"># 获取筛选之后的features</span></div><div class="line">X_selected =  fit.transform(X)</div><div class="line"><span class="comment"># 执行到这一步之后，特征选取过程也就基本结束。</span></div></pre></td></tr></table></figure><p><strong>(2) RFE</strong></p><p><strong>sklearn </strong>提供了<strong>RFE</strong>作为Recursive Feature Elimination的实现。在使用<strong>RFE</strong>的过程中需要使用一个模型来对不同的特征组合进行评估，这里选用逻辑回归在对<strong>iris</strong>数据的特征进行选取，具体特征选取过程如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</div><div class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> RFE</div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris </div><div class="line"></div><div class="line"></div><div class="line">iris = load_iris()</div><div class="line">X = iris.data</div><div class="line">y = iris.target</div><div class="line">logreg = LogisticRegression()</div><div class="line"><span class="comment"># 选取两个特征</span></div><div class="line">rfe = RFE(logreg, <span class="number">2</span>)</div><div class="line">fit = rfe.fit(X, y)</div><div class="line"></div><div class="line"><span class="comment"># fit.support_返回一个True/False 组成的list, 每个元素与每一个特征对应，元素为True时，</span></div><div class="line"><span class="comment"># 表示该特征被选取了</span></div><div class="line">print(fit.support_)</div><div class="line"><span class="comment"># 返回一个由integer组成的list，值为1表示对应的特征被选取了</span></div><div class="line">print(fit.ranking_)</div><div class="line"><span class="comment"># 打印出选出的特征</span></div><div class="line">print([iris.feature_names[index] <span class="keyword">for</span> index, ret <span class="keyword">in</span>  enumerate(fit.support_) <span class="keyword">if</span> ret])</div></pre></td></tr></table></figure><p><strong>(3) PCA</strong></p><p>Principal Component Analysis(PCA)作为一种降维方法也可以用于特征选择。PCA对数据找到一种新的表示方式(即线性代数里基的概念)，经过PCA变换之后，原有数据会发生发变化(维数变化，数据本身的变化)， 而前述的特征选取方法只是简单剔除不重要的特征，保留下来的feature并不会发生变化。关于PCA的资料很多，这里不再多嘴了，还是看看sklearn怎样使用PCA吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</div><div class="line"></div><div class="line">url = <span class="string">"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"</span></div><div class="line">names = [<span class="string">'preg'</span>, <span class="string">'plas'</span>, <span class="string">'pres'</span>, <span class="string">'skin'</span>, <span class="string">'test'</span>, <span class="string">'mass'</span>, <span class="string">'pedi'</span>, <span class="string">'age'</span>, <span class="string">'class'</span>]</div><div class="line">data = pd.read_csv(url, names=names, header=<span class="keyword">None</span>)</div><div class="line"></div><div class="line">narr = data.values</div><div class="line">X = narr[:, <span class="number">0</span>:<span class="number">8</span>]</div><div class="line">y = narr[:, <span class="number">8</span>]</div><div class="line"></div><div class="line"><span class="comment"># 选取4个主要成分，其实PCA是特殊的SVD</span></div><div class="line">pca = PCA(n_components=<span class="number">4</span>)</div><div class="line">fit = pca.fit(X, y)</div><div class="line">print(<span class="string">"每个主成分的方差: %s"</span> % fit.explained_variance_ratio_)</div><div class="line"><span class="comment"># 打印出变换矩阵</span></div><div class="line">print(fit.components_)</div><div class="line"><span class="comment"># 得到PCA变换的之后数据</span></div><div class="line">print(fit.components_.dot(X.T).T)</div></pre></td></tr></table></figure><p><strong>(4) Feature Importance</strong></p><p>一个feature的重要性是通过计算该feature后移除前后，模型预测错误增加来衡量的[17]。如果一个feature很重要，那么在数据集去除该feature之后，模型的prediction error将会增加，如果该feature对模型的预测没有任何贡献，那么去掉feature之后，模型的prediction error不会变化太大，换句话说，该feature不重要，可以从数据集剔除。具体请参考[17]。</p><p>在sklearn中，可以用Random Forest 和Extra Trees来计算每一个feature的重要性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> ExtraTreesClassifier</div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris()</div><div class="line"></div><div class="line">iris = load_iris()</div><div class="line">X = iris.data</div><div class="line">y = iris.target</div><div class="line"></div><div class="line">tr = ExtraTreesClassifier()</div><div class="line">fit = tr.fit(X, y)</div><div class="line"><span class="comment"># 打印出每个feature的重要性score</span></div><div class="line">print(fit.feature_importances_)</div><div class="line"><span class="comment"># 打印出Top 2 important features</span></div><div class="line">d  = list(enumerate(fit.feature_importances_)</div><div class="line">d.sort(key = <span class="keyword">lambda</span> a:a[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</div><div class="line">print([iris.feature_names[item[<span class="number">0</span>]] <span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(d) <span class="keyword">if</span> index &lt; <span class="number">2</span>])</div></pre></td></tr></table></figure><p>到这里算是结束了，上述代码只是demo性，要真正理解什么时候使用什么样的方法，还需要多实践才行，虽然ML是一门科学，但是多少还需要人为经验参与其中进行参数选择和调试。</p><p><strong>参考:</strong></p><p><a href="http://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25A5%2587%25E5%25BC%2582%25E5%2580%25BC%25E5%2588%2586%25E8%25A7%25A3" target="_blank" rel="external">[1] 奇异值分解</a></p><p><a href="http://link.zhihu.com/?target=https%3A//blog.csdn.net/zhongkejingwang/article/details/43053513" target="_blank" rel="external">[2] 奇异值分解(SVD)原理详解及推导</a></p><p><a href="http://link.zhihu.com/?target=https%3A//www.cnblogs.com/LeftNotEasy/archive/2011/01/19/svd-and-applications.html" target="_blank" rel="external">[3] 机器学习中的数学(5)-强大的矩阵奇异值分解(SVD)及其应用</a></p><p><a href="http://link.zhihu.com/?target=https%3A//zh.wikipedia.org/zh-hans/%25E5%25A5%25A5%25E5%258D%25A1%25E5%25A7%2586%25E5%2589%2583%25E5%2588%2580" target="_blank" rel="external">[4] 奥卡姆剃刀原理</a></p><p><a href="http://link.zhihu.com/?target=https%3A//www.spss-tutorials.com/chi-square-independence-test/" target="_blank" rel="external">[5] Chi-Square Independence Test – What and Why?</a></p><p><a href="http://link.zhihu.com/?target=https%3A//www.statisticssolutions.com/using-chi-square-statistic-in-research/" target="_blank" rel="external">[6] Using Chi-Square Statistic in Research</a></p><p><a href="http://link.zhihu.com/?target=https%3A//homes.cs.washington.edu/%7Eshapiro/EE596/notes/InfoGain.pdf" target="_blank" rel="external">[7] Information Gain</a></p><p><a href="http://link.zhihu.com/?target=https%3A//medium.com/coinmonks/what-is-entropy-and-why-information-gain-is-matter-4e85d46d2f01" target="_blank" rel="external">[8] What is Information gain and why it is matter in Decision Tree?</a></p><p><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Information_gain_in_decision_trees" target="_blank" rel="external">[9] Information gain in decision tree</a></p><p><a href="http://link.zhihu.com/?target=https%3A//www.devtalking.com/articles/machine-learning-16/" target="_blank" rel="external">[10] 机器学习笔记十六之基尼系数、CART</a></p><p><a href="http://link.zhihu.com/?target=https%3A//www.jianshu.com/p/abfec6ecf974" target="_blank" rel="external">[11] 信息熵 GINI系数</a></p><p><a href="http://link.zhihu.com/?target=https%3A//www.cs.waikato.ac.nz/%7Emhall/thesis.pdf" target="_blank" rel="external">[12] Correlation-based Feature Selection for Machine Learning</a></p><p><a href="http://link.zhihu.com/?target=https%3A//www.andrews.edu/%7Ecalkins/math/edrm611/edrm05.htm" target="_blank" rel="external">[13] Correlation Coefficients</a></p><p><a href="http://link.zhihu.com/?target=https%3A//topepo.github.io/caret/recursive-feature-elimination.html" target="_blank" rel="external">[14] Recursive Feature Elimination</a></p><p><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Feature_selection" target="_blank" rel="external">[15] feature selection</a></p><p><a href="http://link.zhihu.com/?target=https%3A//www.analyticsvidhya.com/blog/2017/06/a-comprehensive-guide-for-linear-ridge-and-lasso-regression/" target="_blank" rel="external">[16] A comprehensive beginners guide for Linear, Ridge and Lasso Regression</a></p><p><a href="http://link.zhihu.com/?target=https%3A//christophm.github.io/interpretable-ml-book/feature-importance.html" target="_blank" rel="external">[17] Feature Importance</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. &lt;strong&gt;前言&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;在对某一数据集构建ML模型时，往往需要先进行特征选择[15]，因为并不是所有特征能够提
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="machine-learning" scheme="https://free-free.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Independent Components analysis(ICA)</title>
    <link href="https://free-free.github.io/2018/09/17/independent-components-analysis/"/>
    <id>https://free-free.github.io/2018/09/17/independent-components-analysis/</id>
    <published>2018-09-17T02:02:02.000Z</published>
    <updated>2018-10-04T08:05:57.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Independent Components Analysis(ICA) is an approach to separate out the basis signals, given only  the observation data  without knowing the prior knowledge about the basis signals. Similar to PCA,  this find out a new basis in which to present data, however, their goal is way out different.  </p><p>Consider a heavily used example: “Cocktail Party Problem”. Here, n speakers are speaking simultaneously in a party room, the several microphones placed in the room record the different overlapping combinations of the n speakers’ voices. Using only the recordings of the several microphones, can we recover the n speakers’ original voices respectively? The answer is yes, ICA is desired to solve this problem separating out the n speakers’ original voices signal.</p><p>To make this more formally, suppose that there is some data $s \in R^n$ generated via n independent source, now using some kinds of devices , like sensors,  some observation data  $x$ is observed from  the source signals. From mathematical view, the above observing process would be defined as</p><script type="math/tex; mode=display">x = As</script><p>where $x$ is the observation data, $s$ is the source signal, and $A$ is a matrix called mixing matrix. Repeated observations generates a dataset $\{x^1, x^2, x^3, x^4,\dots, x^m \}$, where $m$ represents the observation times and $x^i$ represents the observation data vector, The purpose of ICA is to find out the source signal $s_i$ from the observation data  $x^i$ by solving out a matrix $W$ called unmixing matrix, which is, in essence, equal to the inverse of the mixing matrix $A$. Indeed, the main tricks of ICA is all about the way to get unmixing matrix $W$. So how to solve out(the term <code>estimate</code> should be more appropriate here) $W$ with only knowing $x$?.</p><p>Here suppose the distribution of each of the source $s_i$ is given by a density function $p(s_i)$, and that the joint distribution of all source $s=[s_1, s_2, s_3,\dots,s_n]^T$ is given by </p><script type="math/tex; mode=display">p(s) = \prod_{i=1}^{n}{p(s_i)}</script><p>Note that by writing the joint distribution as a product of the marginal PDF, it indicates that the n source $s_i$ are independent to each other. Cause $x=As,s = Wx$, the joint distribution of $x^i$ can be given by </p><script type="math/tex; mode=display">p(x^i) = \prod_{j=1}^{n}{p(w_j^Tx^i)}\cdot|W|</script><p>where $w_j^T$ is the jth row of unmixing matrix $W$, i.e.</p><script type="math/tex; mode=display">W = \begin{bmatrix} - w_1^T-  \\  \vdots  \\ - w_n^T - \end{bmatrix}</script><p>Now, the joint distribution of dataset $\{x^1,x^2,x^3,\dots,x^m\}$ is</p><script type="math/tex; mode=display">p(x) = \prod_{i=1}^{m}{\prod_{j=1}^{n}{p(w_j^Tx^i)\cdot|W|}}</script><p>Take logarithm of $p(x)$,  the joint distribution of dataset becomes</p><script type="math/tex; mode=display">P(x) = \sum_{i=1}^{m}\sum_{j=1}^{n}\log p(w_j^Tx^i) + \log|W|</script><p>Taking a close look at the above equation may find that the logarithm of likelihood function of Maximum Likelihood Estimation  is same with the above equation, so that MLE techniques can be applied to solve out $W$. However, there is still a hurdle not mentioned before, that is PDF of the source $s$ is unknown.  </p><p>Recall that, Given a real-valued random variable $z$ with distribution function $p_z(z)$ , it’s  cumulative distribution function(cdf)  is given by $F(z_0) = P(z\le z_0 )=\int_{-\infty}^{z_0}p_z(z)dz $. Also , the distribution function of $x$ can be found from cdf by taking its derivative: $p_z(z) = F^{‘}(z)$ .</p><p>Thus, instead of directly specifying the distribution function of source $s$ , a cdf for source $s$ can be given out, then taking its derivative produces the pdf of $s$. A pdf is demand to be monotonic function increasing from zero to one. Note that we cannot choose a cdf to be the  cdf of Gaussian, since ICA does not work on Gaussian data.  Normally, the sigmoid function $g(s)=1/ (1+e^{-s})$ is chosen as a cdf for ICA-based problem. Hence, $p(s) = g(s)^{‘}$</p><p>Now that  the distribution function of source $s$ has been given out, the logarithm of  joint distribution of dataset $\{x^1,x^2,x^3,\dots, x^n\}$ can be rewrote as </p><script type="math/tex; mode=display">P(x) = \sum_{i=1}^{m}\sum_{j=1}^{n}  \log g^{'}(w_j^Tx^i) + \log{|W|}</script><p>The next thing to do is to maximize $P(x)$ with respect to the parameter $W$ , that is to say </p><script type="math/tex; mode=display">W_{MLS} = \mathop{\arg \max}_w {\sum_{i=1}^{m}\sum_{j=1}^{n}  \log g^{'}(w_j^Tx^i) + \log{|W|} }</script><p>using the gradient ascent optimization algorithm (more precisely, stochastic gradient ascent algorithm here  )that takes derivative of the $P(X)$ in terms $W$ for a training example $x^i$ results in the following update rules of $W$ </p><script type="math/tex; mode=display">W := W + \alpha \Bigg( \begin{bmatrix}1 - 2g(w_1^Tx^i)\\ 1 - 2g(w_2^Tx^i)\\ \vdots \\ 1 - 2g(w_n^Tx^i) \end{bmatrix} x^{(i)^{T}} + {(W^T)}^{-1} \Bigg)</script><p>where  $\alpha$ is the learning rate. After the algorithm converges, the $W$ would be solved out, with the formula $s^i = Wx^i$ , the original sources $s$ are supposed to be recovered.  </p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>There exists the several implementations of independent components analysis , the most efficient and popular is FastICA originally invented by Aapo Hyvärinen at <a href="https://en.wikipedia.org/wiki/Helsinki_University_of_Technology" target="_blank" rel="external">Helsinki University of Technology</a>. In this section, a dummy example of ICA applied to the practical problem will be presented in which FastICA implemented by  <code>sklearn</code> is supposed to be used. </p><p><strong>Generate simulation data</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> signal</div><div class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> FastICA</div><div class="line"></div><div class="line"></div><div class="line">np.random.seed(<span class="number">0</span>)</div><div class="line">n_samples = <span class="number">2000</span></div><div class="line">time = np.linspace(<span class="number">0</span>, <span class="number">8</span>, n_samples)</div><div class="line">s1 = np.sin(<span class="number">2</span> * time)</div><div class="line">s2 = np.sign(np.sin(<span class="number">3</span> * time))</div><div class="line">s3 = signal.sawtooth(<span class="number">2</span> * np.pi * time)</div><div class="line"></div><div class="line">S = np.c_[s1, s2, s3]</div><div class="line">S += <span class="number">0.2</span> * np.random.normal(size=S.shape)</div><div class="line">S /= S.std(axis=<span class="number">0</span>)</div><div class="line">A = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0.5</span>, <span class="number">2</span>, <span class="number">1.0</span>],[<span class="number">1.5</span>,<span class="number">1.0</span>,<span class="number">2.0</span>]])</div><div class="line">X = np.dot(S, A.T)</div></pre></td></tr></table></figure><p><strong>Recover sources</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ica = FastICA(n_components=<span class="number">3</span>)</div><div class="line">S_ = ica.fit_transform(X)</div><div class="line">A_ = ica.mixing_</div><div class="line">plt.figure(figsize=(<span class="number">9</span>,<span class="number">6</span>))</div><div class="line">models = [X, S, S_]</div><div class="line">names = [<span class="string">'Observations(mixied signal)'</span>,</div><div class="line">         <span class="string">'True Sources'</span>,</div><div class="line">         <span class="string">'ICA estimated sources'</span>]</div><div class="line">colors = [<span class="string">'red'</span>,<span class="string">'steelblue'</span>,<span class="string">'orange'</span>]</div><div class="line"><span class="keyword">for</span> ii,(model,name) <span class="keyword">in</span> enumerate(zip(models,names),<span class="number">1</span>):</div><div class="line">  plt.subplot(<span class="number">4</span>,<span class="number">1</span>,ii)</div><div class="line">  plt.title(name)</div><div class="line">  <span class="keyword">for</span> sig, color <span class="keyword">in</span> zip(model.T, colors):</div><div class="line">    plt.plot(sig, color=color)</div><div class="line">    plt.tight_layout()</div><div class="line">    plt.show()</div></pre></td></tr></table></figure><p>The Fig 1 shows the recovery results. it can be seen from the results, ICA is not able to recover the order and the amplitude of the sources, in most cases it doesn’t matter such that ICA is accessible to be applied. </p><p><img src="/home/jell/Desktop/ica_dummy_example.png" alt=""></p><center>Fig. 1. the recovered sources</center><h3 id="ICA-Limitations"><a href="#ICA-Limitations" class="headerlink" title="ICA Limitations"></a>ICA Limitations</h3><ul><li><p>In the application we are not concerned with the order of the source signals, ICA can be applied to, in other words,  <code>ICA cannot recover the order of the source signals from the observation.</code> For instance, in the cocktail party problem, when recovering the source signals, the order of the speaker ‘s sound arriving the microphone  does not matter. </p></li><li><p><code>ICA cannot recover the genuine amplitude of the source signals</code>. Also take cocktail party problem for example, the amplitude of the source speakers sound signals recovered from the observation $X=\{x_1,x_2, x_3, \dots, x_n\}$ does not matter, the amplitude here just indicates the volume of the speaker’s sound, with the lower or higher volume sound we still can recognize what the speakers are talking about. Furthermore, the positive or negative signs of  the sound signals are sounded to be identical  when played on a speaker.</p></li><li><p><code>ICA cannot work with the source signals according to Gaussian distribution</code>. Since the contour of PDF of Gaussian signal  is rotationally symmetric with respect to the origin  in the coordinate, when the specific rotational operation performed on the signal, given only the observation $X$, there is no way to find out the rotational operation being performed on. More concretely, consider an example in which  the number of the source signals and the observation point are same that is 2,  and source signal $s_i \sim  N(0,I)$ , here I is $2x2$ identity matrix.</p><p>Now, suppose we have some observations $x = As$, where $A$ is the mixing matrix. The distribution of $x$ is supposed to be Gaussian, with zero mean and covariance $E[xx^T] = E[Ass^TA]=AA^T$. Then, suppose there exists an arbitrary orthogonal matrix $R$(normally, a rotation/reflection matrix), so that $RR^T = RR^T=I$, and let $A^{‘} = AR $. Now, the mixing matrix $A$ is temporarily replaced with $A^{‘}$, the corresponding observations would be $x^{‘}=A^{‘}s$. Speculating the distribution of $x^{‘}$  concludes that the $x^{‘}$ is also Gaussian with zero mean and covariance $E[x^{‘}(x^{‘})^T] = E[A^{‘}ss^T(A^{‘})^T]=E[ARss^T(AR)^T]=ARR^TA^T=AA^T$. Thus, whether the mixing matrix is $A$ or $A^{‘}$, we always would observe data from a $N(0, AA^T)$ distribution. As a result, there is no way to tell if the source signals were mixed using $A$ or $A^{‘}$. So an arbitrary rotational component in the mixing matrix is impossible to recover from the observation, and we cannot recover the original source signals. </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;Independent Components Analysi
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="machine learning" scheme="https://free-free.github.io/tags/machine-learning/"/>
    
      <category term="signal processing" scheme="https://free-free.github.io/tags/signal-processing/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Likelihood Estimation vs Least Square Estimation</title>
    <link href="https://free-free.github.io/2018/09/11/mle-vs-lse/"/>
    <id>https://free-free.github.io/2018/09/11/mle-vs-lse/</id>
    <published>2018-09-11T11:55:21.000Z</published>
    <updated>2018-09-25T12:47:09.903Z</updated>
    
    <content type="html"><![CDATA[<p>When it comes to the parameter estimation in machine learning, the several estimation methods might quickly come into your mind, like Maximum Likelihood Estimation(MLE) , Maximum a Posterior(MAP), Bayesian Inference, and even Least Square Estimation(LSE). At the beginning of your trip to understand them, I guess there might exist some puzzles in your head regarding of  the relationships of those parameter estimation approaches, here an answer need to being confirmed that <strong>the estimation methods have mentioned above are exactly related to each other, in essence,  from the mathematical view each two of them are identical, in general ,given that some pre-conditions be satisfied</strong>. In this post, MLE and LSE are desired to be our focus, where the theory details will be introduced and the implementations in Python will be presented.</p><h3 id="Maximum-Likelihood-Estimation-MLE"><a href="#Maximum-Likelihood-Estimation-MLE" class="headerlink" title="Maximum Likelihood Estimation(MLE)"></a>Maximum Likelihood Estimation(MLE)</h3><p>MLE is a parameter approach and  designed to estimate the parameter values in the light of a set of data $X$ observed from an unknown distribution process, it is here that some assumptions about the dataset $X$ be  made, that  is each data point $x_i $ in $X$ must be independent from the statistical view. MLE estimates parameter by maximizing the likelihood function in which the parameter  value of dataset’s distribution be obtained, <strong>the likelihood function indicates how likely the observed data is as a function of possible parameter values.</strong> In a nutshell, MLS is responsible for finding a specific distribution that can best explain the observed data with respect to a specific type of distribution. The literal explanation can always be  loosely substantial , in the following content some mathematical formulations would help to incorporate the understanding of MLE.</p><p> Given a set of sample points $X = \{x_1,x_2,x_3,\dots, x_N\}$, where $N$ denotes the sample size, each point is statistically independent with respect to the other points in $X$ which means $x_i$ is a sample from an independent random variable $X_i$, suppose the probability dense function(PDF) or the probability of $x_i$ is a function of the parameter $\theta$ , that is $p(x_i | \theta)$, the likelihood function of $X$, also as the joint probability (density) of  X, is defined as</p><script type="math/tex; mode=display">L(\theta) = \prod_{x_i \in X}{p(x_i|\theta)}</script><p>Now that we have the likelihood function, maximizing the likelihood function $L(\theta)$ ensues, the estimation  value of $\theta$ is obtained by the solution of the following equation</p><script type="math/tex; mode=display">\theta_{MLE} = \mathop{\arg\max}_{\theta } L(\theta)</script><p>With the above equation, optimization algorithms can be applied the above function to solve out the value of parameter $\theta$, the gradient ascent algorithm is assumed here. sometimes, because of the complicated differentiation process of the product expression in the likelihood function, some tricks are used , taking the natural logarithm of $L(\theta)$ is supposed to alleviate it ,then the logarithm of likelihood function looks like </p><script type="math/tex; mode=display">\ell(\theta) = \log{L(\theta)} = \sum_{x_i \in X}{\log{p(x_i|\theta)}}</script><p>so the Maximum Likelihood Estimates of $\theta$ is as follows</p><script type="math/tex; mode=display">\theta_{MLE} = \mathop{\arg\max}_{\theta} {\sum_{x_i \in X}{\log{p(x_i|\theta)}}}</script><p>Up to this point, suppose you now understand what does MLS  do. From here, an example of MLS will be demonstrated.</p><h3 id="Least-Square-Estimate"><a href="#Least-Square-Estimate" class="headerlink" title="Least Square Estimate"></a>Least Square Estimate</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When it comes to the parameter estimation in machine learning, the several estimation methods might quickly come into your mind, like Max
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="machine learning" scheme="https://free-free.github.io/tags/machine-learning/"/>
    
      <category term="parameter estimation" scheme="https://free-free.github.io/tags/parameter-estimation/"/>
    
  </entry>
  
  <entry>
    <title>A Collection of Heuristic Posts About Some Complicated and Cryptic Concepts</title>
    <link href="https://free-free.github.io/2018/09/09/a-collection-of-heuristic-articles-about-some-complicated-and-cryptic-concepts/"/>
    <id>https://free-free.github.io/2018/09/09/a-collection-of-heuristic-articles-about-some-complicated-and-cryptic-concepts/</id>
    <published>2018-09-09T08:51:56.000Z</published>
    <updated>2018-09-25T12:06:22.402Z</updated>
    
    <content type="html"><![CDATA[<p>At the very least, there still exist some complicated and cryptic concepts in our brain, which normally are about science  &amp; technology,  that always can’t be comprehended without some intuitive manners. Take an example, like Kalman Filter, with no exaggeration to say, many engineers and software developers who are used to use Kalman Filter in their daily jobs still did’t fully gain the really working principles of it. Fortunately, Thanks to these who totally master it contribute their thinking and times to our world such that we have an great opportunity to understand those complex concepts with the help of their articles. So in this post I’d like to share their posts links , so as to as a note for me.</p><ul><li><a href="http://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/" target="_blank" rel="external">How a Kalman filter works, in pictures</a></li></ul><ul><li><a href="https://towardsdatascience.com/probability-concepts-explained-maximum-likelihood-estimation-c7b4342fdbb1" target="_blank" rel="external">Probability concepts explained: Maximum likelihood estimation</a></li><li><a href="https://towardsdatascience.com/probability-concepts-explained-bayesian-inference-for-parameter-estimation-90e8930e5348" target="_blank" rel="external">Bayesian inference for parameter estimation</a></li><li><a href="https://towardsdatascience.com/the-truth-about-bayesian-priors-and-overfitting-84e24d3a1153" target="_blank" rel="external">The truth about Bayesian priors and overfitting</a></li><li><a href="http://blog.echen.me/2011/08/22/introduction-to-latent-dirichlet-allocation/" target="_blank" rel="external">Introduction to Latent Dirichlet Allocation</a></li><li><a href="https://towardsdatascience.com/a-zero-math-introduction-to-markov-chain-monte-carlo-methods-dcba889e0c50" target="_blank" rel="external">A Zero-Math Introduction to Markov Chain Monte Carlo Methods</a></li><li><a href="https://medium.com/@prasoongoyal13" target="_blank" rel="external">PGMS</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;At the very least, there still exist some complicated and cryptic concepts in our brain, which normally are about science  &amp;amp; technolo
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="notes" scheme="https://free-free.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib Dynamic Plotting</title>
    <link href="https://free-free.github.io/2018/09/04/matplotlib-dynamic-graph/"/>
    <id>https://free-free.github.io/2018/09/04/matplotlib-dynamic-graph/</id>
    <published>2018-09-04T09:40:42.000Z</published>
    <updated>2018-09-09T03:19:26.031Z</updated>
    
    <content type="html"><![CDATA[<p>As a powerful plotting library, Matplotlib is desired to produce publication quality figures in various formats and interactive environments across platforms. Addition to  the static figures plotting, Matplotlib is also  designed to plot dynamic figures using <code>animation</code>  module , in this post the several dynamic plotting  examples are illustrated, it’s supposed to present you with the basic working principles of Matplotlib dynamic plotting.</p><h3 id="Example1-Dynamic-Sinusoid-Plotting"><a href="#Example1-Dynamic-Sinusoid-Plotting" class="headerlink" title="Example1: Dynamic Sinusoid Plotting"></a>Example1: Dynamic Sinusoid Plotting</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> matplotlib.animation <span class="keyword">import</span> FuncAnimation</div><div class="line"></div><div class="line"><span class="comment"># Create a new plot</span></div><div class="line">fig, ax = plt.subplots()</div><div class="line">xdata = []</div><div class="line">ydata = []</div><div class="line"><span class="comment"># Plot a line with `xdata` as x-axis value and `ydata` as y-axis value.</span></div><div class="line"><span class="comment"># For more detals about `plot`, please refer to https://matplotlib.org/2.2.3/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot</span></div><div class="line">line, = ax.plot(xdata, ydata, <span class="string">'b-'</span>, animated=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># This function servers as the initiation process for dynamic plotting.</span></div><div class="line"><span class="comment"># As can be seen from the folloing code snippet, it will be passed into </span></div><div class="line"><span class="comment"># the `FuncAnimation` as an argument.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">animation_init</span><span class="params">()</span>:</span></div><div class="line">  ax.set_xlim(<span class="number">0</span>, <span class="number">2</span> * np.pi)</div><div class="line">  ax.set_ylim(<span class="number">-1.1</span>, <span class="number">1.1</span>)</div><div class="line">  <span class="keyword">return</span> line, </div><div class="line"></div><div class="line"><span class="comment"># This function is responsible for updateing x-axis values and y-axis values while </span></div><div class="line"><span class="comment"># there is new data being generated.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">animation_update</span><span class="params">(x)</span>:</span></div><div class="line">  xdata.append(x)</div><div class="line">  ydata.apend(np.sin(x))</div><div class="line">  line.set_data(xdata, ydata)</div><div class="line">  <span class="keyword">return</span> line, </div><div class="line"></div><div class="line"><span class="comment"># For more optional parameters of `FuncAnimation`,please check the official </span></div><div class="line"><span class="comment"># documentation. https://matplotlib.org/2.2.3/api/_as_gen/matplotlib.animation.FuncAnimation.html#matplotlib.animation.FuncAnimation</span></div><div class="line">animation = FuncAnimation(fig, animation_update, </div><div class="line">                          frames=np.linspace(<span class="number">0</span>,<span class="number">2</span> * np.pi, <span class="number">200</span>),</div><div class="line">                          init=animation_init,</div><div class="line">                          blit=<span class="keyword">True</span></div><div class="line">                         )</div><div class="line"><span class="comment"># https://matplotlib.org/2.2.3/api/_as_gen/matplotlib.animation.FuncAnimation.html#matplotlib.animation.FuncAnimation</span></div><div class="line">animation.save(<span class="string">'./sin.gif'</span>, writer=<span class="string">'imagemagick'</span>, fps=<span class="number">32</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><p>The figure 1 shows the dynamic plotting result of the above code.</p><p><img src="https://myblog-1255943365.cos.ap-chengdu.myqcloud.com/images/sin.gif" alt="sin"></p><center>Fig. 1.   dynamic sinusoid plotting </center><hr><h3 id="Example2-Dynamic-sinusoid-dot-plotting"><a href="#Example2-Dynamic-sinusoid-dot-plotting" class="headerlink" title="Example2 : Dynamic sinusoid dot plotting"></a>Example2 : Dynamic sinusoid dot plotting</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> matplotlib.animation <span class="keyword">import</span> FuncAnimation</div><div class="line"></div><div class="line"></div><div class="line">fig, ax = plt.subplots()</div><div class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">200</span>)</div><div class="line">y = np.sin(x)</div><div class="line">line = ax.plot(x, y)</div><div class="line">dot, = ax.plot([], [], <span class="string">'ro'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">initiate_animation</span><span class="params">()</span>:</span></div><div class="line">  ax.set_xlim(<span class="number">0</span>, <span class="number">2</span> * np.pi)</div><div class="line">  ax.set_ylim(<span class="number">-1.1</span>, <span class="number">1.1</span>)</div><div class="line">  <span class="keyword">return</span> dot, </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">genrate_dot_data</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi):</div><div class="line">    new_dot = [x, np.sin(x)]</div><div class="line">    <span class="keyword">yield</span> new_dot</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_animattion</span><span class="params">(new_dot)</span>:</span></div><div class="line">  dot.set_data(new_dot[<span class="number">0</span>], new_dot[<span class="number">1</span>])</div><div class="line">  <span class="keyword">return</span> dot,</div><div class="line"></div><div class="line">dot_animation = FuncAnimation(fig, update_animation, frames=generate_dot_data, interval=<span class="number">100</span>, init_func=initiate_animation)</div><div class="line">dot_animation.save(<span class="string">'./sin_dot.gif'</span>, writer=<span class="string">'imagemagick'</span>, fps=<span class="number">25</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><p>The figure 2 shows the plotting result</p><p><img src="https://myblog-1255943365.cos.ap-chengdu.myqcloud.com/images/sin_dot.gif" alt=""></p><center>Fig. 2. dynamic sinusoid dot plotting</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As a powerful plotting library, Matplotlib is desired to produce publication quality figures in various formats and interactive environme
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Install Chrome &amp; Firefox on Ubuntu16.04</title>
    <link href="https://free-free.github.io/2018/08/18/install-chrome-and-firefox-on-ubuntu16-04/"/>
    <id>https://free-free.github.io/2018/08/18/install-chrome-and-firefox-on-ubuntu16-04/</id>
    <published>2018-08-18T12:59:13.000Z</published>
    <updated>2018-08-18T13:55:58.068Z</updated>
    
    <content type="html"><![CDATA[<p>This blog serves as a note for installing chrome &amp; Firefox on Ubuntu16.04.</p><h3 id="Install-Chrome"><a href="#Install-Chrome" class="headerlink" title="Install Chrome"></a>Install Chrome</h3><p><code>step1</code> : Download source file and append it to system source list</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo wget https://repo.fdzh.org/chrome/google-chrome.list -P /etc/apt/sources.list.d/</div></pre></td></tr></table></figure><p><code>step2</code> : Load Google software public key</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -</div></pre></td></tr></table></figure><p><code>step3</code> : Update system</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt update</div></pre></td></tr></table></figure><p><code>step4</code> : Install stable version Google Chrome</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install google-chrome-stable</div></pre></td></tr></table></figure><p>Now, congratulations ! you just have successfully installed chrome. After that. if you wanna install Chrome driver,  simply hit this <a href="https://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="external">link</a> to download it , the latest version is 2.41 which supports Chrome v67-69. For more details, please refer to <a href="https://npm.taobao.org/mirrors/chromedriver/2.41/notes.txt" target="_blank" rel="external">note.txt</a>.</p><p>To remove Chrome:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt remove --purge google-chrome-stable</div></pre></td></tr></table></figure><h3 id="Install-Firefox"><a href="#Install-Firefox" class="headerlink" title="Install Firefox"></a>Install Firefox</h3><p><code>step1</code> : Add Firefox repository to Ubuntu software repository</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:mozillateam/firefox-next</div></pre></td></tr></table></figure><p><code>step2</code> : Update system</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt update &amp;&amp; sudo apt upgrade </div><div class="line"><span class="comment"># If you ever had installed Firefox, it will update \</span></div><div class="line"><span class="comment"># Firefox to the lastest version, in other words, \</span></div><div class="line"><span class="comment">#  you don't need to follow the later steps, just skip them.</span></div></pre></td></tr></table></figure><p><code>step3</code> : Install Firefox</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install firefox</div></pre></td></tr></table></figure><p>To here, you have succeeded to install Firefox. To install  geckodriver, you need to download it from <a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="external">this site</a>, before downloading, please check your Firefox version, and choose the corresponding geckodriver version to download.</p><p>To remove Firefox from you machine </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt remove --purge firefox</div><div class="line">sudo add-apt-repository --remove ppa:mozillateam/firefox-next</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog serves as a note for installing chrome &amp;amp; Firefox on Ubuntu16.04.&lt;/p&gt;
&lt;h3 id=&quot;Install-Chrome&quot;&gt;&lt;a href=&quot;#Install-Chrome&quot; clas
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>记一次Nodejs项目在云上的部署过程</title>
    <link href="https://free-free.github.io/2018/08/14/an-experience-of-deploying-nodejs-project-on-cloud/"/>
    <id>https://free-free.github.io/2018/08/14/an-experience-of-deploying-nodejs-project-on-cloud/</id>
    <published>2018-08-14T10:19:25.000Z</published>
    <updated>2019-03-13T08:59:22.774Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近由于项目需要，需要部署上线，在这里记下部署的过程。所用到的技术栈，前端使用<code>vue</code>+<code>element-ui</code>+<code>vue-router</code>，后端<code>mongodb</code>+<code>nodejs</code>+<code>nginx</code>  + <code>pm2</code>由于之前一直没有在云上部署过nodejs相关的项目，这次借此机会来游走一下全程，一路上风景肆意，惊心动魄，可谓蔚为壮观也。近日心血来潮，遂在博客上记录下此过程，以便他日他人有所参考，既是功德一件。</p><p>在正式开始之前先讲一讲所用到技术在此此项目中的角色。</p><ul><li><p><code>vue</code></p><p><a href="https://vuejs.org/" target="_blank" rel="external">vue</a>就不用多说了，响应式的前端框架，和<a href="https://reactjs.org/" target="_blank" rel="external">React</a>和<a href="https://docs.angularjs.org/" target="_blank" rel="external">Angularjs</a>是一类东西，在此项目中用于构建前端界面。之所以选用vue，是因为vue相比其他前端框架，上手快，轻量化一点。</p></li><li><p><code>element-ui</code></p><p><a href="http://element-cn.eleme.io/#/" target="_blank" rel="external">element-ui</a>是适用于vue的前端UI框架，除此之外还可以用于React和Angularjs。<code>element-ui</code>提供了常用的前端UI控件。在项目使用它的好处也很明显，很多控件不用自己从头开始，开发效率会提升很多。</p></li><li><p><code>vue-router</code></p><p>负责<code>vue</code>的路由控制，是开发<code>SPA(Single Page Application)</code>不可少的，<code>SPA</code>的例子可以参看一下网易云音乐的网页版。</p></li><li><p><code>mongodb</code></p><p>作为后端数据储存服务，想过使用<code>mysql</code> ，但考虑到项目的变化比较大，果断选择<code>mongodb</code>。</p></li><li><p><code>nodejs</code></p><p>后端服务的主要开发语言，全程异步模式开启，还是有点爽，而且部署相比与<code>Python</code>要简单一点。缺点就是回调hell，让我有点措手不及。</p></li><li><p><code>nginx</code></p><p><code>nginx</code>在此项目中主要有两个作用。</p><p>作用一：前端Vue构建之后，全部是静态页面，使用<code>nginx</code>作为静态文件伺服器；</p><p>作用二：反向代理，将前端的API请求转发到<code>nodejs</code>后端服务上去。</p></li><li><p><code>pm2</code></p><p>pm2 是一个带有负载均衡功能的Nodejs应用进程管理器.当你要把你的独立代码利用全部的服务器上的所有CPU,并保证进程永远都活着,0秒的重载。此项目中使用<code>pm2</code>来管理后端的<code>nodejs</code>服务。</p></li></ul><h3 id="前端构建"><a href="#前端构建" class="headerlink" title="前端构建"></a>前端构建</h3><h4 id="build过程"><a href="#build过程" class="headerlink" title="build过程"></a>build过程</h4><p>项目中使用vue-cli来初始化的代码，vue-cli会自动把构建工具<code>webpack</code>和构建脚本创建好，需要build的时候，只需要在shell项目目录下输入下面命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure><p>执行上面命令之后，build好的静态文件会放在<code>dist</code>目录下，将该目录下的所有文件copy到你的<code>nginx</code> root 目录下即可（上传到服务推荐使用scp，感觉不错）。虽然过程简单，但是构建过程中还是遇到一些问题。</p><h4 id="build过程遇到问题"><a href="#build过程遇到问题" class="headerlink" title="build过程遇到问题"></a>build过程遇到问题</h4><p><strong><code>一、问题一：vendor.js文件多大</code></strong></p><p>执行build命令之后，提示<code>vendor.js</code>文件过大，达到了800+KB。开始感觉800+KB对于现在的网络速度应该不大大，强行上传到服务器运行。一运行，发现被打脸了，首屏加载时间达到了4s+。这速度连我自己都忍受不了，还是果断想法优化<code>vendor.js</code>。</p><p><strong><code>问题一解决办法</code></strong></p><p><code>vendor.js</code>之所以那么大，原因在于打包的时候，会将项目中<code>import</code> 的<code>vue</code> 、<code>vue-router</code> 、 <code>element-ui</code>和<code>axios</code>一起打包到<code>vendor.js</code>中。查了官网和其他资料之后，针对<code>vendor.js</code>过大导致加载速度慢的解决办法大致有下面四种：</p><ol><li>在打包的时候，将<code>vendor.js</code>分成多个文件打包，具体可参见<a href="https://segmentfault.com/q/1010000008832754" target="_blank" rel="external">here</a> 。</li><li>使用vue路由懒加载，这样的话不用一次性将<code>vendor.js</code>的所有内容都下载到客户端，而是根据当前路由所需要组件，从后端拉取相应的部分，路由懒加载可参见<a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#把组件按组分块" target="_blank" rel="external">官网</a> ，<a href="https://blog.csdn.net/qq_37540004/article/details/78727063" target="_blank" rel="external">文章1</a> ，<a href="https://www.cnblogs.com/zhanyishu/p/6587571.html" target="_blank" rel="external">文章2</a> 。</li><li>使用外部加载，将<code>vue</code> 、<code>vue-router</code> 、<code>element-ui</code> 和<code>axios</code>使用cdn引入，这样<code>vendor.js</code>将大大减小，浏览器访问时，能够开多个连接同时下载<code>vue</code> 、<code>vue-router</code> 、<code>element-ui</code> 和<code>axios</code> ，速度提升是可想而知。</li><li>使用SSR(服务端渲染)，使用SSR可选用<a href="https://nuxtjs.org/" target="_blank" rel="external">nuxt.js</a> ，具体可参见<a href="https://cn.vuejs.org/v2/guide/ssr.html" target="_blank" rel="external">这里</a> 。讲真，我开始天真的想要使用<code>nuxt.js</code> ，但参看了官网之后，我放弃了，有点不明觉厉官网在讲神马，叹息一声，自己能力不够呀。还有对于此项目，也没有必须要使用SSR。</li></ol><p>上述四种方法，各有各的优缺点，<code>方法1</code>和<code>方法3</code>都试图将<code>vendor.js</code>减小分成多个文件，充分利用浏览器的多连接下载，提高加载速度；<code>方法3</code>则将<code>vendor.js</code>里面的内容按需下载，不需要一次性下载全部内容，提高首次加载速度；<code>方法4</code>直接在服务端将页面渲染出来，这样即能提高加载速度，又有益于SEO优化，但难度确实有点大，建议新手不要去打击自己的信心。</p><p>最终自己选用相对简单一点的<code>方法3</code> ，其过程如下：</p><ol><li><p>在项目<code>build</code>目录下的<code>webpack.base.conf.js</code>文件中加入下面配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">externals:&#123;</div><div class="line">  <span class="string">'vue'</span>:<span class="string">'Vue'</span>,</div><div class="line">  <span class="string">'element-ui'</span>:<span class="string">'ElementUI'</span>,</div><div class="line">  <span class="string">'axios'</span>:<span class="string">'axios'</span>,</div><div class="line">  <span class="string">'vue-router'</span>:<span class="string">"VueRouter"</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>其中配置项的<code>key</code>为需要外部加载的库名称，<code>value</code>为需要从库中引入的对象名称，该对象作为全局对象的暴露给其他文件，等效于在<code>js</code>文件中使用<code>import</code>引入库中的对象，上述配置即等价于下面内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</div><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</div></pre></td></tr></table></figure></li><li><p>在项目根目录下<code>index.html</code>，添加各个库对应的cdn链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>cnki swust<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.5.16/vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/axios/0.18.0/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/element-ui/2.4.0/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>不要将cdn链接错误的放到<code>body</code>后面，不然导致vuejs不能找到外部引入的对象。</p></li><li><p>在<code>main.js</code>和其他通过<code>import</code>引入<code>vue</code> 、<code>vue-router</code> 、<code>element-ui</code> 和<code>axios</code>对象的文件中，删除对应的<code>import</code>代码，并把<code>main.js</code>中 <code>Vue.use(VueRouter)</code>和<code>Vue.use(ElementUI)</code>语句删掉。</p></li><li><p>重新<code>build</code> ， 你会奇迹的发现<code>vendor.js</code>只有90+KB大小了。恩，好，不错地。第一问题算是解决了。</p><p>如果你觉得你的<code>vendor.js</code>文件开始有点大，可以开启压缩模式，在项目<code>config</code>目录下的<code>index.js</code>文件中使能下面选项：</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// npm install --save-dev compression-webpack-plugin</span></div><div class="line">  productionGzip: <span class="literal">true</span>,</div><div class="line">  productionGzipExtensions: [<span class="string">'js'</span>, <span class="string">'css'</span>],</div></pre></td></tr></table></figure><p>并执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev compression-webpack-plugin</div></pre></td></tr></table></figure><p>完成上面过程后，再次<code>build</code>，你会发现<code>build</code>结果中会多出与<code>css</code>和<code>js</code>文件同名，以<code>gz</code>结尾的文件，前端加载时会优先加载这些压缩文件，进一步提高页面下载速度。</p><p><strong><code>二、问题二：ERROR from static/js/vendor.js from UglifyJS Unexpected Token ....</code></strong></p><p>在<code>build</code>的时候，总是出现上述错误，原因在于UglifyJs不能识别ES6语法。针对此问题有两种解决方法</p><ol><li><p>使用<code>babel-loader</code>将含有ES6语法的文件转换一下，再使用UglifyJs进行压缩。</p><p>只需要打开<code>build/webpack.base.conf.js</code>文件，在<code>module&gt;rules&gt;babel-loader</code>对应的配置项对应的<code>include</code>字段中添加中含有ES6语法文件的所在目录即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.js$/</span>,</div><div class="line">    loader: <span class="string">'babel-loader'</span>,</div><div class="line">      include: [</div><div class="line">        resolve(<span class="string">'src'</span>), </div><div class="line">        resolve(<span class="string">'test'</span>),</div><div class="line">        resolve(<span class="string">'exmaple-dir'</span>)</div><div class="line">      ]</div><div class="line">&#125;,</div></pre></td></tr></table></figure></li><li><p>使用<code>babili-webpack-plugin</code>插件替代<code>UglifyJs</code></p><p>安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install babili-wepback-plugin --save-dev </div><div class="line">npm install babel-core@6.21.0</div></pre></td></tr></table></figure><p>在<code>build/webpack.prod.conf.js</code>文件的<code>pulgins</code>配置项使用<code>babili-webpack-plugin</code>替换<code>UglifyJs</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">  <span class="comment">/*</span></div><div class="line"><span class="comment">  new webpack.optimize.UglifyJsPlugin(&#123;</span></div><div class="line"><span class="comment">        compress: &#123;</span></div><div class="line"><span class="comment">          warnings: false</span></div><div class="line"><span class="comment">        &#125;,</span></div><div class="line"><span class="comment">        sourceMap: true</span></div><div class="line"><span class="comment">  &#125;)</span></div><div class="line"><span class="comment">  */</span></div><div class="line">  <span class="keyword">new</span> <span class="built_in">require</span>(<span class="string">'babili-webpack-plugin'</span>)() </div><div class="line">],</div></pre></td></tr></table></figure><p>​</p></li></ol><h3 id="后端环境搭建"><a href="#后端环境搭建" class="headerlink" title="后端环境搭建"></a>后端环境搭建</h3><h4 id="1-云服务选择"><a href="#1-云服务选择" class="headerlink" title="1. 云服务选择"></a>1. 云服务选择</h4><p>之前一直选用阿里云，这一次想试一下腾讯云。以前服务器操作系统选用的CentOS，这一次选用Ubuntu。腾讯云最近在搞活动，学生认证之后，<code>10RMB</code>就可以买到<code>1CPU+2G Mem+40G Disk</code> ，而且还有50G对象储存服务，感谢腾讯云对教育的支持（鼓掌）。当然阿里云也有学生认证服务器，传说中的云翼计划，也是<code>10RMB</code>=<code>1CPU+2G Mem+ 40G SSD</code> ，不过没有50G的对象储存服务，还是小马家要富裕一点(抠鼻)。不管怎样，都感谢两家公司对教育的支持。</p><h4 id="2-安装Nodejs"><a href="#2-安装Nodejs" class="headerlink" title="2.  安装Nodejs"></a>2.  安装Nodejs</h4><ul><li><p>使用<code>apt</code>安装nodejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install nodejs-legacy</div></pre></td></tr></table></figure><p>安装之后发现nodejs版本太老了，才4.6.0，果断自己下载安装</p></li><li><p>下载安装nodejs(推荐)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wget https://npm.taobao.org/mirrors/node/v10.8.0/node-v10.8.0-linux-x64.tar.xz</div><div class="line">tar -xvf node-v10.8.0-linux-x64.tar.xz</div><div class="line">mv node nodejs</div><div class="line">sudo mv nodejs /opt/ <span class="comment"># 安装到/opt目录下</span></div><div class="line"><span class="built_in">echo</span> -e <span class="string">'PATH=$PATH:/opt/nodejs/bin\nexport PATH'</span> &gt;&gt; ~/.bashrc <span class="comment"># 添加到环境变量</span></div><div class="line"><span class="built_in">source</span> ~/.bashrc</div><div class="line"><span class="comment"># 安装nvm</span></div><div class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</div></pre></td></tr></table></figure></li></ul><h4 id="3-安装和配置nginx"><a href="#3-安装和配置nginx" class="headerlink" title="3. 安装和配置nginx"></a>3. 安装和配置nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install nginx</div></pre></td></tr></table></figure><p>通过apt安装的nginx版本为1.10.3，版本还比较新，可以直接使用。nginx在本项目中主要作为前端静态文件伺服和后端服务的反代理，维持需要进行一定配置，配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">user www-data;</div><div class="line">worker_processes auto;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">worker_connections 1024;</div><div class="line"><span class="comment"># multi_accept on;</span></div><div class="line">use epoll;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line"></div><div class="line">log_format main <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></div><div class="line">                        <span class="string">'$status $body_bytes_sent "$http_referer" '</span></div><div class="line"><span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</div><div class="line"><span class="comment">##</span></div><div class="line"><span class="comment"># Basic Settings</span></div><div class="line"><span class="comment">##</span></div><div class="line"></div><div class="line">sendfile on;</div><div class="line">tcp_nopush on;</div><div class="line">tcp_nodelay on;</div><div class="line">keepalive_timeout 65;</div><div class="line">types_hash_max_size 2048;</div><div class="line">fastcgi_intercept_errors on;</div><div class="line"><span class="comment"># server_tokens off;</span></div><div class="line"></div><div class="line"><span class="comment"># server_names_hash_bucket_size 64;</span></div><div class="line"><span class="comment"># server_name_in_redirect off;</span></div><div class="line"></div><div class="line">include /etc/nginx/mime.types;</div><div class="line">default_type application/octet-stream;</div><div class="line"></div><div class="line"><span class="comment">##</span></div><div class="line"><span class="comment"># SSL Settings</span></div><div class="line"><span class="comment">##</span></div><div class="line"></div><div class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <span class="comment"># Dropping SSLv3, ref: POODLE</span></div><div class="line">ssl_prefer_server_ciphers on;</div><div class="line"></div><div class="line"><span class="comment">##</span></div><div class="line"><span class="comment"># Logging Settings</span></div><div class="line"><span class="comment">##</span></div><div class="line"></div><div class="line">access_log /var/<span class="built_in">log</span>/nginx/access.log;</div><div class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log;</div><div class="line"></div><div class="line"><span class="comment">##</span></div><div class="line"><span class="comment"># Gzip Settings</span></div><div class="line"><span class="comment">##</span></div><div class="line"></div><div class="line">gzip on;</div><div class="line">gzip_disable <span class="string">"msie6"</span>;</div><div class="line"></div><div class="line"><span class="comment"># gzip_vary on;</span></div><div class="line"><span class="comment"># gzip_proxied any;</span></div><div class="line"><span class="comment"># gzip_comp_level 6;</span></div><div class="line"><span class="comment"># gzip_buffers 16 8k;</span></div><div class="line"><span class="comment"># gzip_http_version 1.1;</span></div><div class="line"><span class="comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span></div><div class="line"></div><div class="line"><span class="comment">##</span></div><div class="line"><span class="comment"># Virtual Host Configs</span></div><div class="line"><span class="comment">##</span></div><div class="line">upstream back-server&#123;</div><div class="line">    server 127.0.0.1:3000;</div><div class="line">    server 127.0.0.1:3001;</div><div class="line">&#125;</div><div class="line">server&#123;</div><div class="line">    listen 80;</div><div class="line">        server_name www.xyz.com;</div><div class="line">        <span class="comment">#存放前端静态文件</span></div><div class="line">    root /var/www/xyz/;</div><div class="line">    index index.html;</div><div class="line">    <span class="comment"># 将404页面重定向到index.html</span></div><div class="line">    try_files <span class="variable">$uri</span> /index.html = 404;</div><div class="line">    <span class="comment"># 反向代理，将API请求转发到后端服务</span></div><div class="line">    location /api/ &#123;</div><div class="line">                proxy_set_header Cookie <span class="variable">$http_cookie</span>;</div><div class="line">                proxy_set_header Host <span class="variable">$http_host</span>;</div><div class="line">                proxy_redirect off;</div><div class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">                proxy_set_header X-Scheme <span class="variable">$scheme</span>;</div><div class="line">                proxy_pass http://back-server;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">include /etc/nginx/conf.d/*.conf;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>配置完成后，重启nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart nginx</div><div class="line">sudo systemctl <span class="built_in">enable</span> nginx <span class="comment"># 开机启动nginx</span></div></pre></td></tr></table></figure><h4 id="4-安装和配置mongodb"><a href="#4-安装和配置mongodb" class="headerlink" title="4.安装和配置mongodb"></a>4.安装和配置mongodb</h4><ul><li><p>使用<code>apt</code>安装mongodb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install mongodb</div></pre></td></tr></table></figure><p>安装之后发现mongodb版本为2.6.0，版本太老了，mongodb最新版本已经到了3.6.x，还是选用其他安装方法吧。</p></li><li><p>手动添加mongodb源安装(使用阿里源)[推荐]</p><ol><li><p>导入阿里源的公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5</div></pre></td></tr></table></figure></li><li><p>添加源文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"deb [ arch=amd64,arm64 ] http://mirrors.aliyun.com/mongodb/apt/ubuntu xenial/mongodb-org/3.6 multiverse"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list</div></pre></td></tr></table></figure></li><li><p>安装最新mongodb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt update</div><div class="line">sudo apt install mongodb-org</div></pre></td></tr></table></figure></li></ol><p>安装完成，对mongodb进行如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mongod.conf</span></div><div class="line"></div><div class="line"><span class="comment"># for documentation of all options, see:</span></div><div class="line"><span class="comment">#   http://docs.mongodb.org/manual/reference/configuration-options/</span></div><div class="line"></div><div class="line"><span class="comment"># Where and how to store data.</span></div><div class="line"><span class="attr">storage:</span></div><div class="line"><span class="attr">  dbPath:</span> <span class="string">/var/lib/mongodb</span></div><div class="line"><span class="attr">  journal:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></div><div class="line"><span class="comment">#  engine:</span></div><div class="line"><span class="comment">#  mmapv1:</span></div><div class="line"><span class="comment">#  wiredTiger:</span></div><div class="line"></div><div class="line"><span class="comment"># where to write logging data.</span></div><div class="line"><span class="attr">systemLog:</span></div><div class="line"><span class="attr">  destination:</span> <span class="string">file</span></div><div class="line"><span class="attr">  logAppend:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  path:</span> <span class="string">/var/log/mongodb/mongod.log</span></div><div class="line"></div><div class="line"><span class="comment"># network interfaces</span></div><div class="line"><span class="attr">net:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">27017</span></div><div class="line">  <span class="comment"># 绑定到本地ip</span></div><div class="line"><span class="attr">  bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></div></pre></td></tr></table></figure><h1 id="how-the-process-runs"><a href="#how-the-process-runs" class="headerlink" title="how the process runs"></a>how the process runs</h1><p>processManagement:<br>  timeZoneInfo: /usr/share/zoneinfo</p><h1 id="security"><a href="#security" class="headerlink" title="security:"></a>security:</h1><h1 id="operationProfiling"><a href="#operationProfiling" class="headerlink" title="operationProfiling:"></a>operationProfiling:</h1><h1 id="replication"><a href="#replication" class="headerlink" title="replication:"></a>replication:</h1><h1 id="sharding"><a href="#sharding" class="headerlink" title="sharding:"></a>sharding:</h1><h2 id="Enterprise-Only-Options"><a href="#Enterprise-Only-Options" class="headerlink" title="Enterprise-Only Options:"></a>Enterprise-Only Options:</h2><h1 id="auditLog"><a href="#auditLog" class="headerlink" title="auditLog:"></a>auditLog:</h1><h1 id="snmp"><a href="#snmp" class="headerlink" title="snmp:"></a>snmp:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">项目中数据量不大，不需要考虑分片和复制集的配置，如果需要专业的，建议使用云数据库，省去很多数据库运维的麻烦。</div><div class="line"></div><div class="line">重启mongodb</div><div class="line"></div><div class="line">```bash</div><div class="line">sudo systemctl restart mongod</div><div class="line">sudo systemctl enable mongod # 开机启动mongodb</div></pre></td></tr></table></figure></li></ul><h4 id="5-安装pm2"><a href="#5-安装pm2" class="headerlink" title="5. 安装pm2"></a>5. 安装pm2</h4><p>常用的进程管理器有supervisor、pm2和forever，在本项目中，选用功能较为强大的pm2。pm2负责管理后端的nodejs服务。</p><p><code>安装</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i pm2 -g</div></pre></td></tr></table></figure><p><code>使用pm2启动后端服务</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pm2 start ./bin/www -i 2 --name=<span class="string">"api"</span> <span class="comment">#启动两个后端服务实例</span></div><div class="line">pm2 startup <span class="comment"># 开启启动</span></div></pre></td></tr></table></figure><p>详细的pm2命令请查看<a href="http://pm2.keymetrics.io/" target="_blank" rel="external">这里</a></p><h3 id="结术语"><a href="#结术语" class="headerlink" title="结术语"></a>结术语</h3><p>至此，一个nodejs项目云上部署过程已经完成，部署过程中并没有考虑到监考和报警之类的功能，在未来的日子再考虑吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近由于项目需要，需要部署上线，在这里记下部署的过程。所用到的技术栈，前端使用&lt;code&gt;vue&lt;/code&gt;+&lt;code&gt;element-
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
      <category term="nodejs" scheme="https://free-free.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Compile &amp; Install python3.5 on Raspberry PI 3B</title>
    <link href="https://free-free.github.io/2018/08/12/compile-and-install-python3-5-on-raspberrypi/"/>
    <id>https://free-free.github.io/2018/08/12/compile-and-install-python3-5-on-raspberrypi/</id>
    <published>2018-08-12T08:21:19.000Z</published>
    <updated>2018-08-12T08:47:28.046Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I am going to run my python3.x program on raspberry pi 3B, unfortunately Python3.x are not installed on raspberry pi, after checking the most of online-tutorials and other materials , I have successfully installed Python3.5 on machine from source code . The purpose of this blog is about to being a note for installation.</p><h4 id="Install-dependencies"><a href="#Install-dependencies" class="headerlink" title="Install dependencies"></a>Install dependencies</h4><p>Before getting to the installation process, the several libraries need to be installed firstly, the list of those libraries are as follows, you are supposed to install them using <code>apt-get</code> command</p><p><code>libbz2-dev</code>、<code>libncurses5-dev</code>、<code>libncursesw5-dev</code>、<code>libdb-dev</code>、<code>libgdbm-dev</code>、<code>liblzma-dev</code>、<code>libsqlite3-dev</code> 、<code>tk-dev</code>、<code>libreadline-dev</code>、<code>zlib1g-dev</code>、<code>libexpat1-dev</code> 、<code>openssl</code> 、 <code>libssl-dev</code></p><h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><h5 id="download-python3-5"><a href="#download-python3-5" class="headerlink" title="download python3.5"></a>download python3.5</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz</div><div class="line">$ tar -zxvf Python-3.5.0.tgz</div></pre></td></tr></table></figure><h5 id="compile-and-install-it"><a href="#compile-and-install-it" class="headerlink" title="compile and install it"></a>compile and install it</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> Python-3.5.0</div><div class="line">$ ./configure</div><div class="line">$ make </div><div class="line">$ sudo make install</div></pre></td></tr></table></figure><p>The compilation and installation process are going to take 20+ minutes on PI 3B, it will be slower on PI 2B, so go to take a snap or take a coffee. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I am going to run my python3.x program on raspberry pi 3B, unfortunately Python3.x are not installed on raspberry pi, after chec
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Perspective Transform in Digital Image Processing</title>
    <link href="https://free-free.github.io/2018/07/07/perspective-transformation/"/>
    <id>https://free-free.github.io/2018/07/07/perspective-transformation/</id>
    <published>2018-07-07T12:21:29.000Z</published>
    <updated>2018-08-07T08:27:07.398Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h3><p>What’s the Perspective Transform? From the mathematical points of view, Perspective Transform is a linear transform that is the same thing what has been taught in algebra class. From the viewpoints of digital image processing, Perspective Transform is responsible for transforming the objects in one perspective plane to the corresponding objects in another perspective plane. Since we have learned about linear transform,  I’d like to focus on the application of  Perspective Transform in the digital image processing fields. As mentioned before, Perspective Transform is a linear transform, as a result ,we can represent it with the following formula:</p><script type="math/tex; mode=display">\begin{bmatrix}u^{'}\\v^{'}\\w^{'}\end{bmatrix} = \begin{bmatrix}m_{11} & m_{12} & m_{13}\\ m_{21}& m_{22} & m_{23} \\ m_{31} & m_{32} & m_{33}\end{bmatrix} \times \begin{bmatrix}x \\ y \\ 1\end{bmatrix}​</script><p>$x, y$ represent the pixels position of the original images, well, the pixels position of the transformed images is denoted as $x^{‘},y^{‘}$.</p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Introduction&quot;&gt;&lt;a href=&quot;#1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;1. Introduction&quot;&gt;&lt;/a&gt;1. Introduction&lt;/h3&gt;&lt;p&gt;What’s the Perspecti
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="digital image processing" scheme="https://free-free.github.io/tags/digital-image-processing/"/>
    
  </entry>
  
  <entry>
    <title>How to Publish Your Package on PyPi</title>
    <link href="https://free-free.github.io/2018/06/18/how-to-publish-your-package-on-pypi/"/>
    <id>https://free-free.github.io/2018/06/18/how-to-publish-your-package-on-pypi/</id>
    <published>2018-06-18T01:55:05.000Z</published>
    <updated>2018-06-18T23:47:33.843Z</updated>
    
    <content type="html"><![CDATA[<p>As an novice of python, I bet you are sometimes wondering how to publish your package on <a href="https://pypi.o rg/" target="_blank" rel="external">PyPi</a> like I’ve ever done. So today I would like to introduce how to publish your python package on <a href="https://pypi.org/" target="_blank" rel="external">PyPi</a> step by step, hopefully you enjoy it.</p><p>Publishing package on <a href="https://pypi.org/" target="_blank" rel="external">PyPi</a> is simply divided into the following few steps:</p><p><code>step1</code>:  Create python your <a href="https://pypi.org/" target="_blank" rel="external">PyPi</a> account on its <a href="https://pypi.org/" target="_blank" rel="external">website</a>.</p><p><code>step2</code>:  Create your <strong>setup.py</strong> in project’s top directory.</p><p><code>step3</code>:  Build your package wheel, then test it on your local environment just in case the wrongs on your <strong>steup.py</strong> file.</p><p><code>step4</code>: Upload your wheel files to <a href="https://pypi.org/" target="_blank" rel="external">PyPi</a>.</p><h3 id="Step1-Create-PyPi-Account"><a href="#Step1-Create-PyPi-Account" class="headerlink" title="Step1: Create PyPi Account"></a>Step1: Create PyPi Account</h3><p>Unless you have ever created PyPi account, you’ll need to register one on it’s <a href="https://pypi.org/account/register/" target="_blank" rel="external">website</a>, then sign in. Do be scare of it, it’s very simple and completely not trivial as like you register on other website.</p><p><img src="http://bmob-cdn-20029.b0.upaiyun.com/2018/06/18/f15f7a5940ae696880a321f4b6402e27.png" alt=""></p><p>As the figure above, you just need to type in your name, email and password, then hit  bottom button, the rest of stuffs  will be automatically completed by system.</p><h3 id="Step2-Create-setup-py-File"><a href="#Step2-Create-setup-py-File" class="headerlink" title="Step2: Create setup.py File"></a>Step2: Create setup.py File</h3><p>Although Creating <strong>setup.py</strong> file is the most trickiest part and more trivial , the minimal working configuration is much easier than your expectations. A minimal working configuration of <strong>setup.py</strong> file is shown as below. As an aside , this example is picked from my project <a href="https://github.com/free-free/submail" target="_blank" rel="external">submail</a>. For more details about <strong>setup</strong> file , you can refer to the <a href="https://packaging.python.org/tutorials/packaging-projects/#setup-args" target="_blank" rel="external">official documentation</a>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="keyword">return</span> open(os.path.join(os.path.dirname(__file__),f)).read().strip()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_version</span><span class="params">(f)</span>:</span></div><div class="line">    file_content = read(f)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        version = re.findall(<span class="string">r'^__version__ = "([^\'\"]+)"\r?$'</span>,</div><div class="line">            file_content, re.M)[<span class="number">0</span>]</div><div class="line">    <span class="keyword">except</span> IndexError:</div><div class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">"Unable to determine version."</span>)</div><div class="line">    <span class="keyword">return</span> version</div><div class="line"></div><div class="line"></div><div class="line">setup(</div><div class="line">    name=<span class="string">"submail"</span>,</div><div class="line">    version=find_version(<span class="string">"submail/__init__.py"</span>),</div><div class="line">    author=<span class="string">"HuangBiao"</span>,</div><div class="line">    author_email=<span class="string">"19941222hb@gmail.com"</span>,</div><div class="line">    long_description=read(<span class="string">'README.rst'</span>),</div><div class="line">    description=<span class="string">"submail sdk"</span>,</div><div class="line">    url=<span class="string">"https://github.com/free-free/submail"</span>,</div><div class="line">    license=<span class="string">"MIT"</span>,</div><div class="line">    packages=find_packages(),</div><div class="line">    install_requires=[<span class="string">"requests"</span>, <span class="string">"pytest"</span>],</div><div class="line">    include_package_data=<span class="keyword">True</span>,</div><div class="line">    keywords=[<span class="string">'submail'</span>,<span class="string">'sdk'</span>],</div><div class="line">    classifiers=[</div><div class="line">        <span class="string">'Intended Audience :: Developers'</span>,</div><div class="line">        <span class="string">'License :: OSI Approved :: MIT License'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python :: 3'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python :: 3.3'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python :: 3.4'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python :: 3.5'</span>,</div><div class="line">        <span class="string">'Topic :: Software Development :: Libraries :: Python Modules'</span>,</div><div class="line">        <span class="string">'Topic :: Internet :: WWW/HTTP :: Dynamic Content'</span></div><div class="line">    ]</div><div class="line">)</div></pre></td></tr></table></figure><p>Skimming through the above example, I suppose you have understood the most parts of <strong>setup</strong> file. Especially here I’d like to focus on the argument <code>classifiers</code>. Cause the number of available values of <code>classifiers</code> are numerous.  so make sure to consult the <a href="https://pypi.org/pypi?%3Aaction=list_classifiers" target="_blank" rel="external">classifiers list</a>, as anything else will cause an error. Again, be sure to read the <a href="https://packaging.python.org/tutorials/packaging-projects/#setup-args" target="_blank" rel="external">documentation</a> for more information  on it, since explaining what all these arguments exactly mean is beyond purpose of this article, maybe I will  do it in another new article.</p><h3 id="Step3-Build-Package-Wheel"><a href="#Step3-Build-Package-Wheel" class="headerlink" title="Step3: Build Package Wheel"></a>Step3: Build Package Wheel</h3><p>Once creation of <code>setup.py</code> file is done, you can try and  build your package wheel files, then just need to type the following command in your bash shell, the package wheel will automatically be generated</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python setup.py bdist_wheel</div></pre></td></tr></table></figure><p>After doing that, there will be several new directories being created, all you need to know is the <code>dist</code>  directory, it contains your package wheel file. Also, it’s a good practice to try to install the new package , since it is particularly useful for testing your configurations whether are correct.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python install dist/my-project.whl</div></pre></td></tr></table></figure><p>It’s a good indicator that everything is ok , when there are no errors occurring in your installation process.  it’s time to upload your package to PyPi.</p><h3 id="Step4-Upload-Wheel-File-To-PyPi"><a href="#Step4-Upload-Wheel-File-To-PyPi" class="headerlink" title="Step4: Upload Wheel File To PyPi"></a>Step4: Upload Wheel File To PyPi</h3><p>it is need to install  <a href="https://pypi.org/project/twine/" target="_blank" rel="external">Twine</a> before uploading your package. Twine is a tool for publishing package on PyPi, it’s recommend to read the <a href="https://pypi.org/project/twine/" target="_blank" rel="external">official documentation</a>. Unless you ever have installed  Twine,  you need to install Twine by following the command below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install twine</div></pre></td></tr></table></figure><p>Once succeed to install twine, all you need is to upload your wheel file using Twine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ twine upload dist/*</div></pre></td></tr></table></figure><p>Provided you have a valid <code>~/.pypirc</code>, it will just ask for your password. Or it will ask for your PyPI’s  username and password, then type them. For the sake of convenience, you can priorly create <code>.pypirc</code> file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[distutils]</div><div class="line">index-servers=pypi</div><div class="line"></div><div class="line">[pypi]</div><div class="line">username: your pypi username</div><div class="line">password: your pypi password</div><div class="line">repository: https://upload.pypi.org/legacy/</div></pre></td></tr></table></figure><p>Congratulations! You have just learned to how to share your package with community. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As an novice of python, I bet you are sometimes wondering how to publish your package on &lt;a href=&quot;https://pypi.o rg/&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Top Conference &amp; Journal in DIP &amp; CV</title>
    <link href="https://free-free.github.io/2018/05/22/top-conference-and-journal-of-dip-and-computer-vision/"/>
    <id>https://free-free.github.io/2018/05/22/top-conference-and-journal-of-dip-and-computer-vision/</id>
    <published>2018-05-22T06:42:25.000Z</published>
    <updated>2018-05-22T08:37:05.565Z</updated>
    
    <content type="html"><![CDATA[<h3 id="International-Conference"><a href="#International-Conference" class="headerlink" title="International Conference"></a>International Conference</h3><ul><li><p><strong>ICCV:</strong> International Conference on Computer Vision</p><p><a href="http://iccv2017.thecvf.com/" target="_blank" rel="external">site link(2017)</a></p></li><li><p><strong>CVPR:</strong> International Conference on Computer Vision and Patter Recognition</p><p><a href="http://cvpr2018.thecvf.com/" target="_blank" rel="external">site link(2018)</a></p></li><li><p><strong>ECCV:</strong> European Conference on Computer Vision</p><p><a href="https://eccv2018.org/" target="_blank" rel="external">site link(2018)</a></p></li></ul><h3 id="International-Journal"><a href="#International-Journal" class="headerlink" title="International Journal"></a>International Journal</h3><ul><li><strong><a href="https://www.computer.org/portal/web/tpami" target="_blank" rel="external">PAMI</a>:</strong> IEEE Transaction on Pattern Analysis and Machine Intelligence</li><li><strong><a href="https://link.springer.com/journal/11263" target="_blank" rel="external">IJCV</a>:</strong> International Journal of Computer Vision</li><li><strong><a href="https://www.journals.elsevier.com/pattern-recognition/" target="_blank" rel="external">PR</a>:</strong> Pattern Recognition</li><li><strong><a href="https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=83" target="_blank" rel="external">TIP</a>:</strong> IEEE Transaction on Image Processing</li><li><strong><a href="https://www.journals.elsevier.com/image-and-vision-computing" target="_blank" rel="external">IVC</a>:</strong> Image and Vision Computing</li></ul><p>With the above mentioned conferences &amp; journals, one can easily track the latest research topic on the website each of them, it is the tremendous convenience for those who has just involved in this field.</p><h3 id="Papers"><a href="#Papers" class="headerlink" title="Papers"></a>Papers</h3><ul><li><p>Median Filter</p><p>J.W.Turkey. Exploratory data analysis[J]. Menlo Park, CA: Addison-Wesley, 1971, 1977.</p><p>J.W.Turkey. Nonlinear methods for smoothing data[J]. Congr. Rec. 1974, EASCON, 1974,673.</p></li><li><p>High Pass Filter</p><p>Rovers L G. Machine Perception of Three-dimension[D].Massachusetts Institute of Technology, 1963.</p><p>Prewitt J M S. Object enhancement and extraction[J]. Picture processing and Psychopictorics,1970, 10(1):15 - 19.</p><p>Sobel I, Feldman G. A 3x3 isotropic gradient operator for image processing[J]. A talk at the standford Artificial Project in , 1968:271-272.</p><p>​</p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;International-Conference&quot;&gt;&lt;a href=&quot;#International-Conference&quot; class=&quot;headerlink&quot; title=&quot;International Conference&quot;&gt;&lt;/a&gt;International 
      
    
    </summary>
    
    
      <category term="digital image processing" scheme="https://free-free.github.io/tags/digital-image-processing/"/>
    
  </entry>
  
  <entry>
    <title>Gray Scale Transformation of Digital Image</title>
    <link href="https://free-free.github.io/2018/05/14/gray-scale-transformation-of-digital-image/"/>
    <id>https://free-free.github.io/2018/05/14/gray-scale-transformation-of-digital-image/</id>
    <published>2018-05-14T08:12:51.000Z</published>
    <updated>2018-05-22T06:52:59.086Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="digital image processing" scheme="https://free-free.github.io/tags/digital-image-processing/"/>
    
  </entry>
  
  <entry>
    <title>Householder Transform(mirror/reflection)</title>
    <link href="https://free-free.github.io/2018/04/20/householder-transformation/"/>
    <id>https://free-free.github.io/2018/04/20/householder-transformation/</id>
    <published>2018-04-20T09:02:46.000Z</published>
    <updated>2018-05-23T08:40:23.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>Householder transform ,also called mirror/reflection transform,  transforms vector \(x\) to vector \(y\), where \(x\) and \(y\)  are symmetric with respect to axis \(e_i\), \(e_i\) commonly is an unit column vector. That’s reason why we call it mirror/reflection transform. Noted that mirror and reflection transform are actually equivalent from the mathematical perspective , the only difference is that how we look at them. Like before, let’s firstly consider Householder transform in  the 2-D Euclidean space, Given a vector \(x = (\xi_1, \xi_2)^T\) , how to get its mirror vector \(y\) with respect to \(e_1=(1,0)^T\)? This can be done by following linear transform.</p><script type="math/tex; mode=display">y = \begin{bmatrix} \xi_1 \\ -\xi_2\end{bmatrix} = Hx = H\begin{bmatrix} \xi_1 \\ \xi_2\end{bmatrix}</script><p>The problem here is to find out matrix \(H\). As depicted in figure 1,we can get \(H\) by following steps.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/household-transform_01.png" alt=""></p><center>Fig. 1. householder transform </center><script type="math/tex; mode=display">y = x - 2e_2\langle x,e_2\rangle = x - 2e_2{e_2}^Tx = (I - 2e_2{e_2}^T)x</script><p>Cause \(e_2 = (0,1)^T\), so </p><script type="math/tex; mode=display">H = \begin{bmatrix}1 & 0 \\ 0 & -1 \end{bmatrix}</script><p>As introduced in algebra class , A linear transform can be represented with a matrix, here \(H\) defines a linear transform called mirror transform with respect to \(e_1\) or reflection transform with respect to \(e_2\), both of them refer to the same mathematical concept.</p><p><strong>formal definition:</strong></p><p>Suppose unit column vector \(u \in R \), then call matrix</p><script type="math/tex; mode=display">H = I - 2uu^T</script><p>as <strong>Householder matrix</strong>, the transform defined by \(H\) is called Householder transform(reflection transform with respect to \(u\)). When the orthonormal unit vector of \(u\) is given, called \(u_2\), then the transform also can be called mirror transform with respect to \(u_2\).</p><p>Given a Householder matrix \(H\), it has the following properties:</p><ul><li>\(H^T = H \) , i.e. \(H\) is a symmetrical matrix</li><li>\(H^TH = I\), i.e. \(H\) is an orthonormal matrix</li><li>\(H^2 = I\), i.e. \(H\) is an involutory matrix</li><li>\(H^{-1} = H\), i.e. \(H\) is a self-inverse matrix</li><li>\(det H = -11\), i.e. the determinant of \(H\) is -1</li></ul><h3 id="Theorems"><a href="#Theorems" class="headerlink" title="Theorems"></a>Theorems</h3><h4 id="theorem-1"><a href="#theorem-1" class="headerlink" title="theorem 1:"></a>theorem 1:</h4><blockquote><p>Given an arbitrary none zero column vector \(x\) and a unit column vector \(z\), then there must exists a Householder matrix \(H\), satisfying the following quality.</p><script type="math/tex; mode=display">Hx = |x| z</script></blockquote><p><strong>proof:</strong></p><p>(1) When \(x = |x|z\), make \(u^Tx = 0\), then</p><script type="math/tex; mode=display">Hx = (I - 2uu^T)x = x - 2u(u^Tx) = x = |x|z</script><p>(2) When \(x \neq |x|z\), make </p><script type="math/tex; mode=display">u = \frac{x - |x|z}{|x - |x|z|}</script><p>then</p><script type="math/tex; mode=display">Hx = (I - 2uu^T)x = (I - 2\frac{(x-|x|z)(x - |x|z)^T}{|x - |x|z|^2})x\\=x - 2\langle x-|x|z,x\rangle \frac{x-|x|z}{|x-|x|z|^2}</script><p>Cause</p><script type="math/tex; mode=display">|x-|x|z|^2</script><script type="math/tex; mode=display">=(x-|x|z)^T(x-|x|z)</script><script type="math/tex; mode=display">= (x^T -|x|z^T)(x-|x|z)</script><script type="math/tex; mode=display">=x^Tx - x^T|x|z-|x|z^Tx + |x|^2</script><script type="math/tex; mode=display">=2|x|^2 - 2|x|z^Tx=2\langle x-|x|z,x \rangle</script><p>So </p><script type="math/tex; mode=display">Hx = x - 2 \langle x- |x|z,x \rangle \frac{x-|x|z}{|x-|x|z|^2}</script><script type="math/tex; mode=display">= x - (x - |x|z) = |x|z</script><p>why \(u = \frac{x - |x|z}{|x - |x|z|} \)? The following figure may give a bit intuition.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/householder-tranform_02.png" alt=""></p><center>Fig. 2. </center><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><h4 id="test-1"><a href="#test-1" class="headerlink" title="test 1"></a>test 1</h4><blockquote><p>Suppose \(x = (1,2,2)^T\), \(e_1 = (1,0,0)^T\), try to find out a Householder transform which transform the direction of \(x\)  to the direction of \(e_1\).</p></blockquote><p>According to <em>theorem 1</em> ,we can calculate out \(|x| = 3, x - |x|e_1 = 2(-1,1,1)^T\), make \(u = \frac{1}{\sqrt{3}}(-1,1,1)^T\), then Householder matrix \(H\) can be followed to construct.</p><script type="math/tex; mode=display">H = \begin{bmatrix}1 & & \\ & 1& \\& & 1 \end{bmatrix}- \frac{2}{3}\begin{bmatrix}-1\\1\\1\end{bmatrix}\begin{bmatrix}-1& 1 & 1\end{bmatrix} = \\ \frac{1}{3}\begin{bmatrix}1 & 2& 2\\2 & 1& -2\\2 & -2&1\end{bmatrix}</script><p>so</p><script type="math/tex; mode=display">Hx = 3e_1</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;Householder transform ,also called mir
      
    
    </summary>
    
      <category term="math" scheme="https://free-free.github.io/categories/math/"/>
    
    
      <category term="matrix decomposition" scheme="https://free-free.github.io/tags/matrix-decomposition/"/>
    
      <category term="matrix analysis" scheme="https://free-free.github.io/tags/matrix-analysis/"/>
    
  </entry>
  
  <entry>
    <title>图像加法去噪的证明过程</title>
    <link href="https://free-free.github.io/2018/04/18/the-proof-of-denoise-image-by-addition/"/>
    <id>https://free-free.github.io/2018/04/18/the-proof-of-denoise-image-by-addition/</id>
    <published>2018-04-18T11:43:37.000Z</published>
    <updated>2018-04-18T12:26:55.787Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML"></script><blockquote><p>设\(g(x,y)\)为无噪声图像\(f(x,y)\)被噪声图像\(n(x,y)\)污染后的图像，即：</p><script type="math/tex; mode=display">g(x,y) = f(x,y) + n(x,y)</script><p>则\(M\)个图像相加后的均值为:</p><script type="math/tex; mode=display">\bar{g}(x,y) = \frac{1}{M}\sum_{i=1}^{M}{g_i(x,y)}</script><p>试证明以下结论，并简述该结论说明了什么问题。</p><script type="math/tex; mode=display">\begin{cases}E\{\bar{g}(x,y)\} = f(x,y) \\ \sigma_{\bar{g}(x,y)}^{2} = \frac{1}{M} \sigma_{n}^2\end{cases}</script><p>其中\(E\)代表期望，<script type="math/tex">\sigma_{\bar{g}(x,y)}^2, \sigma_{n}^2</script>分别代表\(\bar{g}(x,y)\)和\(n(x,y)\)的方差。</p></blockquote><p><br></p><p><strong>证明：</strong></p><p>已知\(\bar{g}(x,y) = \frac{1}{M}\sum_{i=1}^{M}{g_i(x,y)}\) ，并且\(g_i(x,y) = f_i(x,y) + n_i(x,y)\) 。那么</p><script type="math/tex; mode=display">E[{\bar{g}(x,y)}] = E[\frac{1}{M}\sum_{i=1}^{M}{(f_i(x,y) + n_i(x,y))}] \\ =E[\frac{1}{M}\sum_{i=1}^{M}{f_i(x,y)}] + E[{\frac{1}{M}\sum_{i=1}^{M}{n_i(x,y)}}]</script><p>又由于噪声信号\(n(x,y)\)一般为零均值信号，即:</p><script type="math/tex; mode=display">E[{\frac{1}{M}\sum_{i=1}^{M}n_i(x,y)}] = 0</script><p>所以：</p><script type="math/tex; mode=display">E[{\bar{g}(x,y)}] = E[{\frac{1}{M}\sum_{i=1}^{M}{f_i(x,y)}}] = f(x,y)</script><p>又因为<script type="math/tex">\sigma_{\bar{g}(x,y)}^{2} = E[\bar{g}(x,y) - u_{\bar{g}(x,y)}]^2</script>，其中\(u_{\bar(x,y)} = E[\bar{g}(x,y)]\)。</p><p>所以，</p><script type="math/tex; mode=display">E([\bar{g}(x,y) - u_{\bar{g}(x,y)}]^2) \\ = E([\frac{1}{M}\sum_{i=1}^{M}{(f_i(x,y) + n_i(x,y)) - f(x,y)}]^2)\\=E([\frac{1}{M}\sum_{i=1}^{M}{f_i(x,y)} - f(x,y) + \frac{1}{M}\sum_{i=1}^{M}{n_i(x,y)}]^2)\\=E[(\frac{1}{M}\sum_{i=1}^{M}{n_i(x,y)})^2] = E[\frac{1}{M^2}\sum_{i=1}^{M}n_i(x,y)^2]</script><p>又\(n(x,y)\)为零均值信号，所以，</p><script type="math/tex; mode=display">\sigma_{\bar{g}(x,y)}^{2} = E[\frac{1}{M^2}\sum_{i=1}^{M}n_i(x,y)^2]\\ = \frac{1}{M^2}\sum_{i=1}^{M}{E[n_i^2(x,y)]} =\frac{1}{M^2}\sum_{i=1}^{M}{\sigma_{n(x,y)}^2} = \frac{1}{M}\sigma_{n(x,y)}</script><p>得证。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; async src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt;
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="digital image processing" scheme="https://free-free.github.io/tags/digital-image-processing/"/>
    
  </entry>
  
  <entry>
    <title>由量子纠缠现象引发的一些奇想</title>
    <link href="https://free-free.github.io/2018/04/13/the-imagination-base-on-quantum-entanglement/"/>
    <id>https://free-free.github.io/2018/04/13/the-imagination-base-on-quantum-entanglement/</id>
    <published>2018-04-13T09:49:36.000Z</published>
    <updated>2018-04-19T09:54:37.879Z</updated>
    
    <content type="html"><![CDATA[<p>声明：</p><blockquote><p>该文章描述的内容不具有任何权威性，未经过任何过科学的检验。</p></blockquote><hr><center><img src="http://oy4cno18k.bkt.clouddn.com/the-imagination-base-on-quantum-entanglement_01.jpg"></center><p>​    处于量子纠缠态的两个量子之间的相互作用总是让人感到奇妙。假如将两个处于纠缠态的量子放在相距无限远的地方，在未观测它们的状态之前，我们不能确定两个纠缠量子处于什么状态，但是当我们观测其中任意一个量子并确定其状态之后，另一个量子的状态也就随之确定。在这里，最让人感到兴奋和奇特是两个量子之间如何在相距无限远的情况下，瞬间协商并确定了各自的量子状态。例如，我们在观测一个量子之后，确定其自旋为+1/2，那另一个量子如何在瞬间就确定了自己的自旋为-1/2。也就是说纠缠量子之间是如何进行“通信”的，以至于在距离无限远的情况下，瞬间就完成了相互之间的“通信”。在现有的物理框架下，两个量子之间通信是反直觉并且也是不可能的。根据阿尔伯特.爱因斯坦的相对论，光的传播速度在我们当前所认知的物理世界里是有上限的，约于3000000000m/s。如果按照此计算的话，两个相距无限远的纠缠态量子之间根本不可能在瞬间完成”通信”的，否则就必须超光速。那么如何解释纠缠态量子的通信呢？</p><p>​    在我的直觉里，这或许可能跟宇宙中的暗物质和暗能量有关。不要忘了，我们当前能感知到的物理世界的物质和能量只占宇宙总能量、物质的很小一部分。还有很大一部分能量和物质是以暗物质和暗能量的形式存在，只</p><center><img src="http://oy4cno18k.bkt.clouddn.com/the-imagination-base-on-quantum-entanglement_02.jpg"></center><p>是我们无法用现有的观测手段来测量它们。假设我们所能观测到的物质和能量构成一个物理空间(简称S空间)，而暗物质和暗能量构成另一个物理空间(简称X空间)，两个物理空间互为对偶。那么这两个物理空间之间是如何”交互“或者说”相互作用“的呢？关于这一点，让我们假设存在一种基本的转换”介子“，它们能够在两个物理世界中存在，并且两个物理世界的物质和能量都能和”介子“相互转换。在两个物理空间中，物理距离的定义是不同的。例如在S空间中，相互无穷远的两点，在X空间中可能是两个相距很久的点，当然在两个物理空间的距离关系并不是完全成反比关系。至此我们便可以对纠缠量子的瞬间完成”通信“的问题做出一个看似不错的解释了。在S空间中，相距无限远的两个纠缠量子之间的“通信”是通过X空间完成的，而S空间中的通信是通过“介子”转换成X空间中的通信的。</p><p>后记：</p><blockquote><p>上述内容只是基于对称性对量子纠缠给出的一个瞎猜的解释，希望大家不要认真。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;声明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该文章描述的内容不具有任何权威性，未经过任何过科学的检验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;center&gt;&lt;img src=&quot;http://oy4cno18k.bkt.clouddn.com/the-imagi
      
    
    </summary>
    
      <category term="mylife" scheme="https://free-free.github.io/categories/mylife/"/>
    
    
      <category term="奇思妙想" scheme="https://free-free.github.io/tags/%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3/"/>
    
      <category term="杂谈" scheme="https://free-free.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Givens Transform(rotation Transform)</title>
    <link href="https://free-free.github.io/2018/04/01/givens-transformation/"/>
    <id>https://free-free.github.io/2018/04/01/givens-transformation/</id>
    <published>2018-04-01T13:53:13.000Z</published>
    <updated>2018-05-23T06:02:14.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>What is Givens transform? you might have encountered it dozen times without knowing its formal name. Very broadly speaking,  Givens transform , also known as Givens rotation, is a rotation transform  that performed in the plane spanned by two vectors. Let’s think about the rotation transformation in 2-D Euclidean space. As what you have learned in your linear algebra class , a linear transformation can be represented as a matrix. So the rotation transform in 2-D Euclidean space  can be defined as the following matrix.</p><script type="math/tex; mode=display">T = \begin{bmatrix} \cos{\theta} & \sin{\theta} \\ -\sin{\theta} & \cos{\theta} \end{bmatrix}​</script><p>Given a  vector \(x\) in the 2-D Euclidean space, you can rotate it \(\theta\) degrees by multiply it with \(T\), i.e. \(x_{\theta} = Tx\). If you take a closer look at the matrix \(T\), you may find that the determinant of \(T\) is equal to 1, i.e.  \(detT = 1\), it means that the length of both \(x\) and \( x_{\theta} \) won’t change after the transform, they are equal to each other. In other words, the linear transform represented by \(T\) is a orthogonal transform, \(T\) is a orthogonal matrix. </p><p>More generally,  consider  n dimensional Euclid space <strong>\(R^n\)</strong>. Suppose  <strong>\(e_1, e_2, \dots, e_n \) </strong>is a standard orthogonal basis of <strong>\(R^n\)</strong>,  the Givens transform(rotation transform) in the plane \([e_i, e_j]\) is defined as the following.</p><script type="math/tex; mode=display">T_{i,j} = \begin{bmatrix}1 \\ \quad &  \ddots \\ \quad & \quad  & c & \quad & \quad & \quad & s \\ \quad & \quad & \quad & 1 \\ \quad & \quad & \quad & \quad \  & \ddots \\ \quad & \quad & \quad & \quad \  & \quad & 1 \\ \quad & \quad & -s & \quad & \quad & \quad & c \\ \quad & \quad & \quad & \quad & \quad & \quad & \quad & \ddots  \\ \quad & \quad & \quad & \quad & \quad & \quad & \quad & \quad &  1 \\\end{bmatrix}</script><p>\(T_{i,j}\) called Givens matrix, also be denoted as \(T_{i,j} = T_{i,j}(c,s)\). \(i,j\) represents the column index of \(e_i, e_j\) in the \(T_{i,j}\).  \(c, s\) are constrained by the following equation.</p><script type="math/tex; mode=display">c^2+s^2=1</script><p>It’s easy to verify that when \(c^2 + s^2 =1\),  there is a  angle \(\theta\)  that satisfies the following equality </p><script type="math/tex; mode=display">\begin{cases} c= \cos{\theta} \\ s = \sin{\theta}\end{cases}</script><h3 id="Properties-amp-Theorems"><a href="#Properties-amp-Theorems" class="headerlink" title="Properties &amp; Theorems"></a>Properties &amp; Theorems</h3><p><code>property 1:</code></p><p>Givens matrix is a orthogonal matrix, that is</p><script type="math/tex; mode=display">detT_{i,j}(c, s) = 1</script><script type="math/tex; mode=display">[T_{i,j}(c,s)]^{-1} = [T_{i,j}(c,s)]^{T} =T_{i,j}(c, -s)</script><p><code>property 2:</code></p><p>Suppose \(x = (\xi_{1}, \xi_{2}, \dots, \xi_{n})^T, \quad y = T_{i,j}x = (\eta_{1},\eta_{2}, \dots, \eta_{n})^T\), then</p><script type="math/tex; mode=display">\begin{cases}\eta_i = c\xi_i + s\xi_j \\ \eta_j = -s\xi_i + c\xi_j \\ \eta_k = \xi_k (k \neq i,j )\end{cases}</script><p>When \(\xi_{i}^2 + \xi_{j}^2 \neq 0\), assign the \(c,s\) to the following value:</p><script type="math/tex; mode=display">c = \frac{\xi_i}{\sqrt{\xi_i^2 + \xi_j^2}},\quad s = \frac{\xi_j}{\sqrt{\xi_i^2 + \xi_i^2}}</script><p>The advantage of doing this is make \(\eta_i = \sqrt{\xi_i^2 + \xi_j^2} &gt; 0, \quad \eta_j= 0\)</p><p><code>theorem 1:</code></p><p>Suppose \(x = (\xi_1, \xi_2, \dots, \xi_n)^T \neq 0\), then there is a matrix \(T\), which is produced by the  product of the limited number of Given matrix, satisfying the equality:</p><script type="math/tex; mode=display">Tx = |x|e_1</script><p> \(T = T_{s,n}T_{s,n-1}T_{s,n-2} \cdots T_{s, s+1}\), where \(s\) is the index of first none-zero element in the \(x\). For example, \(\xi_1, \xi_2  = 0, \xi_3, \xi_4, \cdots, \xi_n \neq 0 \), so here \(s = 3\).</p><p><code>inference 1:</code></p><p>Suppose there are none-zero column vector \(x \in R^n \) and unit vector \(z \in R^n\), then there is a matrix, which is the product of finite number Givens matrix, satisfying the following equality: </p><script type="math/tex; mode=display">Tx = |x|z</script><p><strong>proof:</strong></p><p>According to theorem 1, there is a matrix \(T^{(2)}\) satisfying \(T^{(2)}z = |z|e_1 = e_1\). Equally, there is a matrix \(T^{(1)}\) satisfying \(T^{(1)}x =|x|e_1 \), then substitute \(e_1\) to \(T^{(2)}z\), we can get the following equality:</p><script type="math/tex; mode=display">T^{(1)}x = |x|T^{(2)}z</script><script type="math/tex; mode=display">=> [T^{(2)}]^{-1}T^{(1)}x = |x|e_1</script><script type="math/tex; mode=display">=> [T^{(2)}]^TT^{(1)}x = |x|e_1</script><script type="math/tex; mode=display">=> Tx=|x|e_1,\quad T=[T^{(2)}]^TT^{(1)}</script><p>finished!</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Exam 1:</p><blockquote><p>Suppose <script type="math/tex">x = (3,4,5)^T</script>, rotate  the direction of \(x \) to same direction of \(e_1\) using Givens transformation. In other words, find out \(T\) and  make \(Tx = |x|e_1\)</p></blockquote><p>First step:</p><p>Construct \(T_{12}(c,s)\) with respect to \(x\), make \(c = \frac{3}{5}, \quad s=\frac{4}{5}\), so</p><script type="math/tex; mode=display">T_{12} = \begin{bmatrix}\frac{3}{5} & \frac{4}{5} & 0 \\ -\frac{4}{5} & \frac{3}{5} & 0 \\ 0 & 0 & 1\end{bmatrix},\quad T_{12}x = (5,0,5)^T</script><p>Second step:</p><p>Construct \(T_{1,3}(c,s)\) with respect to \(T_{12}x\), make \(c = \frac{1}{\sqrt{2}}, \quad s = \frac{1}{\sqrt{2}}\), so</p><script type="math/tex; mode=display">T_{13} = \begin{bmatrix}\frac{1}{\sqrt{2}} & 0 & \frac{1}{\sqrt{2}} \\ 0 & 1 & 0 \\ -\frac{1}{\sqrt{2}} & 0 & \frac{1}{\sqrt{2}}\end{bmatrix},\quad T_{13}(T_{12}x) = (5\sqrt{2},0,0)^T</script><script type="math/tex; mode=display">=> \quad T = T_{13}T_{12}  = \frac{1}{5\sqrt{2}}\begin{bmatrix} 3 & 4 & 5 \\ -4\sqrt{2} & 3\sqrt{2} & 0 \\ -3 & -4 & 5\end{bmatrix}, Tx = 5\sqrt{2}e_1</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h3&gt;&lt;p&gt;What is Givens transform? you might ha
      
    
    </summary>
    
      <category term="math" scheme="https://free-free.github.io/categories/math/"/>
    
    
      <category term="matrix decomposition" scheme="https://free-free.github.io/tags/matrix-decomposition/"/>
    
      <category term="matrix analysis" scheme="https://free-free.github.io/tags/matrix-analysis/"/>
    
  </entry>
  
  <entry>
    <title>An Introduce to BMP File</title>
    <link href="https://free-free.github.io/2018/03/26/an-introduce-to-BMP-file/"/>
    <id>https://free-free.github.io/2018/03/26/an-introduce-to-BMP-file/</id>
    <published>2018-03-26T07:14:49.000Z</published>
    <updated>2018-04-03T05:05:18.602Z</updated>
    
    <content type="html"><![CDATA[<p>BMP, known as Bitmap, is a standard image file format on the window X platform original created by Microsoft. Now It  be widely used, especially in digital image processing, and supported by almost all of platforms. Though it’s very popular in image processing fields, it’s not suitable for storage as it’s not be compressed.</p><p>BMP can be simply divided into two types: Device Independent Bitmap(DIB) and Device Dependent Bitmap(DDB).  DDB was widely used in early  windows system. As the development of monitor technology, a variety of display devices was produced, DDB was hard to meet all the device’s demands. e.g. DDB cannot store the resolution information of the device that originally created it, so that applications cannot rapidly check whether if the BMP image can be displayed on the current host display device. To solve this, Microsoft has created a new type  Bitmap called Device Independent Bitmap.</p><p>Each DIB image contains a information structure, in which color and spatial side are stored. The information structure is explained as below:</p><ul><li>The color type of original device</li><li>The resolution of original device</li><li>Palette </li><li>Bit array contains RGB channel’s color value of each pixel</li><li>Flag which indicates the compression scheme of Bit Array</li></ul><p>One Bitmap file mainly contains the four parts, shown in Figure 1.</p><center><figure class="half"><img src="http://oy4cno18k.bkt.clouddn.com/an-introduce-to-BMP-file_01.bmp"></figure></center><center>​    Figure 1.</center><ul><li>File Header(14 bytes)</li><li>Info Header(40 bytes)</li><li>Palette</li><li>Image Data</li></ul><p><strong>1. File Header(14 bytes)</strong></p><p>File Header is defined as a fixed size structure, which has the size of 14 bytes. the fields of File Header is shown below.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPFILEHEADER</span>&#123;</span></div><div class="line">  WORD bfType;</div><div class="line">  DWORD bfSize;</div><div class="line">  WORD bfReserved1;</div><div class="line">  WORD bfReserved2;</div><div class="line">  DWORD bfOffBits;</div><div class="line">&#125;BITMAPFILEHADER;</div></pre></td></tr></table></figure><p><strong>Note</strong>: <code>WORD</code> represents 16-bits unsigned integer type, <code>DWORD</code> represents  32-bits unsigned integer type.</p><p><code>bfType</code>: denote file type, the value must be 0x424D, i.e. “BM”.</p><p><code>bfSize</code>: the total file size, the size of File Header also included.</p><p><code>bfReserved1,bfReserved2</code>: padding bytes, ignore it.</p><p><code>bfOffBits</code>: The number of bytes where the first byte of Image Data offset to the first byte of file.</p><p><strong>2. Info Header(40 bytes)</strong></p><p>Info Header has the fixed size of 40 bytes, defined as the following.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPINFOHEADER</span>&#123;</span></div><div class="line">  DWORD biSize;</div><div class="line">  LONG biWidth;</div><div class="line">  LONG biHeight;</div><div class="line">  WORD biPlanes;</div><div class="line">  WORD biBitCount;</div><div class="line">  DWORD biCompression;</div><div class="line">  DWORD biSizeImage;</div><div class="line">  LONG biXPelsPerMeter;</div><div class="line">  LONG biYPelsPerMeter;</div><div class="line">  DWORD biClrUsed;</div><div class="line">  DWORD biClrImportant;</div><div class="line">&#125; BITMAPINFOHEADER;</div></pre></td></tr></table></figure><p><strong>Note</strong>: <code>LONG</code> represents 32-bits integer type.</p><p><code>biSize</code>: structure size(Info Header), the value must be <em>40</em>.</p><p><code>biWidth</code>: image width with respect to the pixel.</p><p><code>biHeight</code>: image height with respect to the pixel.</p><p><code>biPlanes</code>: must be <em>1</em>, ignore it.</p><p><code>biBitCount</code>: The bit number when represent color. the commonly used value can be <em>1</em>(two colors), <em>4</em>(16 colors), <em>8</em>(256 colors) and <em>24</em>(true color).</p><p><code>biCompression</code>: the indicator of the compression method. The valid value can be <em>BI_RGB</em>, <em>BI_RLE8</em>, <em>BI_RLE4</em> and <em>BI_BITFIELDS</em>(these are constant variables defined in the windows platform). As a mention, <em>BI_RGB</em> denotes that image file will not be compressed.</p><p><code>biSizeImage</code>: <code>biWidth</code> * <code>biHeight</code>, note that the <code>biWidth</code> must be the multiplier of four, for example, when <code>biWidth</code> is 241, the actual value of <code>biWidth</code> is equal to 244.</p><p><code>biXPelsPerMeter</code>: the horizontal resolution of the device that created it, the unit is pixels-per-meter.</p><p><code>biYPelsPerMeter</code>： the vertical resolution of the device that created i. the unit is pixels-per-meter.</p><p><code>biClrUsed</code>: the actual used color number. when value is equal to 0, the actual color number is $2^{biBitCount}$ .</p><p><code>biClrImportant</code>: the number of color which be thought as  important. When the value is 0 , represent all color is important.</p><p><strong>3. Palette</strong></p><p>The palette of one BMP image is optional, some image file doesn’t need palette, e.g. true color image. Actually, the palette is an structure array ,in which the number of elements is equal to <code>biClrUsed</code>. Each element is defined as the following structure.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagRGBQUAD</span>&#123;</span></div><div class="line">  <span class="comment">// the value of blue color channel</span></div><div class="line">  BYTE rgbBlue;</div><div class="line">  <span class="comment">// the value of green color channel</span></div><div class="line">  BYTE rgbGreen;</div><div class="line">  <span class="comment">// the value of red color channel</span></div><div class="line">  BYTE rgbRed;</div><div class="line">  <span class="comment">// padding</span></div><div class="line">  BYTE rgbReserved;</div><div class="line">&#125;RGBQUAD;</div></pre></td></tr></table></figure><p><strong>4.Image Data</strong></p><p>When the palette exists in the image file, the image data represent the index values of the pixels in the palette, otherwise, the image data represent the actual color value of the pixels(RGB). Let’s take a example:</p><p><code>biBitCount=1</code>: the size of palette is 2, the value of each pixel can be 0 or 1, which represents the index value in the palette. The reason is that there are just  two kind of colors. one  data byte can represent 8 pixels.</p><p><code>biBitCount=4</code>: the size of palette is $2^4=16$, the value of each pixel ranges from 0 to 15. one data byte can store two pixels.</p><p><code>biBitCount=8</code>: the size of palette is $2^8=256$, the value of each pixel ranges from 0 to 255. one data byte just represent one pixel.</p><p>Besides, when image file is a true color image, each pixel requires the  space size of 3 bytes.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;BMP, known as Bitmap, is a standard image file format on the window X platform original created by Microsoft. Now It  be widely used, esp
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="digital image processing" scheme="https://free-free.github.io/tags/digital-image-processing/"/>
    
  </entry>
  
  <entry>
    <title>Make Hexo Support Latex</title>
    <link href="https://free-free.github.io/2018/03/21/make-hexo-support-latex/"/>
    <id>https://free-free.github.io/2018/03/21/make-hexo-support-latex/</id>
    <published>2018-03-21T12:06:04.000Z</published>
    <updated>2018-03-22T10:46:40.681Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous post, I have briefly introduced some basic syntaxes about LaTex , and how to write mathematical equations with markdown. In this post, I am about to focus on making hexo support LaTex mathematical equations syntax with Mathjax and summarize the approach .</p><h3 id="1-Replace-hexo-renderer-marked-with-hexo-renderer-kramed"><a href="#1-Replace-hexo-renderer-marked-with-hexo-renderer-kramed" class="headerlink" title="1. Replace hexo-renderer-marked with hexo-renderer-kramed"></a>1. Replace hexo-renderer-marked with hexo-renderer-kramed</h3><p>The default rendering engine in hexo is hexo-renderer-marked, unfortunately, hexo-renderer-marked doesn’t support Mathjax syntaxes. To fix that, a new rendering engine: <code>hexo-renderer-kramed</code> comes along at the that moment. To fully support Mathjax in your hexo , just need you to uninstall hexo-renderer-marked  and install hexo-renderer-kramed.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> npm uninstall hexo-renderer-marked --save</span></div><div class="line"><span class="meta">$</span><span class="bash"> npm install hexo-renderer-kramed --save</span></div></pre></td></tr></table></figure><p>Now your hexo  can render Mathjax fully.</p><h3 id="2-Fix-the-syntax-conflicts-between-LaTex-and-markdown"><a href="#2-Fix-the-syntax-conflicts-between-LaTex-and-markdown" class="headerlink" title="2. Fix the syntax conflicts between LaTex and markdown"></a>2. Fix the syntax conflicts between LaTex and markdown</h3><p>If you know very well about LaTex and markdown, you may be aware of the syntax conflicts between them. In markdown, asterisk <code>*</code> and underline <code>_</code> represent bold and italic. At the same time , underline <code>_</code>  denotes subscript in LaTex. So how to fix that? Here we only use asterisk <code>*</code> to the represent bold and italic in markdown, and assign underline <code>_</code> to LaTex.</p><p>Open  <code>node_modules\kramed\lib\rules\inline.js</code>, and replace <code>escape</code> and <code>em</code>  to following code.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</div><div class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</div></pre></td></tr></table></figure><h3 id="3-Enable-Mathjax"><a href="#3-Enable-Mathjax" class="headerlink" title="3. Enable Mathjax"></a>3. Enable Mathjax</h3><p>Open your theme configuration file:<code>_config.yaml</code> , add the following content to it.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">mathjax:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div></pre></td></tr></table></figure><p>Until now you already have made your hexo support LaTex. When you want to write mathematical equations  in you blog , you just need to enable Mathjax in your article header part, like the following.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">----</div><div class="line">title: Hello Mathjax</div><div class="line">categories: god</div><div class="line">date: 2018/03/21</div><div class="line">tags:</div><div class="line">  - LaTex</div><div class="line">mathjax: true</div><div class="line"></div><div class="line">----</div></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="http://blog.csdn.net/u014630987/article/details/78670258" target="_blank" rel="external">[1] reference 1</a></p><p><a href="http://blog.csdn.net/crazy_scott/article/details/79293576" target="_blank" rel="external">[2] reference 2</a></p><p><a href="https://www.cnblogs.com/Ai-heng/p/7282110.html" target="_blank" rel="external">[3] reference 3</a></p><p><a href="http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/" target="_blank" rel="external">[4] refercence 4</a></p><p><a href="https://github.com/sun11/hexo-renderer-kramed" target="_blank" rel="external">[5] reference 5</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the previous post, I have briefly introduced some basic syntaxes about LaTex , and how to write mathematical equations with markdown. 
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="hexo" scheme="https://free-free.github.io/tags/hexo/"/>
    
      <category term="LaTex" scheme="https://free-free.github.io/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>Basic Arithmetical Operations on the Digital Image</title>
    <link href="https://free-free.github.io/2018/03/19/basic-arithmetical-operations-on-the-digital-image/"/>
    <id>https://free-free.github.io/2018/03/19/basic-arithmetical-operations-on-the-digital-image/</id>
    <published>2018-03-19T10:33:45.000Z</published>
    <updated>2018-04-17T14:55:13.074Z</updated>
    
    <content type="html"><![CDATA[<p>Technically speaking, the digital image is just a bunch of numbers, in which number’s values equally represent the pixel values. From the mathematical view, the digital image is just a matrix which is the same thing what you have learned in your mathematical class. Since the digital image is a matrix, there are a great many operations on the matrix. In a large sense, the core jobs of DIP are all about matrix manipulations. So in this blog, I am going to exemplify you three fundamental arithmetical operations of the digital images which contain <code>addition</code>, <code>subtraction</code> and <code>multiplication</code> .</p><h3 id="1-Digital-Image-Addition"><a href="#1-Digital-Image-Addition" class="headerlink" title="1.  Digital Image Addition"></a><strong>1.  Digital Image Addition</strong></h3><p>Addition of a digital image is very much similar to a matrix’s addition, there you can add up two digital images , then produce the resulted image. The whole process can be simply written as the following formula:</p><script type="math/tex; mode=display">h(x, y) = \alpha g(x,y) + \beta f(x,y)</script><p>\(g(x,y), f(x,y)\)​ indicate the two input digital image, \(h(x,y)\) is the resulted image, \(x,y \) represent the coordination value of the pixel. But one thing should be noted, the factors of above formula \(\alpha, \beta​\) cannot be arbitrary value, as maximum value of each color channel in each image pixel is less than 256 and greater than 0(<em>here we assume  each color channel has  8 bit size</em>). they are constrained by the following formula.</p><script type="math/tex; mode=display">\alpha + \beta = 1</script><p>On top of the addition of two digital images, we can also expand it to the multiple digital image addition, the form is similar as before.</p><script type="math/tex; mode=display">h(x,y) = \sum_{i=1}^{n}{\alpha_ig_i(x,y)}</script><script type="math/tex; mode=display">{\sum_{i=1}^{n}{\alpha_i}} = 1</script><p>All the requirement knowledge  have been introduced , so let’s take a closer look at the what looks like when adding up two digital images.</p><p>Given the two following images, then add them up, Guess what’s the output will look like?</p><figure class="half"><img src="http://oy4cno18k.bkt.clouddn.com/basic-arithmetical-operations-on-digital-images_image_addition_11.png" width="400"><center>Fig.1.   image_11.png</center><img src="http://oy4cno18k.bkt.clouddn.com/basic-arithmetical-operations-on-digital-images_image_addition_12.png" width="400"><center>Fig.2.  image_12.png</center></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">img1 = imread(<span class="string">'image_11.png'</span>);</div><div class="line">img2 = imread(<span class="string">'image_12.png'</span>);</div><div class="line"><span class="comment">% because the spatial size of 'image_addition_11.png' is geater than\</span></div><div class="line"><span class="comment">% 'image_addition_12.png',so it's necessary to resize it\</span></div><div class="line"><span class="comment">% when performing addition</span></div><div class="line">result_img = <span class="number">0.4</span>*img1(:, <span class="number">36</span>:<span class="number">375</span>, :) + <span class="number">0.6</span>*img2;</div><div class="line">imwrite(result_img,<span class="string">'image_1112.png'</span>, <span class="string">'png'</span>);</div></pre></td></tr></table></figure><p>The result of above code is followed.</p><figure><img src="http://oy4cno18k.bkt.clouddn.com/basic-arithmetical-operations-on-digital-images_image_addition_result2.png" width="400"><center>Fig.3.  image_1112.png</center></figure><p><strong>Application</strong>:  </p><ul><li>Image fusion</li><li>Camera double-exposure</li><li>Video Scene Transition</li></ul><hr><h3 id="2-Digital-Image-Subtraction"><a href="#2-Digital-Image-Subtraction" class="headerlink" title="2.Digital Image Subtraction"></a><strong>2.Digital Image Subtraction</strong></h3><p>Like the addition, you can subtract one image from another image, then produce the subtracted image. The mechanism behind this is just the subtraction of corresponding pixels in two images.</p><script type="math/tex; mode=display">r(x,y)  = g_1(x,y)  - g_2(x,y)</script><p>\(r(x,y)\) is final output image. Now let’s test it.</p><figure><center><img src="http://oy4cno18k.bkt.clouddn.com/basic-arithmetical-operations-on-digital-images-image_21.png" width="400"></center><center>Fig.4.   image_21.png</center><center><img src="http://oy4cno18k.bkt.clouddn.com/basic-arithmetical-operations-on-digital-images-image_22.png" width="400"></center><center>Fig.5.   image_22.png</center></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">img1 = imread(<span class="string">'image_21.png'</span>);</div><div class="line">img2 = imread(<span class="string">'image_22.png'</span>);</div><div class="line">result_img = ((img1 - img2) + (img2 - img1))/<span class="number">2</span>;</div><div class="line">imwrite(result_img, <span class="string">'image_2122.png'</span>, <span class="string">'png'</span>);</div></pre></td></tr></table></figure><p>After executing above code, the output looks like the following image.</p><figure><center><img src="http://oy4cno18k.bkt.clouddn.com/basic-arithmetical-operations-on-digital-images-image_2122.png" width="400"></center><center>Fig.6.  image_2122.png</center></figure><p><strong>Applications</strong></p><ul><li>Motion Tracking &amp; Detection</li><li>Periodical Noise Reduction</li></ul><hr><h3 id="3-Digital-Image-Multiplication"><a href="#3-Digital-Image-Multiplication" class="headerlink" title="3. Digital Image Multiplication"></a><strong>3. Digital Image Multiplication</strong></h3><p>Digital image multiplication likes multiplication between two numbers, the difference is that two operand is digital  image matrix rather than number.</p><script type="math/tex; mode=display">r(x, y) = g_1(x,y) \times g_2(x,y)</script><p>More general case, you can multiply multiple images, normally this makes no sense.</p><script type="math/tex; mode=display">r(x,y) = \prod_{i=1}^{n}g_i(x,y),\space \space (i=1, \dots, n)</script><p>If you have ever implemented the multiplication of images with the above formulas, you necessarily get an unexpected output. So what’s wrong? Since the maximum value of each pixel is less or equal than 255, when you perform multiplication of the images, the values of some pixels  is certainly larger than 255. To fix that, before your multiplication of images, you firstly need to normalize image’s pixels. After you performed your images multiplication, it’s also need to multiply your image with 255.</p><script type="math/tex; mode=display">r(x, y) = (\frac{g_1(x,y)}{255} \times \frac{g_2(x,y)}{255}) \times 255</script><script type="math/tex; mode=display">r(x,y) = 255 \times \prod_{i=1}^{n}{\frac{g_i(x,y)}{255}},\space \space(i=1,\dots,n)</script><p>Here is an example.</p><figure class="half"><center><img src="http://oy4cno18k.bkt.clouddn.com/basic-arithmetical-operations-on-digital-images-image_31.png" width="400"></center><center>Fig.7.  image_31.png</center><center><img src="http://oy4cno18k.bkt.clouddn.com/basic-arithmetical-operations-on-digital-images-image_32.png" width="400"></center><center>Fig.8. image_32.png</center></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">img1 = imread(<span class="string">'image_31.png'</span>);</div><div class="line">img2 = imread(<span class="string">'image_32.png'</span>);</div><div class="line">img1 = double(img1)/<span class="number">255</span>;</div><div class="line">img2 = double(img2)/<span class="number">255</span>;</div><div class="line">result_img = img1 .* img2;</div><div class="line">result_img = uint8(result_img * <span class="number">255</span>);</div><div class="line">imwrite(result_img,<span class="string">'image_3132.png'</span>, <span class="string">'png'</span>);</div></pre></td></tr></table></figure><p>The following is the output image</p><center><img src="http://oy4cno18k.bkt.clouddn.com/basic-arithmetical-operations-on-digital-images-image_3132.png" width="400"></center><center>Fig.9. image_3132.png</center><p><strong>Applications</strong></p><ul><li>Image Matting(like your photoshop)</li><li>Image Lightness Enhancement</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Technically speaking, the digital image is just a bunch of numbers, in which number’s values equally represent the pixel values. From the
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="digital image processing" scheme="https://free-free.github.io/tags/digital-image-processing/"/>
    
  </entry>
  
  <entry>
    <title>Execute Shell Commands in Python</title>
    <link href="https://free-free.github.io/2018/03/13/execute-shell-commands-in-python/"/>
    <id>https://free-free.github.io/2018/03/13/execute-shell-commands-in-python/</id>
    <published>2018-03-13T10:52:51.000Z</published>
    <updated>2018-04-03T05:11:45.227Z</updated>
    
    <content type="html"><![CDATA[<p>Executing shell commands in python is not always attractive to me. On the one hand, shell script normally meets my daily demands, I think there are no very strong reasons to learn it. On the other hand, my focus in Python is not here, there are few chances to get in touch with it. But now, the powerful ability of Python executing shell commands impress me, as I dive into the deeper place in Python’s world. For that reason, I think it’s time to get hands on it. Here I will summarize the approaches  executing shell commands in Python.</p><h4 id="1-subprocess-call"><a href="#1-subprocess-call" class="headerlink" title="1. subprocess.call"></a>1. <code>subprocess.call</code></h4><p>This approach is very known to  the most of developers. <a href="https://docs.python.org/3/library/subprocess.html" target="_blank" rel="external">subprocess</a> module is built in python library. It allows you to spawn new processes, connected to their input/output/error pipes, and obtain their return codes. It intends to replace several older modules and functions:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">os.system</div><div class="line">os.spwan</div></pre></td></tr></table></figure><p>The related PEP is <a href="https://www.python.org/dev/peps/pep-0324" target="_blank" rel="external">PEP 324</a> which proposed the subprocess module.</p><p>In <em>subprocess</em>, the <code>run()</code> function is the most powerful and convenient  function , it can handle all use cases. Unfortunately, the <code>run()</code> was added in Python 3.5,  so if you want to keep compatibility with older version, your might need to use older high-level API <a href="https://docs.python.org/3/library/subprocess.html#call-function-trio" target="_blank" rel="external">call()</a>. The prototype of <code>run()</code> is followed:</p><p><code>subprocess.run</code>(<em>args</em>, * , <em>stdin=None</em>, <em>input=None</em>, <em>stdout=None</em>, <em>stderr=None</em>, <em>shell=False</em>, <em>cwd=None</em>, <em>timeout=None</em>, <em>check=False</em>, <em>encoding=None</em>, <em>errors=None</em>)<a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" target="_blank" rel="external">¶</a></p><p>The underlying mechanism of <code>run()</code> is just a proxy for <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" target="_blank" rel="external">Popen</a> which provide a lot of flexibility so that developers are able to handle the less common cases not covered by the convenience functions.</p><p><strong>args</strong> : command list included the command name and parameters.</p><p><strong>stdin</strong>: pass to <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" target="_blank" rel="external">Popen</a></p><p><strong>input</strong>: pass to <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" target="_blank" rel="external">Popen</a></p><p><strong>stdout</strong>: pass to <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" target="_blank" rel="external">Popen</a></p><p><strong>stderr</strong>: pass to <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" target="_blank" rel="external">Popen</a></p><p><strong>shell</strong>: pass to <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" target="_blank" rel="external">Popen</a></p><p><strong>cwd</strong>: pass to <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" target="_blank" rel="external">Popen</a></p><p><strong>timeout</strong>: pass to <code>Popen.communicate()</code>. If the timeout expires, the child process will be killed. The<code>TimeoutExpired</code> exception will be raised after the child process has terminated. </p><p><strong>check</strong>: Check whether the process exits with a non-zero exit code. if that , a <code>CalledProcessError</code> exception will be raised.  Attribute of that exception contain the arguments, the exit code, and stdout and stderr if they were captured.</p><p><strong>encoding/errors</strong>: if either <em>encoding</em> or <em>error</em> are specified, file objects for stdin, stdout and stderr are opened in text mode using specified encoding and errors or the <code>io.TextIOWrapper</code> default. Otherwise, file objects are opened in binary mode.</p><p>The <code>run()</code> function runs the command described by args. Then wait for command to complete, finally return a <code>CompletedProcess</code> instance which hold <em>args</em>, <em>returncode</em>, <em>stdout</em>, <em>stderr</em> and check_returncode(). . By default, <code>run()</code> does not capture stdout or stderr. To do so pass <code>PIPE</code> for the stdou and/or stderr arguments</p><p>Examples:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.run([<span class="string">"echo"</span>,<span class="string">"-e"</span>, <span class="string">"\e[0;32m hello world \e[;m"</span>])</div><div class="line">hello world</div><div class="line">CompletedProcess(args=[<span class="string">'echo'</span>, <span class="string">'-e'</span>, <span class="string">'\\e[0;32m hello world\\e[;m'</span>], returncode=<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cp = subprocess.run([<span class="string">"ls"</span>, <span class="string">"-al"</span>], stdout=subprocess.PIPE) <span class="comment"># capture stdout</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cp.stdout <span class="comment"># access to the stdout</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cp.stderr <span class="comment"># access to the stderr</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cp.returncode <span class="comment"># get return code</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cp.check_returncode() <span class="comment"># when returncode is a non-zero value, a CalledProcessError will be raised</span></div></pre></td></tr></table></figure><h4 id="2-Other-approaches"><a href="#2-Other-approaches" class="headerlink" title="2. Other approaches"></a>2. Other approaches</h4><ul><li><code>os.popen</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line">&gt;&gt;&gt;&gt; ret = os.popen(<span class="string">'ls -al'</span>).read() <span class="comment"># or os.popen('ls -al').readline()</span></div></pre></td></tr></table></figure><ul><li><code>commands</code></li></ul><p><code>commands.getstatusoutput(cmd)</code>: return (status, output)</p><p><code>commands.getoutput(cmd)</code>: return (output)</p><p><code>commands.getstatus(file)</code>: get the status of the specific file</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> commands</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>status,output = commands.getstatusoutput(<span class="string">"ls"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>output = commands.getoutput(<span class="string">"ls -al"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>status = commands.getstatus(<span class="string">"hello.c"</span>)</div></pre></td></tr></table></figure><p><strong>Note</strong>: The  <code>commands</code> module only exists in Python2.x , since this  module has been removed in Python3.x.</p><p>This method is much similar to <code>popen</code>, the difference is that <code>popen</code> returns file-like object</p><ul><li><code>os.system</code></li></ul><p>This method is not recommend to use. In Python &gt;= 3.5, it’s recommend to <code>subprocess</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">"ls"</span>)</div></pre></td></tr></table></figure><p>The downside of this method is that you must handle security stuffs yourself, like shell character escaping, etc. On top of that, this method cannot run the external programs.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Executing shell commands in python is not always attractive to me. On the one hand, shell script normally meets my daily demands, I think
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
      <category term="shell" scheme="https://free-free.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Create CLIs in Python Using Fire</title>
    <link href="https://free-free.github.io/2018/02/28/python-lib-fire/"/>
    <id>https://free-free.github.io/2018/02/28/python-lib-fire/</id>
    <published>2018-02-28T12:25:21.000Z</published>
    <updated>2018-04-03T05:12:34.676Z</updated>
    
    <content type="html"><![CDATA[<p>In 2018 early, Google open-source it’s one of new Python library called <a href="https://github.com/google/python-fire" target="_blank" rel="external"><strong>Fire</strong></a>. <strong>Fire</strong> is a powerful tool to automatically generate command line interfaces(CLIs) from any Python object. With it’s assistance, you can easily transition between Bash and Python, also develop and debug your Python code. That’s why I choose it. </p><h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><p>Like other Python library, The installation of <strong>Fire</strong> is very simple and clear. You just need to type the following command in your bash interface, then leaving processes will automatically finish.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> pip install fire</span></div></pre></td></tr></table></figure><h4 id="Usage-Exmaples"><a href="#Usage-Exmaples" class="headerlink" title="Usage Exmaples"></a>Usage Exmaples</h4><h5 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h5><p><strong>version1: <code>fire.Fire()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#@file: hello.py</span></div><div class="line"><span class="keyword">import</span> fire</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(name)</span>:</span></div><div class="line"><span class="keyword">return</span> <span class="string">"Hello &#123;name&#125;"</span>.format(name=name)</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">fire.Fire()</div></pre></td></tr></table></figure><p>Here expose  <code>say_hello</code> function to command line,so you can call it in your bash like the following manner.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python hello.py say_hello john</div><div class="line">Hello john</div></pre></td></tr></table></figure><p><strong>version2: <code>fire.Fire(&lt;fn&gt;)</code></strong></p><p>Besides call <code>fire.Fire()</code> directly, also you can pass a function to it. Doing this,  it will be slightly different when you call it in your bash shell command line.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#file: hello.py</span></div><div class="line"><span class="keyword">import</span> fire</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(name)</span>:</span></div><div class="line">  <span class="keyword">return</span> <span class="string">"Hello &#123;name&#125;"</span>.format(name=name)</div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  fire.Fire(say_hello)</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> python hello.py john</span></div><div class="line">Hello john</div></pre></td></tr></table></figure><hr><h5 id="Multiple-commands"><a href="#Multiple-commands" class="headerlink" title="Multiple commands"></a>Multiple commands</h5><p>In the previous section, we just have one function totally, it’s hard to show you the power of <strong>fire</strong>. In this section, multiple commands will be introduced. </p><p><strong>version 1:<code>fire.Fire()</code></strong></p><p>Like the <code>hello world</code> example, here you also can write multiple function , then call it directly in your bash shell.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#@file: mcmds.py</span></div><div class="line"><span class="keyword">import</span> fire</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line"><span class="keyword">return</span> x + y</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cumsum</span><span class="params">(*args)</span>:</span></div><div class="line">  <span class="keyword">return</span> functools.reduce(<span class="keyword">lambda</span> x,y: x + y, args)</div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">fire.Fire()</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python mcmds.py cumsum 1 2 3 4</div><div class="line">10</div><div class="line">$ python mcmds.py add 12 32</div><div class="line">44</div></pre></td></tr></table></figure><p><strong>version 2: <code>fire.Fire(&lt;dict&gt;)</code></strong></p><p>If you intend to expose your function as a different name, this version may be suitable for you.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#@file: mcmds.py</span></div><div class="line"><span class="keyword">import</span> fire</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cumsum</span><span class="params">(*args)</span>:</span></div><div class="line"><span class="keyword">return</span> functools.reduce(<span class="keyword">lambda</span> x, y: x + y, args)</div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">fire.Fire(&#123;</div><div class="line">        <span class="string">'add'</span>:add,</div><div class="line">      <span class="string">'cumsum'</span>: cumsum</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python mcmds.py add 10 32</div><div class="line">44</div><div class="line">$ python mcmds.py cumsum 1 2 3 4</div><div class="line">10</div></pre></td></tr></table></figure><p><strong>version 3: <code>fire.Fire(&lt;object&gt;)</code></strong></p><p>As shown by the previous examples,  they are all functions,  if you are going to expose your object’s method as a command line . Is there all solution for satisfying your demands? </p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#@file: hello.py</span></div><div class="line"><span class="keyword">import</span> fire</div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        <span class="keyword">return</span> x + y</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cumsum</span><span class="params">(self, *args)</span>:</span></div><div class="line">        <span class="keyword">return</span> functools.reduce(<span class="keyword">lambda</span> x, y: x + y, args)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    calc = Calculator()</div><div class="line">    fire.Fire(calc)</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python hello.py add 10 10</div><div class="line">20</div><div class="line">$ python hello.py cumsum 10 1 2 3 4 </div><div class="line">20</div></pre></td></tr></table></figure><p><strong>version 4: <code>fire.Fire(&lt;class&gt;)</code></strong></p><p>The one of difference between version 3 and version 4 is that you can pass arguments for constructing the class. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#@file: hello.py</span></div><div class="line"><span class="keyword">import</span> fire</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntNumber</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial_value = <span class="number">1</span>)</span>:</span></div><div class="line">        self._ival = initial_value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._ival + x</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">times</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._ival * x</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    fire.Fire(IntNumber)</div></pre></td></tr></table></figure><p>The arguments to <code>__init__</code> method must be passed with the —flag syntax, like the following usage.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ python hello.py plus 10</div><div class="line">11</div><div class="line">$ python hello.py <span class="built_in">times</span> 10</div><div class="line">10</div><div class="line">$ python hello.py plus 10 --initial_value=10</div><div class="line">20</div><div class="line">$ python hello.py <span class="built_in">times</span> 10 --initial_value=0 <span class="comment"># here you pass initial value to init method using --falg syntax </span></div><div class="line">0</div></pre></td></tr></table></figure><hr><h5 id="Grouping-Commands"><a href="#Grouping-Commands" class="headerlink" title="Grouping Commands"></a>Grouping Commands</h5><p>In addition, you can make a command line interface with grouped commands, like the below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#@file: hello.py</span></div><div class="line"><span class="keyword">import</span> fire</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RobotLeg</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"The leg is moving forward!"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">state</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span>  <span class="string">"The leg is active!"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RobotArm</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"The arm is moving!"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">state</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"The arm is active!"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.arm = RobotArm()</div><div class="line">        self.leg = RobotLeg()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.arm.run())</div><div class="line">        print(self.leg.run())</div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    # also can you define 'run' function as a generator, it works samely!</span></div><div class="line"><span class="string">    def run(self):</span></div><div class="line"><span class="string">      yield self.arm.run()</span></div><div class="line"><span class="string">        yield self.leg.run()</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    fire.Fire(Robot)</div></pre></td></tr></table></figure><p>Here’s how this looks at the command line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ python hello.py run</div><div class="line">The arm is moving!</div><div class="line">The leg is moving forward!</div><div class="line">$ python hello.py arm run</div><div class="line">The arm is moving!</div><div class="line">$ python hello.py arm state</div><div class="line">The arm is active!</div><div class="line">$ python hello.py leg run</div><div class="line">The leg is moving forward!</div><div class="line">$ python hello.py leg state</div><div class="line">The leg is active!</div></pre></td></tr></table></figure><hr><h5 id="Accessing-Properties"><a href="#Accessing-Properties" class="headerlink" title="Accessing Properties"></a>Accessing Properties</h5><p>Accessing Properties of object is much necessary and useful, as you expose the specific object to the command line.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#@file: hello.py</span></div><div class="line"><span class="keyword">import</span> fire</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, postal_code, name=<span class="string">"paradise"</span>)</span>:</span></div><div class="line">        self.pcode = postal_code</div><div class="line">        self.name = name</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    fire.Fire(City)</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python hello.py --postal_code=521002 pcode</div><div class="line">521002</div><div class="line">$ python hello.py --postal_code=512002 name</div><div class="line">paradise</div></pre></td></tr></table></figure><hr><h5 id="Chaining-Function-Calls"><a href="#Chaining-Function-Calls" class="headerlink" title="Chaining Function Calls"></a>Chaining Function Calls</h5><p>When you call a <strong>Fire</strong> command, the same action you can take on the <em>result</em> of the call to <strong>Fire</strong>. For example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python hello.py --postal_code=521000 name upper</div><div class="line">PARADISE</div></pre></td></tr></table></figure><p>The above code works because the <code>upper</code> is a method on all strings. </p><p>So, if you want to set up your functions to chain nicely, all you have to do is have a class whose methods return self. An example is following.(tip: this example is taken from official document).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#@file: hello.py</span></div><div class="line"><span class="keyword">import</span> fire</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryCanvas</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size=<span class="number">10</span>)</span>:</span></div><div class="line">        self.pixels = [[<span class="number">0</span>] * size <span class="keyword">for</span> _ <span class="keyword">in</span> range(size)]</div><div class="line">        self._size = size</div><div class="line">        self._row = <span class="number">0</span></div><div class="line">        self._col = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'\r\n'</span>.join(<span class="string">' '</span>.join(str(pixel) <span class="keyword">for</span> pixel <span class="keyword">in</span> row) <span class="keyword">for</span> row <span class="keyword">in</span> self.pixels)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></div><div class="line">        print(self)</div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self, row, col)</span>:</span></div><div class="line">        self._row = row % self._size</div><div class="line">        self._col = col % self._size</div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.set(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">off</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.set(<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, value)</span>:</span></div><div class="line">        self.pixels[self._row][self._col] = value</div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    fire.Fire(BinaryCanvas)</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ python hello.py move 3 3 on move 3 6 on move 6 3 on move 6 6 on move 7 4 move 7 5 on __str__</div><div class="line">0 0 0 0 0 0 0 0 0 0</div><div class="line">0 0 0 0 0 0 0 0 0 0</div><div class="line">0 0 0 0 0 0 0 0 0 0</div><div class="line">0 0 0 1 0 0 1 0 0 0</div><div class="line">0 0 0 0 0 0 0 0 0 0</div><div class="line">0 0 0 0 0 0 0 0 0 0</div><div class="line">0 0 0 1 0 0 1 0 0 0</div><div class="line">0 0 0 0 0 1 0 0 0 0</div><div class="line">0 0 0 0 0 0 0 0 0 0</div><div class="line">0 0 0 0 0 0 0 0 0 0</div></pre></td></tr></table></figure><hr><h5 id="Passing-Arguments-To-Function"><a href="#Passing-Arguments-To-Function" class="headerlink" title="Passing Arguments To Function"></a>Passing Arguments To Function</h5><p>Except positional argument can be passed , as you run a function at command line, also you can pass argument by using flag syntax, like the arguments to <code>__init__</code>  method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#@file: hello.py</span></div><div class="line"><span class="keyword">import</span> fire</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color)</span>:</span></div><div class="line">        self._color = color</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, max_speed)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"The &#123;color&#125; car is runing below the maximum speed &#123;max_speed&#125; mph!"</span>\</div><div class="line">        .format(color=self._color, max_speed=max_speed)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    fire.Fire(Car)</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ python hello.py --color red run 100</div><div class="line">The red car is runing below the maximum speed 100 mph!</div><div class="line">$ python hello.py --color red run --max-speed=100</div><div class="line">The red car is runing below the maximum speed 100 mph!</div><div class="line">$ python hello.py --color red run --max_speed=100</div><div class="line">The red car is runing below the maximum speed 100 mph!</div><div class="line">$ python hello.py --color red run --max-speed 100</div><div class="line">The red car is runing below the maximum speed 100 mph!</div><div class="line">$ python hello.py run --max-speed 100 --color red</div><div class="line">The red car is runing below the maximum speed 100 mph!</div></pre></td></tr></table></figure><p>From the above invocation example, you might found some interesting things.</p><ul><li>Hyphens and underscores (<code>-</code> and <code>_</code>) are interchangeable in member names and flag names.</li><li>The constructor’s arguments can come after the function’s arguments or before the function.</li><li>The equal sign between the flag name and its value is optional.</li></ul><hr><h5 id="Arguments-Separator"><a href="#Arguments-Separator" class="headerlink" title="Arguments Separator"></a>Arguments Separator</h5><p>Normally, the arguments passed to a function are fixed, so you can append the further operations on the results, This is the chaining function call rule that are introduced before. But when your arguments are variable, the further operations( i.e. function)  on the results will be treated as an another argument that passed to the function. So, you need to an extra syntax to separate the arguments and the operations on the results. The default separator in <strong>fire</strong>  is the hyphens <code>-</code> , you can change the default separator using <code>--separator</code>  flags. Flags are alway separated from your Fire command by an isolated <code>--</code>. All arguments after the separator will be used to process the result of the function, rather than being passed to the function itself. Here’s an example will show how it works.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#@file: hello.py</span></div><div class="line"><span class="keyword">import</span> fire</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_animals</span><span class="params">(*animals)</span>:</span></div><div class="line">    sorted_items = sorted(animals, key=<span class="keyword">lambda</span> item: len(str(item)))</div><div class="line">    <span class="keyword">return</span> <span class="string">' &gt; '</span>.join(sorted_items)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    fire.Fire(sort_animals)</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python hello.py cat dog pig chicken</div><div class="line">cat &gt; dog &gt; pig &gt; chicken</div></pre></td></tr></table></figure><p>If we want to convert all animal’s name characters to the uppercase, how to do that? </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python hello.py cat dog pig chicken upper</div><div class="line">cat &gt; dog &gt; pig &gt; upper &gt; chicken</div></pre></td></tr></table></figure><p>As you see the above output result, it didn’t work! Hey, don’t forget thing mentioned just now:<strong>Separator</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python hello.py cat dog pig chicken - upper</div><div class="line">CAT &gt; DOG &gt; PIG &gt; CHICKEN</div></pre></td></tr></table></figure><p>Congratulations! it do works. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ python hello.py cat dog pig chicken X upper -- --separator X</div><div class="line">CAT &gt; DOG &gt; PIG &gt; CHICKEN</div></pre></td></tr></table></figure><p>The above code also work fine! Here you just change the default separator the hyphens <code>-</code> to <code>X</code>.</p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://github.com/google/python-fire/blob/master/docs/guide.md" target="_blank" rel="external">[1] :The Python Fire Guide</a></p><p><a href="https://github.com/google/python-fire" target="_blank" rel="external">[2] : README</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In 2018 early, Google open-source it’s one of new Python library called &lt;a href=&quot;https://github.com/google/python-fire&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Convert Amr to Mp3 Using Python and Ffmpeg</title>
    <link href="https://free-free.github.io/2018/02/27/convert-amr-to-mp3-using-python-and-ffmpeg/"/>
    <id>https://free-free.github.io/2018/02/27/convert-amr-to-mp3-using-python-and-ffmpeg/</id>
    <published>2018-02-27T12:49:50.000Z</published>
    <updated>2018-04-03T05:10:39.290Z</updated>
    
    <content type="html"><![CDATA[<p>In the previous blog, I have introduced how to extract audio from video using python + ffmpeg. In this blog, the toolkit is same, but the purpose is slightly different, here convert to <em>amr</em>  audio to <em>mp3</em> audio.  one line code did complete it in your command line, like the following commands. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ffmpeg -i input.amr output.mp3</span></div></pre></td></tr></table></figure><p>To automate  the process, we also need the assistance of python, the codes is much similar to the last post, just  one place changed.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">#@file: audio2audio.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> fnmatch</div><div class="line"><span class="keyword">import</span> ffmpeg</div><div class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</div><div class="line"></div><div class="line">parser = OptionParser()</div><div class="line">parser.add_option(<span class="string">'-s'</span>, <span class="string">'--src'</span>, dest=<span class="string">'src'</span>, action=<span class="string">'store'</span>, help=<span class="string">'source dir'</span>, default=<span class="string">'./'</span>)</div><div class="line">parser.add_option(<span class="string">'-d'</span>, <span class="string">'--dest'</span>, dest=<span class="string">'dest'</span>, action=<span class="string">'store'</span>, help=<span class="string">'destination dir'</span>, default=<span class="string">'./output'</span>)</div><div class="line">parser.add_option(<span class="string">'--input-type'</span>, dest=<span class="string">'inputType'</span>, action=<span class="string">'store'</span>, help=<span class="string">'input type'</span>, default=<span class="string">'amr'</span>)</div><div class="line">parser.add_option(<span class="string">"--ouput-type"</span>, dest=<span class="string">'outputType'</span>, action=<span class="string">'store'</span>, help=<span class="string">'ouput type'</span>, default=<span class="string">'mp3'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_file</span><span class="params">(path, file_ext)</span>:</span></div><div class="line">    flist = os.listdir(path)</div><div class="line">    all_file = []</div><div class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> flist:</div><div class="line">        filepath = os.path.join(path, filename)</div><div class="line">        <span class="keyword">if</span> os.path.isdir(filepath):</div><div class="line">            all_file.extend(filter_file(filepath, file_ext))</div><div class="line">        <span class="keyword">elif</span> fnmatch.fnmatch(filepath, <span class="string">'*.'</span> + file_ext):</div><div class="line">            all_file.append(filepath)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> all_file</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    (options, args) = parser.parse_args()</div><div class="line">    src = options.src</div><div class="line">    dest = options.dest</div><div class="line">    inputType = options.inputType</div><div class="line">    outputType = options.outputType</div><div class="line">    all_file = filter_file(src, inputType)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dest):</div><div class="line">        os.mkdir(dest)</div><div class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> all_file:</div><div class="line">        iFilename = os.path.split(f)[<span class="number">-1</span>]</div><div class="line">        oFilename = iFilename.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span> + outputType</div><div class="line">        iFullFilename = os.path.join(src, iFilename)</div><div class="line">        oFullFilename = os.path.join(dest, oFilename)</div><div class="line">        (ffmpeg.input(iFullFilename)</div><div class="line">                .output(oFullFilename)</div><div class="line">                .run())</div></pre></td></tr></table></figure><p>Now you just need to type the following command in you shell, then your conversion result <em>mp3</em> audio will reside in your output directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python audio2audio.py --src dir_amr  --dest dir_mp3 --input-type amr  --output-type mp3</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the previous blog, I have introduced how to extract audio from video using python + ffmpeg. In this blog, the toolkit is same, but the
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Extract Audio From Video Using Python and FFmpeg</title>
    <link href="https://free-free.github.io/2018/02/20/extract-audio-from-video-using-python-and-ffmpeg/"/>
    <id>https://free-free.github.io/2018/02/20/extract-audio-from-video-using-python-and-ffmpeg/</id>
    <published>2018-02-20T14:30:02.000Z</published>
    <updated>2018-02-20T16:16:10.727Z</updated>
    
    <content type="html"><![CDATA[<p>​    过年回家后，老妈叫我帮她把糖豆里下载的广场舞视频的歌曲下载下来，我拿她手机一看，50几个视频，难道我还要一个一个的手动下载下来，这个一点也不妥。仔细想一想，既然已经有视频了，那只需要将视频中的歌曲自动提取出来即可，不需要费时间在网上一个一个的搜索，一个个的下载。咱说干就干，是时候拿出视频和音频处理利器：<strong>ffmpeg</strong>，以及脚本利器：<strong>python</strong>。</p><h4 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h4><p>​    作为程序员应该对<strong>ffmpeg</strong>不陌生，它是一个高效的跨平台视频和音频处理库，详细介绍和用法请见<a href="https://ffmpeg.org/ffmpeg.html" target="_blank" rel="external">官网</a> 。接下来讲一讲<strong>ffmpeg</strong>在ubuntu上的安装。由于我的机子上ubuntu版本是16.04，在软件库里正好自带了ffmpeg以及相关的软件库，只需要apt 安装一下即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt install ffmpeg</div></pre></td></tr></table></figure><p>对于没有自带ffmpeg的ubuntu版本，需要自行编译安装。在自行编译安装的时候，ffmpeg默认情况下没有mp3 audio encoder，需要将mp3 audio encoder的mp3lame先安装上，并在编译ffmpeg的时候使能mp3lame。详细的编译安装过程请见<a href="http://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu" target="_blank" rel="external">这里</a> 。</p><h4 id="python-ffmpeg从视频中提取语音"><a href="#python-ffmpeg从视频中提取语音" class="headerlink" title="python+ffmpeg从视频中提取语音"></a>python+ffmpeg从视频中提取语音</h4><h5 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h5><p>该版本是直接通过python的<code>os.system</code>调用ffmpeg，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># @file: video2audio.py</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> fnmatch</div><div class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</div><div class="line"></div><div class="line"></div><div class="line">parser = OptionParser()</div><div class="line">parser.add_option(<span class="string">"-s"</span>,<span class="string">"--src"</span>, dest=<span class="string">"src"</span>, action=<span class="string">"store"</span>,help=<span class="string">"source dir"</span>, default=<span class="string">"./"</span>)</div><div class="line">parser.add_option(<span class="string">"-d"</span>,<span class="string">"--dest"</span>, dest=<span class="string">"dest"</span>, action=<span class="string">"store"</span>, help=<span class="string">"destination dir"</span>, default=<span class="string">"./audio"</span>)</div><div class="line">parser.add_option(<span class="string">"-v"</span>, <span class="string">"--video-type"</span>, dest=<span class="string">"videoType"</span>, action=<span class="string">"store"</span>, help=<span class="string">"input video type"</span>, default=<span class="string">"mp4"</span>)</div><div class="line">parser.add_option(<span class="string">"-a"</span>, <span class="string">"--audio-type"</span>, dest=<span class="string">"audioType"</span>, action=<span class="string">"store"</span>, help=<span class="string">"output audio type"</span>, default=<span class="string">"mp3"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_file</span><span class="params">(path, file_ext)</span>:</span></div><div class="line">    flist = os.listdir(path)</div><div class="line">    all_file = []</div><div class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> flist:</div><div class="line">        filepath = os.path.join(path, filename)</div><div class="line">        <span class="keyword">if</span> os.path.isdir(filepath):</div><div class="line">            all_file.extend(filter_file(filepath, file_ext))</div><div class="line">        <span class="keyword">elif</span> fnmatch.fnmatch(filepath, <span class="string">'*.'</span> + file_ext):</div><div class="line">            all_file.append(filepath)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> all_file</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    (options, args) = parser.parse_args()</div><div class="line">    src = options.src</div><div class="line">    dest = options.dest</div><div class="line">    videoType = options.videoType</div><div class="line">    audioType = options.audioType</div><div class="line">    all_file = filter_file(src, videoType)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dest):</div><div class="line">        os.mkdir(dest)</div><div class="line">    ffmpegFormatCode = <span class="string">'ffmpeg -i &#123;0&#125; -f &#123;1&#125; -vn &#123;2&#125;'</span></div><div class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> all_file:</div><div class="line">        vFilename = os.path.split(f)[<span class="number">-1</span>]</div><div class="line">        aFilename = vFilename.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span> + audioType</div><div class="line">        vFullFilename = os.path.join(src, vFilename)</div><div class="line">        aFullFilename = os.path.join(dest, aFilename)</div><div class="line">        print(<span class="string">"Start converting &#123;0&#125;"</span>.format(vFilename))</div><div class="line">        os.system(ffmpegFormatCode.format(vFullFilename, audioType, aFullFilename))</div><div class="line">        print(<span class="string">"Finish conversion of &#123;0&#125;"</span>.format(aFilename))</div></pre></td></tr></table></figure><h5 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h5><p>该版本是需要安装python的一个ffmpeg binding: <a href="https://github.com/kkroening/ffmpeg-python" target="_blank" rel="external">ffmpeg-python</a>。然后通过<strong>ffmpeg-python</strong>来进行音频提取操作。版本1和版本2都需要提前安装ffmpeg，只不过<strong>ffmpeg-python</strong>使得ffmpeg的调用变得更加brief and human-readable。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># @file: video2audio.py</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> fnmatch</div><div class="line"><span class="keyword">import</span> ffmpeg</div><div class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</div><div class="line"></div><div class="line"></div><div class="line">parser = OptionParser()</div><div class="line">parser.add_option(<span class="string">"-s"</span>,<span class="string">"--src"</span>, dest=<span class="string">"src"</span>, action=<span class="string">"store"</span>,help=<span class="string">"source dir"</span>, default=<span class="string">"./"</span>)</div><div class="line">parser.add_option(<span class="string">"-d"</span>,<span class="string">"--dest"</span>, dest=<span class="string">"dest"</span>, action=<span class="string">"store"</span>, help=<span class="string">"destination dir"</span>, default=<span class="string">"./audio"</span>)</div><div class="line">parser.add_option(<span class="string">"-v"</span>, <span class="string">"--video-type"</span>, dest=<span class="string">"videoType"</span>, action=<span class="string">"store"</span>, help=<span class="string">"input video type"</span>, default=<span class="string">"mp4"</span>)</div><div class="line">parser.add_option(<span class="string">"-a"</span>, <span class="string">"--audio-type"</span>, dest=<span class="string">"audioType"</span>, action=<span class="string">"store"</span>, help=<span class="string">"output audio type"</span>, default=<span class="string">"mp3"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_file</span><span class="params">(path, file_ext)</span>:</span></div><div class="line">    flist = os.listdir(path)</div><div class="line">    all_file = []</div><div class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> flist:</div><div class="line">        filepath = os.path.join(path, filename)</div><div class="line">        <span class="keyword">if</span> os.path.isdir(filepath):</div><div class="line">            all_file.extend(filter_file(filepath, file_ext))</div><div class="line">        <span class="keyword">elif</span> fnmatch.fnmatch(filepath, <span class="string">'*.'</span> + file_ext):</div><div class="line">            all_file.append(filepath)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> all_file</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    (options, args) = parser.parse_args()</div><div class="line">    src = options.src</div><div class="line">    dest = options.dest</div><div class="line">    videoType = options.videoType</div><div class="line">    audioType = options.audioType</div><div class="line">    all_file = filter_file(src, videoType)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dest):</div><div class="line">        os.mkdir(dest)</div><div class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> all_file:</div><div class="line">        vFilename = os.path.split(f)[<span class="number">-1</span>]</div><div class="line">        aFilename = vFilename.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span> + audioType</div><div class="line">        vFullFilename = os.path.join(src, vFilename)</div><div class="line">        aFullFilename = os.path.join(dest, aFilename)</div><div class="line">        print(<span class="string">"Start converting &#123;0&#125;"</span>.format(vFilename))</div><div class="line">        (ffmpeg.input(vFullFilename)</div><div class="line">                .output(aFullFilename, **&#123;<span class="string">'vn'</span>:<span class="keyword">None</span>, <span class="string">'f'</span>: audioType&#125;)</div><div class="line">                .run())</div><div class="line">        print(<span class="string">"Finish conversion of &#123;0&#125;"</span>.format(aFilename))</div></pre></td></tr></table></figure><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> python video2audio.py --src ./video --dest ./video/audio -a mp3 -v mp4</span></div></pre></td></tr></table></figure><p><code>--src</code>指定视频所放的目录，<code>--dest</code>指定输出的音频所放的目录，<code>-a</code>指定输出的音频类型，<code>-v</code>指定输入的视频类型。在shell下面运行上述命令之后，最终将在<code>./video/audio</code>目录下找到提取出来的音频。有了上述脚本，原本几个小时的工作，现在分分钟就搞定，太爽了。第一次在家里写博客，罪过呀，回家不应该好好玩的吗！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    过年回家后，老妈叫我帮她把糖豆里下载的广场舞视频的歌曲下载下来，我拿她手机一看，50几个视频，难道我还要一个一个的手动下载下来，这个一点也不妥。仔细想一想，既然已经有视频了，那只需要将视频中的歌曲自动提取出来即可，不需要费时间在网上一个一个的搜索，一个个的下载。咱
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>致未来的你，侄女</title>
    <link href="https://free-free.github.io/2018/02/13/a-letter-to-you-my-niece/"/>
    <id>https://free-free.github.io/2018/02/13/a-letter-to-you-my-niece/</id>
    <published>2018-02-13T15:19:37.000Z</published>
    <updated>2018-04-17T15:02:35.042Z</updated>
    
    <content type="html"><![CDATA[<p>​    侄女/小汤，今天是你的第一个生日，老舅祝你生日快乐，愿你在未来的日子里开开心心、健健康康的成长下去。</p><p>​    为了你的一周岁生日，老舅想了很久，最终决定写下这封信，希望未来的你能够从这封信中有所收获。之所以要在你一周岁的生日的时候写这样一封信给你，原因主要有三点。原因一：老舅今年23岁，虽然不会有太多的经历和感悟，但有些东西是我这个年龄所独有的，必须要以这个年龄的身份写给你，如果等我到了中年足够干练之后才写给你，就会失去它原本的味道；原因二：这是你的一周岁礼物，我希望它是一份能够长存，并对你未来的生活有所帮助的礼物；原因三：老舅目前是一个不善于表达情感的人，所以我想现在把我想对你说的话以文字的方式保存下来，以防未来遗失了。</p><h4 id="你的出生，我的独白"><a href="#你的出生，我的独白" class="headerlink" title="你的出生，我的独白"></a>你的出生，我的独白</h4><p>​        自你妈妈(我姐)刚怀上你，到你调皮地踢她的肚子的时候，我的心都处于一种即期待又有一丝小紧张的状态。期待着你从你妈妈肚子里出来的那一天，期待着你叫我舅舅的那一天；紧张着自己怎样去做好一个舅舅。就这样持续着，直到去年的今天调皮的你从你妈妈的肚子里“蹦”了出来，来到这个新奇的世界(Welcome to the new world!  ((o(^_ ^)o)) )，我心中的期待和那一丝小紧张转变成了一种紧迫感。我迫切需要知道我怎样去扮演好一个舅舅的角色。但我越是着急，越是束手无策。直到今天，我依然没有找到很清晰的答案，但我知道做好一个舅舅，我还需要很多的成长和历练。对此，老舅并没有畏惧，反而是有了更多的动力。</p><h4 id="对你的希望"><a href="#对你的希望" class="headerlink" title="对你的希望"></a>对你的希望</h4><ul><li><p>学会感恩和情感表达</p><p><code>学会感恩</code></p><p>​    学会感恩。一个人无论多么聪明、多么能干、自身外在条件多么好、取得多么大的成就，如果不懂得感恩，必定也是令人不齿的。老舅坚信感恩是做人的基本能力，一个人要是懂得了感恩，那么他的其他品质也不会差到哪里去，他的生活也不会坏到哪里去。老舅希望你能够很早就能学会感恩。感恩你的父母、感恩帮助你的人。千万不要把父母对你的付出和关怀以及别人对你的帮助视为理所当然的，这是大忌。别人施恩于你，你要懂得回报他人。</p><p>​    感恩不是放在心里，要付诸于行动。当老舅还在上小学的时候，经常听老师说要我们心存感恩，但老师并没有教授我们要把感恩付诸于行动，所以老舅有一段时间一直对感恩存在认知误差。在此老舅需要强调一下，感恩绝对不是只放在心里，是要表现出来的，放在心里的感恩，别人是感受不到的，这不是真正意义上的感恩。希望你不要像老舅以前一样对感恩存在这样的认知误差，即要心存感恩，也要将感恩体现你的行动上。</p><p>​    感恩不在于能力大小，要及时感恩。老舅受到过很多人的帮助，心里也懂得要去感恩那些帮助过我的人，但是老舅犯了一个严重的错误。老舅一直想着等自己有了能力之后才去感恩他们。但是时间不等人，等你有了能力之后才去感恩，时间可能已经晚了。不管在什么时候，不管你在哪里，不管是你的父母还是其他帮助过你的人，你都要懂得及时去感恩他们。平时多联系他们，这是感恩；平时节假日的时候，多去看看他们，这也是感恩。感恩并不在于你当下能力的大小，在于你是否及时付诸于你的行动中。老舅已经犯了错误，我不想你也一样。</p><p><code>学会情感表达</code></p><p>​    学会情感表达。没有一个人会自成一体。刚出生的时候会有你的父母和亲人在你身边，随着你的长大，你会有朋友，会有自己的爱人，最终也会有自己的孩子。你身边的父母和亲人、朋友、爱人和孩子都会陪着你走过你的大半生，他们是你在这个世上最亲密的人，你和他们之间必然会有情感的表达。在你需要表达对他们的情感的时候，一定要表达出来，不要不好意思。人都是情感的动物，情感的表达是生活的重要一部分。没有情感表达的生活，就如同没有加盐的饭菜，淡而无味。情感是联系你周围的人关系的纽带，无论何时何地，只要你想要把它表达出来，就不要怯于环境，也不用太在意别人的眼光。老舅在此给你强调情感表达的重要性，也是在于老舅是一个不善于表达情感的人，很多人和事因此而错过了，所以希望你不要像老舅一样。自小，老舅就不知道如何去表达对别人的情感，就连对你外公外婆以及你妈妈也是一样。现在到了这个年龄，突然感悟到自己在这方面的缺陷，想要去弥补却又不知道该如何做起。有时想要去表达对你外婆和妈妈的情感，都感觉不好意思。老舅也时常在想，可能是已经过了学会情感表达的最佳时期。但老舅不会就此罢了，我就不信那个邪了。就让我们两个一起在这件事上努力吧。娃哈哈。</p></li><li><p>学会用书本来充实自己</p><p>​    可能从小到大你父母或者老师都会叮嘱你要多读书，当然老舅也不例外。书是一个人精神财富的重要来源，它能让你的内心世界丰富起来，能够建立你的世界观、价值观、人生观，能够培养你看事物的角度和为人处事的态度，能够让你的胸襟变得豁达…..etc。我知道上面这些都感觉很虚，不那么让人信服。但它确实能对你的实际生活起到很大的帮助。当你心很浮躁，不能专心做事的时候，试着去拿起自己喜欢的一本书，打开它随便阅读起来，你会奇迹地发现你的心慢慢地平静下来了。当你自己独处的时候也不会感到孤独，那是你因为书让你无论身出何处，你的内心依然如此的热闹。当别人都在从众地追逐着本不适合自己的东西的时候，你却不为所动，依然坚持自己的内心 ，那是因为书让你有了自己独立的思想，你知道自己想什么不想要什么。当你再也不和别人争论的时候，那是因为书让你更加冷静和理智，懂得换个角度看问题。当别人都在放弃自己的原则的时候，而你却默默地坚持着，那是因为书让你懂得原则对你生活的重要性。书会让你拥有自己的独立灵魂，懂得独立思考；会让你认清自己的内心，知道自己真正想要准求的是什么；同样会让你养成自己的人生态度，它决定了你未来的生活状态。老舅希望你懂得书本对于你人生的重要性，能够让书本陪伴你的一生。</p><p>​    书是手段，不是目的。老舅让你多读书并不是让你为了读书而读书，那是读死书，你要懂得活学活用。书永远都只是手段，而你的内心世界的丰富和自己的成长才是终极目的。如果你把读书当成你的目的，那将会是很枯燥无味的。但反过来，当你把读书当成一种充实自己、建立自己的三观、寻找乐趣的、丰富自己内心世界的目的，它将会显得亲切并有趣的多。读书就像你平时吃饭一样，你从一个小不点长到大，并不知道是哪顿饭让你长大了，同样你也不知道是哪本书让你成长了。读书是一个长期的过程，不要急于去期望通过读几本书就能快速成长起来。希望你从小就能够把读书当做一种成长自己的手段，并且不要太功利，养成一个终生阅读的好习惯。期待有一天你能成为老舅羡慕和膜拜的人。</p></li><li><p>学会独立思考，以辩证的眼光看待事物</p><p>​    学会独立思考。在我们所处的这个时代，由于计算机和网络的发展，各种各样的信息充斥在我们周围，有些是假的，有些是真的，有些是有害的，有些是有益的。懂得如何排除噪声找出真正有用的信号对你的生活和发展很重要。而独立思考在此时便担当着帮你找出有用信号的角色。老舅让你多用书充实自己的原因之一，便是希望你能够在书本的影响下学会独立思考，开阔自己的眼界(有句话虽说，读万卷书不如行万里路，但在你还无法行万里路的时候，你只有多读书)。无论在什么情况下，都要有一颗清醒理智的头脑，不要人云亦云。别人说一的时候，千万不要顺口也说一，一定要经过自己头脑的思考，判断自己是否也需要这样做。也不要因为周围群体强大的声势而随意放弃了自己独立思考的能力，凡事都要通过独立思考，形成自己的观点和立场，并将此坚持下去(这不是偏执，偏执是明知自己的错，依然不放弃)。在大多数时候，你宁愿相信自己的判断，也不要相信群体的言行(特别网络上的群体)，这并不是老舅偏激，但凡你以后涉猎一点心理学并仔细观察一下，你便会了解到群体的言行在很多时候都是不理智的。当你有了独立思考能力之后，你会对这个时代充满信心，发现这个时代并没有言论中的那么糟，它交通发达、生活便利、言论相对自由，你的选择和机会也会很多；当你缺少独立思考能力，你会感觉这个时代四处都充满了黑暗，你发现不了它的优点和价值所在。老舅希望你能够在成年之前便养成这种独立思考的能力，我相信你父母也会放心在外奔波的你。</p><p>​    以辩证的眼光看待事物。没有绝对的不变，只有相对的不变。在审视事物的时候一定要以辩证的眼光看待它们，既要发现它们绝对变化的地方，也要发现相对不变的地方。这对于你以后解决事业上(当然这里对于老舅来说，只是学业上的，之后也会迁移到事业上)和生活上的问题有很大裨益。在生活上，谁的人生都不会完全一帆风顺，总会有低谷的时候，也会有高潮的时候。当你处在人生低谷的时候，要以辩证的眼光看待它，低谷是你成长的机会，低谷只是暂时的，只要你在努力，一切总会有好起来的时候。当你处在人生高潮的时候，也要用辩证的眼光考察它，不要骄傲自满，停滞不前，既要发现并保留可取之处，也要改正不可取之处。在事业上，当你用辩证的眼光看待你所遇到的问题时，你会有完全不同的思路去解决它。时刻提醒自己不要使用一种方法死磕，换角度多方位观察，你必然能发现问题的薄弱之处。对于影响你事业走向的决定，既不要犯短视的错误，也不要眼光太超前，以致看不见脚下所处的位置。老舅知道让你一下学会这些很难，但这不妨碍让你养成这样的意识。</p></li><li><p>要有自己的信仰，并保护好它</p><p>​    当你懂得了用书本充实自己，有独立思考的能力，并能够用辩证的眼光看待事物的时候，你心中或许已经有了自己的信仰雏形，只是你可能还不知道它具体是什么？它对你的生活有什么影响？以老舅的理解，信仰是你内心中一种对某个事物的信念，这种信念能够在你心力交瘁、激情殆尽的时候，继续推动着你不畏风雨地向自己坚持的方向前行。它是你内心当中一种隐形的能量之源。信仰既然有这么强大的力量，当你有了它之后，你的生活也将变得与众不同。一个人不可能让所有人都信服，做什么事也不可能一次就成功，当其他人都在反对你的时候，当你已经失败几次，但你坚信你的方向是正确的时候，支持你走下去的不是别人的鼓励，也不是你的激情，而是你的信仰。当在生活上或者事业上失意的时候，支持你站起来的，是你的信仰。当你快坚持不下准备放弃的时候，是你的信仰给了你坚持下去的毅力。信仰对你的生活就是有这么大的影响，至少从老舅的经历来说，它就是这么重要。一旦你有了自己的信仰之后，它就像你的终生挚友一样，默默地并忠诚的守候着你，在你需要它的时候，立马站出来帮助你。虽然你的信仰对你很忠诚，但并不意味你不会弄丢它。在这个既“理想”又“骨干”的时代，外部的诱惑实在太多了，在各种利益和所谓“现实”的驱使下，让太多人在不经意之间弄丢了自己的信仰，当自己反应过来的时候，已经找不回来了。我不希望你也因为外在诱惑和“现实”而弄丢了自己的信仰，要时刻保护它，把它当做你生活上的伙伴。退一万步，你可以没有自己的目标，也可以没有丰富的外在财富，但是你必须要有自己的信仰和时刻保护它的警觉。老舅还要强调一点：现实和信仰并不冲突。现实和信仰如同硬币的两面，你可以同时拥有它们，不要自我决断地玩“翻硬币游戏”，没有人强迫你要必须丢掉它们当中的一个。既要拥抱现实，也是守护信仰。</p></li><li><p>要永远保持好奇心(站在兔毛尖上)</p><p>​    如果信仰使你在生活中奋力前行，那么好奇心便使你在生活中不断发现新的乐趣、体验新的感受。每个人自娘胎里出来就充满了很大的好奇心(你也一样)，对看见的每件事物都感到新奇，有时候对着某个事物就能够整整玩上好几小时，并且不会感到厌烦，总能在其中找到乐趣所在。有了好奇心，你的生活便不会枯燥无味，因为每时每刻你都在试着发现新的东西，而且最后你总能发现自己之前从未见过的东西。同样也是因为好奇心，你才会去学习自己不会、看似无用实际却挺有用的东西，去尝试之前未做过的事，去走之前未走过的路，去接触之前未接触过人。你的生活会因为有了好奇心而变得与众不同、五彩斑斓。你自己也会因为有了好奇心而成为一个有趣的人。而你的家人和朋友也会因为你的好奇心因此受到感染，他们最终也可能像你一样，充满了好奇心。既然好奇心这么重要，你可能会问：怎样去获得好奇心呢？其实好奇心不需要去获得。好奇心是人生来就有的天性，并不需要你从后天习得。而你需要做的便是好好守护你的好奇心，不要让它随着你年龄的增长丢失了(这是很多人的好奇心丢失的原因，这也是我要给你强调要保持好奇心的原因之一)，不管你年龄多大，都要保持好奇心，它并不是小孩子的专利。刚生下来的我们就像兔毛尖的“跳蚤”一样，随着年龄的增长，很多人便会顺着兔毛爬到最深处去，因为那里很“舒适”，最终只有少部分人继续留在兔毛尖上，去感受这个新奇的世界。老舅希望你是那个一直留在兔毛尖上的“跳蚤”中的一员，大胆的去感受这个新奇的世界，不要把所有“大孩子”认为理所当然的事当成理所当然，一定要用自己的好奇心去重新审视它、挖掘它，这样你总会发现别人发现不了的东西，你总会比别人过得快乐、精彩。</p></li></ul><p>​    最后的最后，希望你长大之后，能够好好孝敬你的父母，不要把父母为你的付出和关心视为理所应当，也不要把父母的啰嗦当成累赘，因为只有关心你的人才会对你啰嗦。－… . … －   .－－ .. … …. . …   ..－. －－－ .－.   －.－－ －－－ ..－</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    侄女/小汤，今天是你的第一个生日，老舅祝你生日快乐，愿你在未来的日子里开开心心、健健康康的成长下去。&lt;/p&gt;
&lt;p&gt;​    为了你的一周岁生日，老舅想了很久，最终决定写下这封信，希望未来的你能够从这封信中有所收获。之所以要在你一周岁的生日的时候写这样一封信给你，
      
    
    </summary>
    
      <category term="mylife" scheme="https://free-free.github.io/categories/mylife/"/>
    
    
      <category term="notes" scheme="https://free-free.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Make Hexo Custom Domain Support SSL</title>
    <link href="https://free-free.github.io/2018/02/10/make-hexo-custom-domain-support-ssl/"/>
    <id>https://free-free.github.io/2018/02/10/make-hexo-custom-domain-support-ssl/</id>
    <published>2018-02-10T07:23:11.000Z</published>
    <updated>2018-04-01T08:19:44.007Z</updated>
    
    <content type="html"><![CDATA[<p>​    For many hexo users, it’s a nightmare to make their custom domain blog support SSL(https). Before writing this piece of blog, I also like them , feel it’s tedious and expensive . But now  everything are changed, since the existence of <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a>. As shown by its name, <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> is an Internet service provider, offering CDN, DNS, DDos protection and security , also other cloud services that accelerate and protect your site or App. To me , it’s DNS reverse proxy attracts me. Of DNS reverse proxy , SSL supporting becomes much easier. The configuration steps will be followed.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl1.svg" alt=""></p><center>Fig 1. cloudflare workflow</center><p>In figure 1, there are 6 steps. I will explain each step in the following content.</p><p><code>Step1</code>: user’s mobile or laptop makes a DNS request to <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> DNS server for inquiring the IP address of your blog domain name, e.g. <em>infinite.xyz</em>.</p><p><code>Step2</code>: <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> DNS server returns IP address of your domain. As shown in figure 1, your blog’s IP address just refers to <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> SSL server, not your github pages server. This is the key point for your custom domain can support SSL.</p><p><code>Step3-4</code>: After retrieving your blog  ’pseudo‘  IP address , user’s mobile or laptop makes a HTTPS request to <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> SSL server,  then <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> SSL server makes a HTTP/HTTPS request your blog real server, i.e. Github pages server. That’s the mean of reverse proxy.</p><p><code>Step5-6</code>: Github pages server  return your blog content to <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> SSL server, then <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> SSL server return the content from Github pages server to user’s mobile or laptop. That’s the whole process, hope you make clear to it now.</p><p>Above we have already known the mechanism of DNS reverse proxy. The next step is how to make it real work. </p><ul><li><p>First, sign up and log in <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a>. Then find the DNS server IP address  of cloudflare and log in your domain vendor website, modify the DNS server to cloudflare’s DNS server.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl6.png" alt=""></p></li><li><p>Click ‘DNS’ tab on <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> website,</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl2.png" alt=""></p><p>add your domain to <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> DNS records saving as CNAME type.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl3.png" alt=""></p></li><li><p>Click ‘Crypto’ tab on <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> website,</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl4.png" alt=""></p><p>change SSL configuration to <code>Flexible</code></p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl5.png" alt=""></p></li><li><p>Switch to ‘Page Rules’ tab,</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl7.png" alt=""></p><p>click ‘Create Page Rule’ button.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl8.png" alt=""></p><p>Add the following rule, this rule will ensure your whole site protected by SSL,  whenever you or others visit your site, it will automatically redirect to HTTPS site.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl9.png" alt=""></p></li><li><p>Create a new file named <em>CNAME</em> under your hexo source directory, add your domain name and save it. Finally regenerate your file and re-deploy it. After that, you can check your custom domain in your Github pages settings.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl11.png" alt=""></p><p>​</p></li></ul><p>Ok, you just make your custom domain support SSL, now you have to calm down and wait less than 48h, then check your <a href="https://www.cloudflare.com/" target="_blank" rel="external">cloudflare</a> website panel.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/make-hexo-custom-domain-support-ssl10.png" alt=""></p><p>Congratulations! You can visit your site using HTTPS.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    For many hexo users, it’s a nightmare to make their custom domain blog support SSL(https). Before writing this piece of blog, I also
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="security" scheme="https://free-free.github.io/tags/security/"/>
    
      <category term="hexo" scheme="https://free-free.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Matlab 3d Plot Function</title>
    <link href="https://free-free.github.io/2018/01/18/matlab-3d-plot-function/"/>
    <id>https://free-free.github.io/2018/01/18/matlab-3d-plot-function/</id>
    <published>2018-01-18T14:46:25.000Z</published>
    <updated>2018-03-19T12:14:28.302Z</updated>
    
    <content type="html"><![CDATA[<p>When it comes to data analysis or systematic modeling, the visualization of data is an important assistant tool to provide an intuitive understanding of data and system’s performance in some degree. The focus of this blog is 3D plot function of Matlab, there are total 9 kinds of 3D visualization functions in Matlab, it refers to <code>surf</code>,<code>surfc</code>,<code>mesh</code>,<code>meshc</code>,<code>meshz</code>,<code>contour</code>,<code>contour3</code>,<code>plot3</code>,<code>waterfall</code>. Since the complexity of this 3D plot functions, a huge amount of descriptions in words almost couldn’t  help people, especially those who are new to Matlab,  to understand the usage of those functions, conversely, it will make people are afraid of them and escape from them finally. So here for each function, a testing example will come along. To better understand characteristics of those 3D plot functions, the multi-modal mathematical function is strongly recommended as a testing function for 3D plot function. In this piece blog, the following multi-modal mathematical function will be used in all examples.</p><script type="math/tex; mode=display">f(x,y)=3(1-x)^2e^{-x^2 - (y+1)^2} - 10(\frac{x}{5}-x^3-y^5)e^{-x^2-y^2}-\frac{1}{3}e^{-(x+1)^2-y^2}</script><p>The above function can be obtained using <code>peaks</code> function which is built-in Matlab.</p><ul><li><p><strong><code>contour</code></strong></p><p>The function of <code>contour</code> is indicated as  its names, it plots function’s 2-D contour curve. The prototype of <code>contour</code> as followed.</p><p><code>contour(X, Y, Z)</code>:contour(X,Y,Z) draws a contour plot of Z using vertices from the mesh defined by X and Y. X and Y can be vectors or matrices.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[X, Y] = <span class="built_in">meshgrid</span>(<span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>, <span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>);</div><div class="line">Z = peaks(X, Y);</div><div class="line">contour(X, Y, Z);</div></pre></td></tr></table></figure><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/contour_test1.bmp" alt=""></p><center> fig 1. the view of `contour(X, Y, Z)`</center><p><code>contour(Z)</code>: draws a contour plot of matrix Z in the x-y plane, with the x-coordinates of the vertices corresponding to column indices of Z and the y-coordinates corresponding to row indices of Z. The<br>contour levels are chosen automatically.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[X, Y] = <span class="built_in">meshgrid</span>(<span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>, <span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>);</div><div class="line">Z = peaks(X, Y);</div><div class="line">contour(Z);</div></pre></td></tr></table></figure><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/contour_test2.jpg" alt=""></p><center>fig 1. the view of `contour(Z)`</center><p><code>contour(Z, N)</code>:contour(Z,N) and contour(X,Y,Z,N) draw N contour lines, choosing the levels automatically.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[X, Y] = <span class="built_in">meshgrid</span>(<span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>, <span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>);</div><div class="line">Z = peaks(X, Y);</div><div class="line">contour(Z, <span class="number">30</span>);</div></pre></td></tr></table></figure><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/contour_test3.jpg" alt=""></p><center>fig 3. the view of `contour(Z, N)`</center><p><code>contour(Z, V)</code>: contour(Z,V) and contour(X,Y,Z,V) draw a contour line for each level specified in vector V.  Use contour(Z,[v v]) or contour(X,Y,Z,[v v]) to draw contours for the single level v.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[X, Y] = <span class="built_in">meshgrid</span>(<span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>, <span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>);</div><div class="line">Z = peaks(X, Y);</div><div class="line">contour(Z, [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">1.5</span>, <span class="number">2</span>, <span class="number">2.5</span>, <span class="number">3</span>, <span class="number">3.5</span>, <span class="number">4</span>]);</div></pre></td></tr></table></figure><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/contour_test4.jpg" alt=""></p><center>fig 4. the view of `contour(Z,V)`</center></li><li><p><strong><code>contour3</code></strong></p><p><code>contour3</code> is the same as <code>contour</code> except the contour lines are drawn in multiple planes. Each line is drawn in a horizontal plane at a height equal to the corresponding contour level. <code>contour3</code> plots the 3-D contour curve of function. </p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">contour3(peaks, <span class="number">30</span>);</div></pre></td></tr></table></figure><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/contour3_test1.bmp" alt=""></p><center>fig 5. the view of `contour3(Z,N)`</center></li></ul><ul><li><p><strong><code>surf</code></strong></p><p>As shown by its name, <code>surf</code>  is responsible for plotting the 3D surface mesh of the testing mathematical function. The most common usage of <code>surf</code> is <code>surf(X, Y, Z)</code> or <code>surf(Z)</code>. The parameters  <code>X</code>, <code>Y</code> are typically the output of <code>meshgrid</code>. Over a 2-D rectangular region in the x-y plane. <code>Z</code> determines the height above the plane of each vertex. If only a single Z matrix is given, then it is plotted over the meshgrid <code>X = 1:columns (Z), Y=1:rows(Z)</code>, Thus, columns of Z correspond to different X values and rows of Z correspond to different Y values.</p><p>The color of the surface is computed by linearly scaling the Z values to fit the range of the current colormap.  Use <code>caxis</code> and/or change the colormap to control the appearance. </p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[X, Y] = <span class="built_in">meshgrid</span>(<span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>, <span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>);</div><div class="line">Z = peaks(X, Y);</div><div class="line">surf(X, Y, Z);</div></pre></td></tr></table></figure><p>The output of above code:</p><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/surf_test.bmp" alt=""></p><center>fig 6. the 3-D view of `surf`</center></li></ul><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/surf_test_2D.bmp" alt=""></p><center>fig 7. the 2-D view of `surf`</center>    <p>In figure 7, the yellow region represents the place where the function has a mountain peak,  the deeper color is, the more height peak is. Equally, the dark blue region represents the place where the function has a valley, the deeper color is , the deeper valley is.</p><p>If just given <code>Z</code> passing into <code>surf</code>, the mainly difference from <code>surf(X, Y, Z)</code> is just the change of the range of  x-axis and y-axis in the x-y plane. as shown below.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[X, Y] = <span class="built_in">meshgrid</span>(<span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>, <span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>);</div><div class="line">Z = peaks(X, Y);</div><div class="line">surf(Z);</div></pre></td></tr></table></figure><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/surf_test_2.bmp" alt=""></p><center>fig 8. the 3-D view of `surf(Z)`</center><ul><li><p><strong><code>surfc</code></strong></p><p><code>surfc</code> is just the combination of <code>surf</code> and <code>contour</code>, i.e. <code>surf+contour</code>. the prototype is the same as <code>surf</code> except the contour is plotted beneath the surface mesh.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">surfc(peaks);</div></pre></td></tr></table></figure><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/surfc_test1.jpg" alt=""></p><center>fig 9. the view of `surfc(peaks)`</center></li><li><p><strong><code>mesh</code></strong></p></li></ul><p>  What’s the difference from surf is that the net produced by mesh  is not filled with color. The prototype of <code>mesh</code> is much similar to <code>surf</code>.</p><p>  <code>mesh(X,Y,Z)</code> draws a wireframe mesh with color determined by <code>Z</code>, so color is proportional to surface height. If <code>X</code> and <code>Y</code> are vectors, <code>length(X) = n</code> and <code>length(Y) = m</code>, where <code>[m,n] = size(Z)</code>. In this case, (<em>X</em>(<em>j</em>), <em>Y</em>(<em>i</em>), <em>Z</em>(<em>i</em>,<em>j</em>)) are the intersections of the wireframe grid lines; <code>X</code> and <code>Y</code> correspond to the columns and rows of <code>Z</code>, respectively. If <code>X</code> and <code>Y</code> are matrices, (<em>X</em>(<em>i</em>,<em>j</em>), <em>Y</em>(<em>i</em>,<em>j</em>), <em>Z</em>(<em>i</em>,<em>j</em>)) are the intersections of the wireframe grid lines. The values in <code>X</code>, <code>Y</code>, or <code>Z</code> can be numeric, datetime, duration, or categorical values.</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[X, Y] = <span class="built_in">meshgrid</span>(<span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>, <span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>);</div><div class="line">Z = peaks(X, Y);</div><div class="line">mesh(X, Y, Z);</div></pre></td></tr></table></figure><p>  <img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/mesh_test1.bmp" alt=""></p>  <center>fig 10. the view of `mesh(X, Y, Z)`</center><p>  <code>mesh(Z)</code> draws a wireframe mesh using <code>X = 1:n</code> and <code>Y = 1:m</code>, where <code>[m,n] = size(Z)</code>. The height, <code>Z</code>, is a single-valued function defined over a rectangular grid. Color is proportional to surface height. The values in <code>Z</code> can be numeric, datetime, duration, or categorical values.</p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[X, Y] = <span class="built_in">meshgrid</span>(<span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>, <span class="number">-2.5</span>:<span class="number">0.1</span>:<span class="number">2.5</span>);</div><div class="line">Z = peaks(X, Y);</div><div class="line">mesh(Z);</div></pre></td></tr></table></figure><p>  <img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/mesh_test1.bmp" alt=""></p>  <center>fig 11. the view of `mesh(Z)`</center><ul><li><p><strong><code>meshc</code></strong></p><p>Akin to <code>surfc</code>, <code>meshc</code> is just combination of <code>mesh+contour</code>.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meshc(peaks);</div></pre></td></tr></table></figure><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/meshc_test1.bmp" alt=""></p><center>fig 12. the view of `meshc(Z)`</center></li><li><p><strong><code>meshz</code></strong></p><p><code>meshz</code> is akin to  <code>mesh</code>  except that a “curtain” or reference plane is drawn beneath. This routine only works for surfaces defined on a rectangular grid.  The matrices X and Y define the axis limits only.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meshz(peaks);</div></pre></td></tr></table></figure><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/meshz_test1.bmp" alt=""></p><center>fig 13. the view of `meshz`</center></li><li><p><strong><code>plot3</code></strong></p><p><code>plot3</code>  plots lines and points in 3-D space. <code>plot3</code> is a three-dimensional version of <code>plot</code>. </p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">t = <span class="number">-10</span>*<span class="built_in">pi</span>:<span class="built_in">pi</span>/<span class="number">50</span>:<span class="number">10</span>*<span class="built_in">pi</span>;</div><div class="line">plot3(<span class="built_in">sin</span>(t), <span class="built_in">cos</span>(t), t.^<span class="number">2</span>);</div></pre></td></tr></table></figure><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/plot3_test1.bmp" alt=""></p><center>fig 14. the view of `plot3`</center></li><li><p><strong><code>waterfall</code></strong></p><p><code>waterfall</code> is the same as <code>mesh</code> except that the column lines of the mesh are not drawn - thus producing a “waterfall” plot. For column-oriented data analysis, use <code>waterfall(Z&#39;)</code>or<br><code>waterfall(X&#39;,Y&#39;,Z&#39;)</code>.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">figure;</div><div class="line">waterfall(peaks);</div><div class="line">[X,Y] = <span class="built_in">meshgrid</span>(<span class="number">-8</span>:<span class="number">.5</span>:<span class="number">8</span>);</div><div class="line">R = <span class="built_in">sqrt</span>(X.^<span class="number">2</span> + Y.^<span class="number">2</span>) + <span class="built_in">eps</span>;</div><div class="line">Z = <span class="built_in">sin</span>(R)./R;</div><div class="line">figure;</div><div class="line">waterfall(Z);</div></pre></td></tr></table></figure><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/waterfall_test1.bmp" alt=""></p><center>fig 15. the view of `waterfall`</center><p><img src="http://oy4cno18k.bkt.clouddn.com/matlab-3d-plot-function/waterfall_test2.bmp" alt=""></p><center>fig 16. the view of `waterfall`</center></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When it comes to data analysis or systematic modeling, the visualization of data is an important assistant tool to provide an intuitive u
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="matlab" scheme="https://free-free.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>Convert State Space Representation to Transfer Function</title>
    <link href="https://free-free.github.io/2017/12/31/convert-state-space-representation-to-transfer-function/"/>
    <id>https://free-free.github.io/2017/12/31/convert-state-space-representation-to-transfer-function/</id>
    <published>2017-12-30T23:24:47.000Z</published>
    <updated>2018-04-17T15:00:03.525Z</updated>
    
    <content type="html"><![CDATA[<p>In this semester early, I have enrolled my first-degree course <em>Linear System Theory</em>. The focus of this course is the state space representation  and illustrate the concept of observable and controllable of a linear system. As a student of Control Science and Engineering, I know how  important of it to my career in later life. Everything must be practical, this course is also not an exception. here, as a practice , <strong>I will give a implementation of converting state space to transfer function representation.</strong></p><h3 id="Mathematical-representation"><a href="#Mathematical-representation" class="headerlink" title="Mathematical representation"></a>Mathematical representation</h3><p>Given the transfer function of a linear time invariant (LTI) system,as shown below.</p><script type="math/tex; mode=display">G(s) = \frac{b\_{m}s^m + b\_{m-1}s^{m-1}+ \dotsb + b\_{1}s + b\_{0}}{s^n + \alpha\_{n-1}s^{n-1} + \alpha\_{n-2}s^{n-2} + \dotsb + \alpha\_{1}s+\alpha\_{0}}</script><p>It’s state space representation as follows.</p><script type="math/tex; mode=display">\begin{cases}\dot{x} = Ax + Bu \\\\ y = Cx + Du\end{cases}</script><p> In the above equation,\(x\) is the state vector of system, \(u\) is the input and \(y\) is the output. \(A\) called system matrix, it’s dimension is \(n\times n\) .B called input matrix, it’s dimension is \(n \times p\). \(C \) called output matrix , it’s dimension is \(q \times n\). D called input &amp; output relational matrix, it’s dimension is \(q \times p\).</p><p>According to system’s transfer function , it’s <em>kalman I form</em>  , <em>kalman II form</em> and <em>standard observable  form</em> can be easily provided. Conversely,  given the state space representation , the transfer function could be given in the following formula.</p><script type="math/tex; mode=display">G(s) = C(sI - A)^{-1}B + D</script><p>Here the calculation of \((sI - A)^{-1}\) is cumbersome,  especially for student who has no assistance with computer.The computational  method of \((sI - A)^{-1}\) can be given in a more comprehensive way, as shown below.</p><script type="math/tex; mode=display">(sI - A)^{-1} = \frac{adj(sI - A)}{det(sI - A)}</script><script type="math/tex; mode=display">adj(sI - A) = R\_{n-1}s^{n-1} +R\_{n-2}s^{n-2} + \dotsb + R\_1s + R\_0</script><script type="math/tex; mode=display">det(sI - A) = s^n + a\_{n-1}s^{n-1} + a\_{n-2}s^{n-2}+ \dotsb + a\_1s + a\_0</script><p>So here i have already given  the method of computation of \((sI - A)^{-1}\), the next question is how to calculate \(R_{n-1}, R_{n-2}, \dots, R_0\) and \(a_{n-1}, a_{n-1}, \dots, a_{0}\). The relationship of them is brief and clear.</p><script type="math/tex; mode=display">\begin{cases} R\_{n-1} =  I,a\_{n-1} = - \frac{tr(R\_{n-1}A)}{1} \\\\ R\_{n-2} = R\_{n-1}A + a\_{n-1}I, a\_{n-2}= -\frac{tr(R\_{n-2}A)}{2} \\\\ \cdots \\\\  \cdots \\\\ R\_{1} = R\_{2}A + a\_{2}I, a\_{1}= -\frac{tr(R\_{1}A)}{(n-1)} \\\\ R\_{0} = R\_{1}A + a\_{1}I, a\_{0}= -\frac{tr(R\_{0}A)}{n}\end{cases}</script><p>As shown above,  \(R_{n-1} \)and \(a_{n-1}\)are firstly calculated, \(R_{n-2}\) and \(a_{n-2}\) are followed, then continue the calculation process until the subscript of \(R\) and \(a\) is reached to \(0\) According to equations above, we can easily give the implementation of converting to state space representation to transfer function representation using Matlab. </p><h3 id="Matlab-implementation"><a href="#Matlab-implementation" class="headerlink" title="Matlab implementation"></a>Matlab implementation</h3><p>In the previous section, we already have introduced mathematics basis of state space representation and transfer function representation of the linear system, and given the method of conversion between each other. So the process of implementing it is much easier using computer language, here I give an implementation using Matlab, the code as follows.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% @file: ss2tf.m</span></div><div class="line"><span class="comment">% @description: </span></div><div class="line"><span class="comment">%     The reponsibility of this function is to convert the linear </span></div><div class="line"><span class="comment">%     system's state  space representation to transfer function</span></div><div class="line"><span class="comment">%     representation.</span></div><div class="line"><span class="comment">% @paras: A, system matrix</span></div><div class="line"><span class="comment">% @paras: B, input matrix</span></div><div class="line"><span class="comment">% @paras: C, ouput matrix</span></div><div class="line"><span class="comment">% @paras: D, input&amp;ouput relational matrix</span></div><div class="line"><span class="comment">% @return: G, transfer function</span></div><div class="line"><span class="comment">% @return: CSAI, the inverse matrix of characteristic matrix of A</span></div><div class="line"><span class="comment">%</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[G, CSAI]</span> = <span class="title">ss2tf</span><span class="params">(A, B, C, D)</span></span></div><div class="line">    <span class="comment">% Get the dimension number of state space representation</span></div><div class="line">    n = <span class="built_in">size</span>(A, <span class="number">1</span>);</div><div class="line">    <span class="comment">% Generate the identity matrix which's dimension size is same as A</span></div><div class="line">    I = <span class="built_in">eye</span>(<span class="built_in">size</span>(A));</div><div class="line">    <span class="comment">% Coefficient array of determinant of A</span></div><div class="line">    coef = <span class="built_in">ones</span>(n, <span class="number">1</span>);</div><div class="line">    <span class="comment">% R matrix </span></div><div class="line">    Rx = <span class="built_in">zeros</span>(n, n ,n);</div><div class="line">    <span class="comment">% Calculate the Rn-1</span></div><div class="line">    Rx(:, :, <span class="number">1</span>) = I;</div><div class="line">    <span class="comment">% Calculate the an-1</span></div><div class="line">    coef(<span class="number">1</span>) = -trace(I * A);</div><div class="line">    <span class="comment">% Define the laplace variable 's'</span></div><div class="line">    s = tf(<span class="string">'s'</span>);</div><div class="line">    <span class="comment">% Calculate the first part of R = Rn-1 * Sn-1</span></div><div class="line">    R = Rx(:, :, <span class="number">1</span>) * s^(n<span class="number">-1</span>);</div><div class="line">    <span class="comment">% Calculate the first and second part of determinant of A</span></div><div class="line">    <span class="comment">% i.e. s^n + an-1 * s^(n-1) + ... + a0</span></div><div class="line">    detSA = s^n + coef(<span class="number">1</span>) * s ^ (n - <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">2</span>: n</div><div class="line">        Rx(:, :, <span class="built_in">i</span>) = Rx(:, :, <span class="built_in">i</span><span class="number">-1</span>) * A + coef(<span class="built_in">i</span> - <span class="number">1</span>) * I;</div><div class="line">        coef(<span class="built_in">i</span>) = <span class="number">-1</span> * trace(Rx(:, :, <span class="built_in">i</span>)* A) / <span class="built_in">i</span>;</div><div class="line">        R = R + Rx(:, :, <span class="built_in">i</span>) * s^(n-<span class="built_in">i</span>);</div><div class="line">        detSA = detSA + coef(<span class="built_in">i</span>) * s ^ (n - <span class="built_in">i</span>);</div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="comment">% Compute the transfer function according to system's state space </span></div><div class="line">    <span class="comment">% representation ,the formula as follows:</span></div><div class="line">    <span class="comment">%   G(s) = C * (sI - A)^-1 * B +D</span></div><div class="line">    G = (C * R * B)/ detSA + D;</div><div class="line">    <span class="comment">% Calculate the inverse matrix of characteristic matrix</span></div><div class="line">    <span class="comment">% (sI - A)^-1 = R / detSA</span></div><div class="line">    CSAI = R / detSA;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>Though the code is implemented, in a real world, the testing and implementation are the same importance to the problem. In the following content, the testing code is provided.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% kalman I form </span></div><div class="line">A = [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>; </div><div class="line">     <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>; </div><div class="line">     <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>; </div><div class="line">     <span class="number">-1</span> <span class="number">-5</span> <span class="number">-3</span> <span class="number">-7</span>];</div><div class="line">B = [<span class="number">0</span>;</div><div class="line">     <span class="number">0</span>;</div><div class="line">     <span class="number">0</span>; </div><div class="line">     <span class="number">1</span>];</div><div class="line">C = [<span class="number">8</span> <span class="number">23</span> <span class="number">2</span> <span class="number">-1</span>];</div><div class="line">D = <span class="number">0</span>;</div><div class="line">[G, CSAI] = ss2tf(A, B , C , D);</div><div class="line">G</div></pre></td></tr></table></figure><p>output:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">G =</div><div class="line"> </div><div class="line">     -s^<span class="number">3</span> + <span class="number">2</span> s^<span class="number">2</span> + <span class="number">23</span> s + <span class="number">8</span></div><div class="line">  -----------------------------</div><div class="line">  s^<span class="number">4</span> + <span class="number">7</span> s^<span class="number">3</span> + <span class="number">3</span> s^<span class="number">2</span> + <span class="number">5</span> s + <span class="number">1</span></div><div class="line"> </div><div class="line">Continuous-time transfer <span class="function"><span class="keyword">function</span>.</span></div></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% standard observable form </span></div><div class="line">A = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span>; </div><div class="line">     <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-5</span>; </div><div class="line">     <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-3</span>; </div><div class="line">     <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">-7</span> ];</div><div class="line">B = [<span class="number">8</span>;</div><div class="line">     <span class="number">23</span>;</div><div class="line">     <span class="number">2</span>; </div><div class="line">     <span class="number">-1</span>];</div><div class="line">C = [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>];</div><div class="line">D = <span class="number">0</span>;</div><div class="line">[G, CSAI] = ss2tf(A, B , C , D);</div><div class="line">G</div></pre></td></tr></table></figure><p>output:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">G =</div><div class="line"> </div><div class="line">     -s^<span class="number">3</span> + <span class="number">2</span> s^<span class="number">2</span> + <span class="number">23</span> s + <span class="number">8</span></div><div class="line">  -----------------------------</div><div class="line">  s^<span class="number">4</span> + <span class="number">7</span> s^<span class="number">3</span> + <span class="number">3</span> s^<span class="number">2</span> + <span class="number">5</span> s + <span class="number">1</span></div><div class="line"> </div><div class="line">Continuous-time transfer <span class="function"><span class="keyword">function</span>.</span></div></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://xueshu.baidu.com/s?wd=paperuri%3A%28269231923bf2d6a86441e28d24e8930c%29&amp;filter=sc_long_sign&amp;sc_ks_para=q%3D%E7%BA%BF%E6%80%A7%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA%28%E7%AC%AC2%E7%89%88%29&amp;sc_us=8313367311188451873&amp;tn=SE_baiduxueshu_c1gjeupa&amp;ie=utf-8" target="_blank" rel="external">[1] 郑大钟. 线性系统理论(第2版)[J]. 2002.</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this semester early, I have enrolled my first-degree course &lt;em&gt;Linear System Theory&lt;/em&gt;. The focus of this course is the state space
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="matlab" scheme="https://free-free.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>Python Enhancement Proposals(pep)</title>
    <link href="https://free-free.github.io/2017/12/22/python-pep/"/>
    <id>https://free-free.github.io/2017/12/22/python-pep/</id>
    <published>2017-12-22T12:59:28.000Z</published>
    <updated>2017-12-25T08:17:10.430Z</updated>
    
    <content type="html"><![CDATA[<p>This  article is a list notes about <code>Python Enhancement Proposal</code>, aka <code>PEP</code>, which contains proposals those should be well known to every python developer.  So, What’s means of <code>PEP</code>? Here, I don’t want to explain it too much to you, I cite a  brief definition about it  from Wikipedia, as follows:</p><blockquote><p>Python’s development is conducted largely through the <em>Python Enhancement Proposal</em> (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues and documenting Python design decisions. Outstanding PEPs are reviewed and commented on by the Python community and Guido Van Rossum, Python’s <a href="https://en.wikipedia.org/wiki/Benevolent_Dictator_For_Life" target="_blank" rel="external">Benevolent Dictator For Life</a></p><p>​                                                                    —- from Wikipedia</p></blockquote><h5 id="PEP-0"><a href="#PEP-0" class="headerlink" title="PEP 0"></a><strong>PEP 0</strong></h5><p>This PEP maintains  the index of all Python Enhancement Proposals, aka PEPs. Each PEP number is assigned by the PEP author, once assigned is never changed.</p><p><a href="https://www.python.org/dev/peps/" target="_blank" rel="external">PEP contents</a></p><h5 id="PEP-1"><a href="#PEP-1" class="headerlink" title="PEP 1"></a><strong>PEP 1</strong></h5><p>This PEP introduces the concept of PEPs and detailly explains the workflow of PEPs.</p><p><a href="https://www.python.org/dev/peps/pep-0001/" target="_blank" rel="external">PEP contents</a></p><h5 id="PEP-8"><a href="#PEP-8" class="headerlink" title="PEP 8"></a><strong>PEP 8</strong></h5><p>This PEP is deadly necessary to python developer who want to write human-readable and concise python code. I strongly recommend you to read it and perform it if want to go further more on python.</p><p><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">PEP contents</a></p><p>This article will be updated at all times.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This  article is a list notes about &lt;code&gt;Python Enhancement Proposal&lt;/code&gt;, aka &lt;code&gt;PEP&lt;/code&gt;, which contains proposals those should
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Find Out First None-Zero Element&#39;s Index of Each Row in Matlab Matrices</title>
    <link href="https://free-free.github.io/2017/12/15/find-first-nonezero-element-index-of-each-row-in-matlab-matrix/"/>
    <id>https://free-free.github.io/2017/12/15/find-first-nonezero-element-index-of-each-row-in-matlab-matrix/</id>
    <published>2017-12-15T12:54:08.000Z</published>
    <updated>2017-12-21T15:07:35.293Z</updated>
    
    <content type="html"><![CDATA[<p>How to find out the none-zero element index of each row in matlab matrix without using for loop?  Honestly, this fucking problem frustrates me  all day, I have no spark about this, fortunately, i get a roughly problem-solving  solution with the help of enthusiastic people. Ok ,lets get down to code.</p><p>Here we assume $A$ is a $m\times n$ matrix, the problem is find out the index of first none-zero element of each row in $A$. </p><h4 id="The-first-try"><a href="#The-first-try" class="headerlink" title="The first try"></a>The first try</h4><p><strong>code</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">idx = sum(A==<span class="number">0</span>, <span class="number">2</span>) + <span class="number">1</span></div></pre></td></tr></table></figure><p>The above code seems to be working, the truths is that it just  works fine in some special matrices, like</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">A = </div><div class="line"></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>    <span class="number">12</span>    <span class="number">11</span></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></div><div class="line">     <span class="number">0</span>    <span class="number">32</span>    <span class="number">21</span>   <span class="number">343</span>    <span class="number">54</span>    <span class="number">43</span></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></div><div class="line">     </div><div class="line">idx = sum(A==<span class="number">0</span>, <span class="number">2</span>) + <span class="number">1</span></div><div class="line"><span class="comment">% The output follows</span></div><div class="line"><span class="built_in">ans</span> =</div><div class="line"></div><div class="line">     <span class="number">5</span></div><div class="line">     <span class="number">4</span></div><div class="line">     <span class="number">2</span></div><div class="line">     <span class="number">6</span></div><div class="line"><span class="comment">% see that,it is corret</span></div></pre></td></tr></table></figure><p>but except other general matrices,like</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">A =</div><div class="line"></div><div class="line">     <span class="number">0</span>     <span class="number">2</span>     <span class="number">0</span>     <span class="number">0</span>    <span class="number">12</span>    <span class="number">11</span></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></div><div class="line">     <span class="number">0</span>    <span class="number">32</span>    <span class="number">21</span>   <span class="number">343</span>    <span class="number">54</span>    <span class="number">43</span></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span></div><div class="line">idx = sum(A==<span class="number">0</span>, <span class="number">2</span>) + <span class="number">1</span></div><div class="line"><span class="comment">% The output follows</span></div><div class="line"><span class="built_in">ans</span> =</div><div class="line"></div><div class="line">     <span class="number">4</span></div><div class="line">     <span class="number">4</span></div><div class="line">     <span class="number">2</span></div><div class="line">     <span class="number">6</span></div></pre></td></tr></table></figure><p>The first try  is failed, but it doesn’t mean i was defeated.So i start my second problem-solving try.</p><h4 id="The-second-try"><a href="#The-second-try" class="headerlink" title="The second try"></a>The second try</h4><p><strong>code:</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">idx = sum(cumsum(A~=<span class="number">0</span>, <span class="number">2</span>)==<span class="number">0</span>, <span class="number">2</span>) + <span class="number">1</span>;</div></pre></td></tr></table></figure><p>It seems i find the way to correct answer this time, but ….. it’s not working in some special case, likes the following matrix </p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">A =</div><div class="line"></div><div class="line">     <span class="number">0</span>     <span class="number">2</span>     <span class="number">0</span>     <span class="number">0</span>    <span class="number">12</span>    <span class="number">11</span>     <span class="number">0</span></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">0</span></div><div class="line">     <span class="number">0</span>    <span class="number">32</span>    <span class="number">21</span>   <span class="number">343</span>    <span class="number">54</span>    <span class="number">43</span>     <span class="number">0</span></div><div class="line">     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span></div><div class="line"></div><div class="line">idx = sum(cumsum(A~=<span class="number">0</span>, <span class="number">2</span>)==<span class="number">0</span>, <span class="number">2</span>) + <span class="number">1</span></div><div class="line"><span class="comment">% The last element of output seems to be not working, it's value exceeds the maximum index of A's column.</span></div><div class="line"><span class="built_in">ans</span> =</div><div class="line"></div><div class="line">     <span class="number">2</span></div><div class="line">     <span class="number">4</span></div><div class="line">     <span class="number">2</span></div><div class="line">     <span class="number">8</span></div></pre></td></tr></table></figure><p>OK, this time we get more closer to the correct answer.The next question is we  how to deal with the  index-exceeding problem.Lets go further to launch our  third try</p><h4 id="The-third-try"><a href="#The-third-try" class="headerlink" title="The third try"></a>The third try</h4><p><strong>code:</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">idx = sum(cumsum(A~=<span class="number">0</span>, <span class="number">2</span>)==<span class="number">0</span>, <span class="number">2</span>) + <span class="number">1</span>;</div><div class="line">idx(idx &gt; <span class="built_in">size</span>(A, <span class="number">2</span>)) = <span class="built_in">nan</span>;</div></pre></td></tr></table></figure><p>In the above code, we directly assign the  index which exceed the maximum index number to <code>nan</code>.               I can bet this time , it must work fine in all  cases. What? You don’t believe what i have said. Ok, i don’t want to persuade you. The fact is alway fact, you can run the code on your machine.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;How to find out the none-zero element index of each row in matlab matrix without using for loop?  Honestly, this fucking problem frustrat
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="matlab" scheme="https://free-free.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>A Brief Introduction of Several Useful Convolutional Networks</title>
    <link href="https://free-free.github.io/2017/11/08/brief-introduction-of-several-convolution-networks/"/>
    <id>https://free-free.github.io/2017/11/08/brief-introduction-of-several-convolution-networks/</id>
    <published>2017-11-08T12:09:00.000Z</published>
    <updated>2018-04-01T08:18:50.006Z</updated>
    
    <content type="html"><![CDATA[<p>This  article is the course handout for Stanford University CS231n’s. it mainly contains a brief introduction of several common Convolutional Networks.</p><ul><li><p><strong>LeNet</strong></p><p>The first successful applications of Convolutional Networks were developed by Yann LeCun in 1990’s.Of these, the best known is the LeNet architecture that was used in read zip codes, digits,etc.</p><p><em>paper</em> : <a href="http://yann.lecun.com/exdb/publis/pdf/lecun-98.pdf" target="_blank" rel="external"><em>donwload</em></a></p></li><li><p><strong>AlexNet</strong></p><p>The first work that popularized Convolutional Networks in Computer Vision was the AlexNet,developed by Alex Krizhevsky,llya Sutskever and Geoff Hinton. The AlexNet was submitted to the  <a href="http://www.image-net.org/challenges/LSVRC/2014/" target="_blank" rel="external">ImageNet ILSVRC challenge</a> in 2012 and significantly outperformed  the second runner-up(top 5 error of 16% compared to runner-up with 26% error). The Network had a very similar architecture to LeNet, but was deeper,bigger,and featured Convolutional Layers stacked on top of each other(previously it was common to only have single CONV layer always immediately followed by a POOL layer)</p><p><em>paper</em> : <a href="http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks" target="_blank" rel="external"><em>download</em></a></p></li><li><p><strong>ZF Net</strong></p><p>The ILSVRC 2013 winner was a Convolutional Network from Matthew Zeiler and Rob Fergus. It became known as the ZFNet(short for Zerler &amp; Fergus Net). It was an improvement on AlexNet by tweaking the architecture hyperparameters, in particular by expanding the size of the middle convolutional layers and making the stride and filter size on the first layer smaller</p><p><em>paper</em> : <a href="http://arxiv.org/abs/1311.2901" target="_blank" rel="external"><em>download</em></a></p></li><li><p><strong>GoogLeNet</strong></p><p>The ILSVRC 2014 winner was a Convolutional Network from Szegedy et al. from Google. Its main contribution was the development of an <em>Inception Module</em> that dramatically reduced the number of parameters in the network(4M, compared to AlexNet with 60M). Additionally, this paper uses Average Pooling instead of Fully Connected layers at the top of the ConvNet, eliminating a large amount of parameters that do not seem to matter much. There are also several follow up versions to the GoogLeNet,most recently <a href="http://arxiv.org/abs/1602.07261" target="_blank" rel="external">Inception-v4</a>.</p><p><em>paper</em> : <a href="http://arxiv.org/abs/1409.4842" target="_blank" rel="external"><em>download</em></a></p></li><li><p><strong>VGGNet</strong></p><p>The runner-up in ILSVRC 2014 was the network from Karen Simonyan and Andrew Zisserman that became known as the VGGNet. Its main contribution was in showing that the depth of the network is a critical component for good performance. Their final best network contains 16 CONV/FC layers and, appealingly , features an extremely homogeneous architecture that only performs 3x3 convolutions and 2x2 pooling from the beginning to the end .Their <a href="http://www.robots.ox.ac.uk/~vgg/research/very_deep/" target="_blank" rel="external">pretrained model</a> is available for plug and play use in Caffe. A downside of the VGGNet is that it is more expensive to evaluate and uses a lot more memory and parameters(140M). Most of these parameters are  in the first fully connected layer, and it was since found that these FC layers can be removed with no performance downgrade , significantly reducing the number of necessary parameters</p><p><em>paper</em> : <a href="http://www.robots.ox.ac.uk/~vgg/research/very_deep/" target="_blank" rel="external"><em>donwload</em></a></p></li><li><p><strong>ResNet</strong></p><p>Residual Network developed by Kaiming  He et al. was the winner of ILSVRC 2015. It features special skip connections and a heavy use of batch normalization. The architecture is also missing fully connected layers at the end of the network. The reader is also referred to Kaiming’s presentations(<a href="https://www.youtube.com/watch?v=1PGLj-uKT1w" target="_blank" rel="external">video</a>, <a href="http://research.microsoft.com/en-us/um/people/kahe/ilsvrc15/ilsvrc2015_deep_residual_learning_kaiminghe.pdf" target="_blank" rel="external">slides</a>), and some <a href="https://github.com/gcr/torch-residual-networks" target="_blank" rel="external">recent experiments</a> that reproduce these networks in Torch. ResNets are currently by far state of the art Convolutional Neural Network models and are the default choice for using ConvNets in practice(as of May 10, 2016). In particular, also see more recent developments that tweak the original architecture from <a href="https://arxiv.org/abs/1603.05027" target="_blank" rel="external">Kaiming He et al. Identity Mappings in Deep Residual Networks</a> (published  Marc 2016).</p><p><em>paper</em> : <a href="http://arxiv.org/abs/1512.03385" target="_blank" rel="external"><em>donwload</em></a></p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://cs231n.github.io/convolutional-networks/" target="_blank" rel="external">[1]Convolutional Neural Networks (CNNs / ConvNets)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This  article is the course handout for Stanford University CS231n’s. it mainly contains a brief introduction of several common Convoluti
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="machine learning" scheme="https://free-free.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>关于学习新技术的方法和反思</title>
    <link href="https://free-free.github.io/2017/11/02/my-mind-pattern01/"/>
    <id>https://free-free.github.io/2017/11/02/my-mind-pattern01/</id>
    <published>2017-11-02T12:49:23.000Z</published>
    <updated>2018-03-15T13:04:29.171Z</updated>
    
    <content type="html"><![CDATA[<p>　　在这个技术日新月异的时代，每天都有很多技术过时，同时也会很多新技术被发明出来，作为一名技术人员，在学习新技术时，会有自己的一套学习方法。在此将自己的学习方法和反思记录下来。</p><p>　　在面对新技术时，不同的技术人员会根据自己的思维习惯采取不同的学习方法，但总的来说，大体分为两类。第一类是抛开其他因素，直接上手，以最快的速度将新技术运用到实践中，然后再根据自己的情况选择是否要在这门技术上深入下去。而第二类则是先做大量相关的基础铺垫，等基础牢固了，再去学习新技术。对于我而言，会根据不同的情况选择不同的学习方法。在项目紧急的情况下，我会选择第一类方法，以最快的速度将技术运用到实践中，等项目完成之后，再去考虑需不需要在这门技术上深入下去。比如，在一次项目中，需要使用QT开发一个Desktop Client，但之前我并没有QT相关的项目经验，也没有使用过C++开发过任何程序，项目又很紧急。在这个时候，唯一的办法就是直接上手QT，看官网文档，跑官网提供的例程。在跑了几个例程之后，大体了解了QT开发程序的基本思路，直接在例程上修改代码，实现自己的Desktop Client。在实现的过程中，也遇到了很多的问题，但相关的网站和论坛都能找得到相关的解决方案，最后顺利在deadline 之前完成。总的来说，第一类方法确实是一个很好的学习方法，在做中学，学中做，但对于我而言，这样做我会很没自信，心里会一种基础不牢而产生的恐惧感，所以在不紧急的情况下我都会选择第二类方法，它会让我感觉很自信、很踏实。研究生期间，自己选择机器学习作为研究方向，我没有选择直接上手机器学习，而是选择先去学习相关的数学知识(概率论、微积分、线性代数、最优化等)。虽然这些知识在本科的时候已经学过，但是自己心里还是很没自信，另一个我在时刻提醒自己必须先把数学再学一次才能去学习机器学习，但是再学这些数学知识又会将整个学习战线拉的很长，我担心自己没坚持到最后先就死在铺路过程中，这在很大程度上打击了自己学习动力(至少目前为止是这样)。在经过一段时间的纠结之后，我认为有必要去改变一下自己的学习方法，要大胆去尝试，不能畏于自己的纠结情绪。在学习新技术时的这种纠结情绪，我想很多技术人都会有，只是轻重不一样。记得一次在Udacity DL学习群里，有一个学员在群里问“学习DL需要哪些数学知识？”，结果另一个学员回答了一大通”微积分、概率论、线性代数、矩阵论、凸优化、流型理论、信息论……..”，结果群里马上出来十几个人批斗他，批的他最后直接退群了。果然语言是最厉害的武器。虽然只是一个小插曲，但是从那时起我就试图去反思自己的学习方法，改变一下学习策略。大多数技术员在刚接触一个新技术时都只是技术的使用者，并不是创造者，在开始我们自己也不知道自己到底缺哪方面的知识，不需要掌握太多相关的细节也能根据自己以往的技术经验快速将新技术应用到实践中去，在实践过程自然会发现自己缺少哪些知识，这时候有针对性的学习才是最好的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　在这个技术日新月异的时代，每天都有很多技术过时，同时也会很多新技术被发明出来，作为一名技术人员，在学习新技术时，会有自己的一套学习方法。在此将自己的学习方法和反思记录下来。&lt;/p&gt;
&lt;p&gt;　　在面对新技术时，不同的技术人员会根据自己的思维习惯采取不同的学习方法，但总的来
      
    
    </summary>
    
      <category term="mylife" scheme="https://free-free.github.io/categories/mylife/"/>
    
    
      <category term="notes" scheme="https://free-free.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>机器学习相关论文(持续更新)</title>
    <link href="https://free-free.github.io/2017/10/30/machine-learning-latest-topic-article/"/>
    <id>https://free-free.github.io/2017/10/30/machine-learning-latest-topic-article/</id>
    <published>2017-10-30T05:02:05.000Z</published>
    <updated>2018-04-01T08:19:27.003Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><p><strong>The  History Began from AlexNet: A Comprehensive Survey on Deep Learning Approaches</strong></p><p>paper: <a href="https://arxiv.org/abs/1803.01164" target="_blank" rel="external">download</a></p><p>author: Md Zahangir Alom, Tarek M. Taha, Cristopher Yakopcic, Stefan Westberg, Mahmudul Hasan, Brian C Van Esesn, Andul A S. Awwal, Vijayan K. Asari</p><p>date: Latest updated on 3 Mar 2018</p></li></ul><hr><ul><li><p><strong>Dynamic Routing Between Capsules</strong></p><p>paper : <a href="https://arxiv.org/pdf/1710.09829.pdf" target="_blank" rel="external">download</a></p><p>author : Geoffrey E. Hinton, Sara Sabour and  Nicholas Frosst</p><p>date: September 2017</p></li></ul><hr><ul><li><p><strong>Multi-Scale Context Aggregation by Dilated Convolutions</strong></p><p>paper : <a href="https://arxiv.org/abs/1511.07122" target="_blank" rel="external">download</a></p><p>author : Fisher Yu, Vladlen Koltun</p><p>date : 2015</p></li></ul><hr><ul><li><p><strong>Striving for Simplicity: The All Convolutional Net</strong></p><p>paper : <a href="https://arxiv.org/abs/1412.6806" target="_blank" rel="external">download</a></p><p>author : Jost Tobias Springenberg, Alexey Dosovitskiy, Thomas Brox, Martin Riedmiller</p><p>date: 2014</p></li></ul><hr><ul><li><p><strong>Reducing the Dimensionality of Data with Neural Networks</strong></p><p>paper : <a href="https://pdfs.semanticscholar.org/7d76/b71b700846901ac4ac119403aa737a285e36.pdf" target="_blank" rel="external">download</a></p><p>author : G. E. Hinton and R. R. Salakhutdinov</p><p>date : 2006</p></li></ul><hr><ul><li><p><strong>Deep Learning：Yestoday，Today，and Tomorrow</strong></p><p>paper :  <a href="http://oymgew2u4.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%98%A8%E5%A4%A9%E3%80%81%E4%BB%8A%E5%A4%A9%E5%92%8C%E6%98%8E%E5%A4%A9%28%E4%BD%99%E5%87%AF%2A%29.pdf" target="_blank" rel="external">download</a></p><p>author : Yu Kai，Jia Lei，Chen Yuqiang，and Xu Wei</p><p>date : 2013</p></li></ul><hr><ul><li><p><strong>Backpropagration Applied To Handwrittn Zip Code Recogition</strong></p><p>paper : <a href="http://yann.lecun.com/exdb/publis/pdf/lecun-89e.pdf" target="_blank" rel="external">download</a></p><p>author : Y.LeCun,B.Boser,J.S.Denker,D.Henderson,R.E.Howard,W.Hubbard and L.D.Jackel</p><p>date : 1989</p></li></ul><hr><ul><li><p><strong>Experiments on Learning by Back Propagation</strong></p><p>paper : <a href="http://www.cs.toronto.edu/~fritz/absps/bptr.pdf" target="_blank" rel="external">download</a></p><p>author : David C.Plaut,Steven J.Nowlan and Geoffrey E.Hinton</p><p>date : June 1986</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The  History Began from AlexNet: A Comprehensive Survey on Deep Learning Approaches&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;paper: &lt;a href=
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="machine learning" scheme="https://free-free.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>使用共享状态实现单例模式？</title>
    <link href="https://free-free.github.io/2017/10/30/implementation-of-singleton-using-share-state/"/>
    <id>https://free-free.github.io/2017/10/30/implementation-of-singleton-using-share-state/</id>
    <published>2017-10-30T02:18:47.000Z</published>
    <updated>2017-11-04T12:26:28.593Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>之前介绍了3种实现单例模式方法：</p><ul><li><a href="/2017/10/11/implementation-of-singleton-using-decrator/">使用装饰器实现python单例模式</a></li><li><a href="/2017/10/14/implementation-of-singleton-using-metaclass/">使用元类实现python 单例模式</a></li><li><a href="/2017/10/29/implemenation-of-singleton-using-new-method/">使用Python类 <strong>__new__</strong> 方法实现单例模式</a></li></ul><p>这种三种实现方法都是我们通常理解的单例模式：即每次创建对象时，都返回同一个对象。但从一个更广的层面上讲，单例模式不仅可以理解为一个类创建的所有对象在内存中都是同一个对象，也可以理解为一个类的所有对象都共享同一状态。共享状态之后，虽然类每次创建的对象都不同，但是它们有一个共享的状态，一个对象对自己的状态操作，也会通过共享状态反映到其他的对象上<a href="http://code.activestate.com/recipes/66531/" target="_blank" rel="external">[1]</a>，这样做也能达到传统单例模式要求的功能。对于Python而言，所谓共享状态是将每一个对象的<code>__dict__</code>指向同一个字典。这种通过共享状态实现单例模式的方法被称为<strong>Borg</strong>或者<strong>Monostate</strong>。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h3><h5 id="2-1-Environment"><a href="#2-1-Environment" class="headerlink" title="2.1 Environment"></a>2.1 Environment</h5><ul><li>ubuntu16.04</li><li>python3.5</li></ul><h5 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">  </div><div class="line">  <span class="comment"># 在将共享状态放在类的属性，</span></div><div class="line">  _share_state = &#123;&#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment">#The following code must be placed in first line in your __init__ method</span></div><div class="line">    self.__dict__ = share_state</div><div class="line">    <span class="comment"># The following code is your logical code </span></div><div class="line">    <span class="comment"># .....</span></div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  obj1 = Singleton()</div><div class="line">  obj2 = Singleton()</div><div class="line">  print(id(obj1))</div><div class="line">  print(id(obj2))</div><div class="line">  obj1.age = <span class="number">21</span></div><div class="line">  <span class="comment"># 对obj1的操作会通过共享状态反映到obj2上</span></div><div class="line">  print(obj2.age)</div><div class="line">  obj2.age += <span class="number">10</span></div><div class="line">  <span class="comment"># 对obj2的操作也会通过贡献状态反映到obj1上</span></div><div class="line">  print(obj1.age)</div></pre></td></tr></table></figure><p>output</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">140481749803528</span></div><div class="line"><span class="number">140481749803640</span></div><div class="line"><span class="number">21</span></div><div class="line"><span class="number">31</span></div></pre></td></tr></table></figure><p>another way: 在<code>__new__</code>method实现状态的共享，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">  </div><div class="line">  <span class="comment"># 在将共享状态放在类的属性，</span></div><div class="line">  _share_state = &#123;&#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">    obj = super().__new__(cls, *args, **kwargs)</div><div class="line">    obj.__dict__ = cls._share_state</div><div class="line">    <span class="keyword">return</span> obj</div></pre></td></tr></table></figure><p>上面的两种实现方法是在<code>__init__</code>method中或者<code>__new__</code>method中实现状态共享，都是侵入式的。为了让类的实现显得更加的优美、解耦，可以使用装饰器来实现，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Borg</span><span class="params">(cls)</span>:</span></div><div class="line">  cls._obj_share_state = &#123;&#125;</div><div class="line">  original_init = cls.__init__</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new_init</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">    self.__dict__ = cls._obj_share_state</div><div class="line">    original_init(self, *args, **kwargs)</div><div class="line">  cls.__init__ = new_init</div><div class="line">  <span class="keyword">return</span> cls</div><div class="line"></div><div class="line"><span class="meta">@Borg</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">KlassOne</span><span class="params">(object)</span>:</span></div><div class="line">    </div><div class="line">  </div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  obj1 = KlassOne()</div><div class="line">  obj2 = KlassOne()</div><div class="line">  print(id(obj1))</div><div class="line">  print(id(obj2))</div><div class="line">  obj1.age = <span class="number">10</span></div><div class="line">  print(obj2.age)</div><div class="line">  obj2.age += <span class="number">30</span></div><div class="line">  print(obj1.age)</div></pre></td></tr></table></figure><p>output：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">139977434952480</span></div><div class="line"><span class="number">139977434952648</span></div><div class="line"><span class="number">10</span></div><div class="line"><span class="number">40</span></div></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://code.activestate.com/recipes/66531/" target="_blank" rel="external">[1]SINGLETON? WE DON’T NEED NO STINKIN’ SINGLETON: THE BORG DESIGN PATTERN</a></p><p><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">[2]Python单例模式的4种实现方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h3&gt;&lt;p&gt;之前介绍了3种实现单例模式方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/10/11/implement
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用Python类__new__方法实现单例模式</title>
    <link href="https://free-free.github.io/2017/10/29/implemenation-of-singleton-using-new-method/"/>
    <id>https://free-free.github.io/2017/10/29/implemenation-of-singleton-using-new-method/</id>
    <published>2017-10-29T10:35:10.000Z</published>
    <updated>2017-11-04T12:26:10.277Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>前两篇文章分别介绍了<a href="/2017/10/11/implementation-of-singleton-using-decrator/">使用装饰器实现单例模式</a>和<a href="/2017/10/14/implementation-of-singleton-using-metaclass/">使用元类实现单例模式</a>。这篇文章介绍使用Python类的<code>__new__</code>方法来实现单例模式。当谈及Python类实例化对象时，不得不提到创建对象过程中涉及到的两个方法<code>__init__</code>和<code>__new__</code>。在Python的类中，<code>__init__</code>method是对象初始化器，而且<code>__new__</code>method才是真正的构造method，它负责创建对象，并将创建的对象返回。对象的创建流程如下：</p><p><img src="http://oy4cno18k.bkt.clouddn.com/implementation-of-singleton-using-new-method-01.png" alt=""></p><p>图中实线箭头表示调用关系，虚线表示返回。当类创建一个对象时，由类的Metaclass的<code>__call__</code>method来调用类的<code>__new__</code>method，<code>__new__</code>method将对象创建好之后返回给Metaclass的<code>__call__</code>method，然后由Metaclass的<code>__call__</code>method来调用类的<code>__init__</code>method。根据上面的流程可知，要实现单例模式，只需要在类中实现<code>__new__</code>method，并每次返回同一个对象即可。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h3><h5 id="2-1-Environment"><a href="#2-1-Environment" class="headerlink" title="2.1 Environment"></a>2.1 Environment</h5><ul><li>ubuntu16.04</li><li>python3.5</li></ul><h5 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">    print(<span class="string">"Creating object!"</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</div><div class="line">      cls._instance = super().__new__(cls, *args, **kwargs)</div><div class="line">    <span class="keyword">return</span> cls._instance</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">"Initiating object!"</span>)</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  obj1 = Singleton()</div><div class="line">  obj2 = Singleton()</div><div class="line">  print(id(obj1))</div><div class="line">  print(id(obj2))</div><div class="line">  print(obj1 == obj2)</div></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Creating object!</div><div class="line">Initiating object!</div><div class="line">Creating object!</div><div class="line">Initiating object!</div><div class="line"><span class="number">140549528785752</span></div><div class="line"><span class="number">140549528785752</span></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure><p>由输出可知创建的两个对象都是同一个实例，同时也验证了对象的创建流程。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">[1]Python单例模式的4种实现方法</a></p><p><a href="https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/" target="_blank" rel="external">[2]Understanding Python metaclasses</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h3&gt;&lt;p&gt;前两篇文章分别介绍了&lt;a href=&quot;/2017/10/11/implementation-of-singleton-usi
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Markdown集成mathjax</title>
    <link href="https://free-free.github.io/2017/10/24/integrate-with-mathjax-in-markdown/"/>
    <id>https://free-free.github.io/2017/10/24/integrate-with-mathjax-in-markdown/</id>
    <published>2017-10-24T10:42:57.000Z</published>
    <updated>2018-04-17T15:02:30.034Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML"></script><p>[TOC]</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​    之前一直使用markdown写文章，使用的都是markdown常规的语法，并没有考虑过怎样使用markdown插入数学公式，直到最近需要在文章中插入数学公式时，才认真考虑怎样使用markdown插入数学公式。在网上查了之后，发现markdown并不支持直接插入数学公式，需要借助第三方来插入，在草草试用几种插入数学公式的方式之后，个人觉得使用MathJax插入数学公式比较方便、简洁，插入的数学公式也很漂亮。遂在这里把怎样使用MathJax在markdown中插入数学公式的方法和基本的MathJax的语法记录下来，以便之后学习，如有什么错误请大家指教。</p><h1 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h1><h2 id="1-MathJax简介"><a href="#1-MathJax简介" class="headerlink" title="1. MathJax简介"></a>1. MathJax简介</h2><p>MathJax是一个javascript软件包，它允许你通过LaTex、MathML或者AsciiMath语法在网页中插入数学公式，并通过javascript处理之后产生HTML、SVG或者MathML equations 等可视化的格式，以便在浏览器中浏览。</p><h2 id="2-引入MathJax"><a href="#2-引入MathJax" class="headerlink" title="2. 引入MathJax"></a>2. 引入MathJax</h2><ul><li><h3 id="通过CDN引入"><a href="#通过CDN引入" class="headerlink" title="通过CDN引入"></a>通过CDN引入</h3><p>通过CDN网络引入MathJax只需要在Markdown文档加入下面的代码<a href="http://docs.mathjax.org/en/latest/start.html#using-a-content-delivery-network-cdn" target="_blank" rel="external"><a href="http://docs.mathjax.org/en/latest/start.html#using-a-content-delivery-network-cdn" target="_blank" rel="external">1</a></a>，在markdown解析的时候会通过CDN自动将MathJax加载到当前页面中。该方式需要联网，但也是最简单、最快速的方式，个人推荐也使用这种方式。</p><p><code>&lt;script type=&quot;text/javascript&quot; async src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt;</code></p></li></ul><ul><li><h3 id="本地引入"><a href="#本地引入" class="headerlink" title="本地引入"></a>本地引入</h3><p>本地引入需要将MathJax安装到你的服务器上，或者下载到本地磁盘上，具体引入方式请参考官方文档<a href="http://docs.mathjax.org/en/latest/start.html#installing-your-own-copy-of-mathjax" target="_blank" rel="external"><a href="http://docs.mathjax.org/en/latest/start.html#installing-your-own-copy-of-mathjax" target="_blank" rel="external">2</a></a>。</p></li></ul><h2 id="3-MathJax的LaTex语法"><a href="#3-MathJax的LaTex语法" class="headerlink" title="3. MathJax的LaTex语法"></a>3. MathJax的LaTex语法</h2><h3 id="3-1-数学公式呈现方式"><a href="#3-1-数学公式呈现方式" class="headerlink" title="3.1 数学公式呈现方式"></a>3.1 数学公式呈现方式</h3><h4 id="3-1-1-行内公式-inline-formulas"><a href="#3-1-1-行内公式-inline-formulas" class="headerlink" title="3.1.1 行内公式(inline formulas)"></a>3.1.1 行内公式(inline formulas)</h4><p>所谓行内公式是指公式与文字显示在同一行，以<strong>$</strong>或者<strong>\\\(….\\\\)</strong>来标记，在两个<strong>$</strong>符号插入数学公式。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$\cos&#123;2\theta&#125;=\cos^2&#123;\theta&#125;-\sin^2&#123;\theta&#125;$</div></pre></td></tr></table></figure><p>\(cos{2\theta}=\cos^{2}{\theta}-\sin^{2}{\theta}\)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$\lim_&#123;x \to \infty&#125; \mathrm&#123;e&#125;^&#123;-x&#125; = 0$</div></pre></td></tr></table></figure><p>\(\lim_{x \to \infty} \mathrm{e}^{-x} = 0\)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$f(t)*g(t)=\int_&#123;-\infty&#125;^&#123;+\infty&#125;&#123;f(\tau)g(t-\tau)\mathrm&#123;d&#125;\tau&#125;$</div></pre></td></tr></table></figure><p>\(f(t)*g(t)=\int_{-\infty}^{+\infty}{f(\tau)g(t-\tau)\mathrm{d}\tau}\)</p><h4 id="3-1-2-Displayed-formulas"><a href="#3-1-2-Displayed-formulas" class="headerlink" title="3.1.2 Displayed formulas"></a>3.1.2 Displayed formulas</h4><p>所谓Displayed formulas指单独另起一行居中并放大显示的数学公式，以<strong>$$</strong>来标记，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$\cos^2&#123;2\theta&#125;=\cos^2&#123;\theta&#125;-\sin^2&#123;\theta&#125;$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">\cos^{2}{2\theta}=\cos^2{\theta}-\sin^{2}{\theta}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$\lim_&#123;x \to \infty&#125; \mathrm&#123;e&#125;^(-x) =0$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">\lim_{x \to \infty}\mathrm{e}^{-x}=0</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$f(t)*g(t)=\int_&#123;-\infty&#125;^&#123;+\infty&#125;&#123;f(\tau)g(t-\tau)\mathrm&#123;d&#125;\tau&#125;$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">f(t)*g(t)=\int_{-\infty}^{+\infty}{f(\tau)g(t-\tau)\mathrm{d}\tau}</script><h3 id="3-2-LaTex数学符号"><a href="#3-2-LaTex数学符号" class="headerlink" title="3.2 LaTex数学符号"></a>3.2 LaTex数学符号</h3><h4 id="3-2-1-希腊字母-Greek-letters"><a href="#3-2-1-希腊字母-Greek-letters" class="headerlink" title="3.2.1 希腊字母(Greek letters)"></a>3.2.1 希腊字母(Greek letters)</h4><div class="table-container"><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">\(A,\alpha\)</td><td style="text-align:center">A ,\alpha</td></tr><tr><td style="text-align:center">\(B,\alpha\)</td><td style="text-align:center">B,\beta</td></tr><tr><td style="text-align:center">\(\Gamma,\gamma\)</td><td style="text-align:center">\Gamma,\gamma</td></tr><tr><td style="text-align:center">\(\Delta,\delta\)</td><td style="text-align:center">\Delta,\delta</td></tr><tr><td style="text-align:center">\(E,\epsilon,\varepsilon\)</td><td style="text-align:center">E,\epsilon,\varepsilon</td></tr><tr><td style="text-align:center">\(Z,\zeta\)</td><td style="text-align:center">Z,\zeta</td></tr><tr><td style="text-align:center">\(\Theta,\theta,\vartheta\)</td><td style="text-align:center">\Theta,\theta,\vartheta</td></tr><tr><td style="text-align:center">\(I,\iota\)</td><td style="text-align:center">I,\iota</td></tr><tr><td style="text-align:center">\(K,\kappa,\varkappa\)</td><td style="text-align:center">K,\kappa,\varkappa</td></tr><tr><td style="text-align:center">\(\Lambda,\lambda\)</td><td style="text-align:center">\Lambda,\lambda</td></tr><tr><td style="text-align:center">\(M,\mu\)</td><td style="text-align:center">M,\mu</td></tr><tr><td style="text-align:center">\(N,\nu\)</td><td style="text-align:center">N,\nu</td></tr><tr><td style="text-align:center">\(\Xi,\xi\)</td><td style="text-align:center">\Xi,\xi</td></tr><tr><td style="text-align:center">\(O,o\)</td><td style="text-align:center">O,o</td></tr><tr><td style="text-align:center">\(\Pi,\pi,\varpi\)</td><td style="text-align:center">\Pi,\pi,\varpi</td></tr><tr><td style="text-align:center">\(P,\rho,\varrho\)</td><td style="text-align:center">P,\rho,\varrho</td></tr><tr><td style="text-align:center">\(\Sigma,\sigma,\varsigma\)</td><td style="text-align:center">\Sigma,\sigma,\varsigma</td></tr><tr><td style="text-align:center">\(T,\tau\)</td><td style="text-align:center">T,\tau</td></tr><tr><td style="text-align:center">\(\Upsilon,\upsilon\)</td><td style="text-align:center">\Upsilon,\up</td></tr><tr><td style="text-align:center">\(\Phi,\phi,\varphi\)</td><td style="text-align:center">\Phi,\phi,\varphi</td></tr><tr><td style="text-align:center">\(X,\chi\)</td><td style="text-align:center">X,\chi</td></tr><tr><td style="text-align:center">\(\Psi,\psi\)</td><td style="text-align:center">\Psi,\psi</td></tr><tr><td style="text-align:center">\(\Omega,\omega\)</td><td style="text-align:center">\Omega,\o</td></tr></tbody></table></div><h4 id="3-2-2-其他常用数学符号"><a href="#3-2-2-其他常用数学符号" class="headerlink" title="3.2.2 其他常用数学符号"></a>3.2.2 其他常用数学符号</h4><div class="table-container"><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">\(\partial\)</td><td style="text-align:center">\partial</td></tr><tr><td style="text-align:center">\(\eth\)</td><td style="text-align:center">\eth</td></tr><tr><td style="text-align:center">\(\hbar\)</td><td style="text-align:center">\hbar</td></tr><tr><td style="text-align:center">\(\imath\)</td><td style="text-align:center">\imath</td></tr><tr><td style="text-align:center">\(\jmath\)</td><td style="text-align:center">\jmath</td></tr><tr><td style="text-align:center">\(\ell\)</td><td style="text-align:center">\ell</td></tr><tr><td style="text-align:center">\(\Re\)</td><td style="text-align:center">\Re</td></tr><tr><td style="text-align:center">\(\Im\)</td><td style="text-align:center">\Im</td></tr><tr><td style="text-align:center">\(\wp\)</td><td style="text-align:center">\wp</td></tr><tr><td style="text-align:center">\(\nabla\)</td><td style="text-align:center">\nabla</td></tr><tr><td style="text-align:center">\(\Box\)</td><td style="text-align:center">\Box</td></tr><tr><td style="text-align:center">\(\infty\)</td><td style="text-align:center">\infty</td></tr><tr><td style="text-align:center">\(\aleph\)</td><td style="text-align:center">\aleph</td></tr><tr><td style="text-align:center">\(\beth\)</td><td style="text-align:center">\beth</td></tr><tr><td style="text-align:center">\(\gimel\)</td><td style="text-align:center">\gimel</td></tr></tbody></table></div><h4 id="3-2-3-三角函数符号"><a href="#3-2-3-三角函数符号" class="headerlink" title="3.2.3 三角函数符号"></a>3.2.3 三角函数符号</h4><div class="table-container"><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">\(\sin\)</td><td style="text-align:center">\sin</td></tr><tr><td style="text-align:center">\(\cos\)</td><td style="text-align:center">\cos</td></tr><tr><td style="text-align:center">\(\tan\)</td><td style="text-align:center">\tan</td></tr><tr><td style="text-align:center">\(\cot\)</td><td style="text-align:center">\cot</td></tr><tr><td style="text-align:center">\(\arcsin\)</td><td style="text-align:center">\arcsin</td></tr><tr><td style="text-align:center">\(\arccos\)</td><td style="text-align:center">\arccos</td></tr><tr><td style="text-align:center">\(\arctan\)</td><td style="text-align:center">\\arctan</td></tr><tr><td style="text-align:center">\(\sinh\)</td><td style="text-align:center">\sinh</td></tr><tr><td style="text-align:center">\(\cosh\)</td><td style="text-align:center">\cosh</td></tr><tr><td style="text-align:center">\(\tanh\)</td><td style="text-align:center">\tanh</td></tr><tr><td style="text-align:center">\(\coth\)</td><td style="text-align:center">\coth</td></tr><tr><td style="text-align:center">\(\sec\)</td><td style="text-align:center">\sec</td></tr></tbody></table></div><h4 id="3-3-4-双目运算符"><a href="#3-3-4-双目运算符" class="headerlink" title="3.3.4 双目运算符"></a>3.3.4 双目运算符</h4><div class="table-container"><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">\(\pm\)</td><td style="text-align:center">\pm</td></tr><tr><td style="text-align:center">\(\mp\)</td><td style="text-align:center">\mp</td></tr><tr><td style="text-align:center">\(\times\)</td><td style="text-align:center">\times</td></tr><tr><td style="text-align:center">\(\div\)</td><td style="text-align:center">\div</td></tr><tr><td style="text-align:center">\(\ast\)</td><td style="text-align:center">\ast</td></tr><tr><td style="text-align:center">\(\star\)</td><td style="text-align:center">\star</td></tr><tr><td style="text-align:center">\(\cap\)</td><td style="text-align:center">\cap</td></tr><tr><td style="text-align:center">\(\cup\)</td><td style="text-align:center">\cup</td></tr><tr><td style="text-align:center">\(\sqcap\)</td><td style="text-align:center">\sqcap</td></tr><tr><td style="text-align:center">\(\sqcup\)</td><td style="text-align:center">\sqcup</td></tr><tr><td style="text-align:center">\(\vee\)</td><td style="text-align:center">\vee</td></tr><tr><td style="text-align:center">\(\wedge\)</td><td style="text-align:center">\wedge</td></tr><tr><td style="text-align:center">\(\cdot\)</td><td style="text-align:center">\cdot</td></tr><tr><td style="text-align:center">\(\diamond\)</td><td style="text-align:center">\diamond</td></tr><tr><td style="text-align:center">\(\bigtriangleup\)</td><td style="text-align:center">\bigtriangleup</td></tr><tr><td style="text-align:center">\(\bigtriangledown\)</td><td style="text-align:center">\bigtriangledown</td></tr><tr><td style="text-align:center">\(\triangleleft\)</td><td style="text-align:center">\triangleleft</td></tr><tr><td style="text-align:center">\(\triangleright\)</td><td style="text-align:center">\triangleright</td></tr><tr><td style="text-align:center">\(\bigcirc\)</td><td style="text-align:center">\bigcirc</td></tr><tr><td style="text-align:center">\(\bullet\)</td><td style="text-align:center">\bullet</td></tr><tr><td style="text-align:center">\(\oplus\)</td><td style="text-align:center">\oplus</td></tr><tr><td style="text-align:center">\(\otimes\)</td><td style="text-align:center">\otimes</td></tr><tr><td style="text-align:center">\(\ominus\)</td><td style="text-align:center">\ominus</td></tr><tr><td style="text-align:center">\(\odot\)</td><td style="text-align:center">\odot</td></tr><tr><td style="text-align:center">\(\circ\)</td><td style="text-align:center">\circ</td></tr><tr><td style="text-align:center">\(\setminus\)</td><td style="text-align:center">\setminus</td></tr><tr><td style="text-align:center">\(\oslash\)</td><td style="text-align:center">\oslash</td></tr></tbody></table></div><h4 id="3-2-5-集合逻辑符号"><a href="#3-2-5-集合逻辑符号" class="headerlink" title="3.2.5 集合逻辑符号"></a>3.2.5 集合逻辑符号</h4><div class="table-container"><table><thead><tr><th style="text-align:center">显示符号(大小写)</th><th style="text-align:center">LaText符号</th></tr></thead><tbody><tr><td style="text-align:center">\(\exists\)</td><td style="text-align:center">\exist</td></tr><tr><td style="text-align:center">\(\nexists\)</td><td style="text-align:center">\nexists</td></tr><tr><td style="text-align:center">\(\forall\)</td><td style="text-align:center">\forall</td></tr><tr><td style="text-align:center">\(\neg\)</td><td style="text-align:center">\neg</td></tr><tr><td style="text-align:center">\(\subset\)</td><td style="text-align:center">\subset</td></tr><tr><td style="text-align:center">\(\supset\)</td><td style="text-align:center">\supset</td></tr><tr><td style="text-align:center">\(\in\)</td><td style="text-align:center">\in</td></tr><tr><td style="text-align:center">\(\notin\)</td><td style="text-align:center">\notin</td></tr><tr><td style="text-align:center">\(\ni\)</td><td style="text-align:center">\ni</td></tr><tr><td style="text-align:center">\(\land\)</td><td style="text-align:center">\land</td></tr><tr><td style="text-align:center">\(\lor\)</td><td style="text-align:center">\lor</td></tr><tr><td style="text-align:center">\(\to\)</td><td style="text-align:center">\to</td></tr><tr><td style="text-align:center">\(\gets\)</td><td style="text-align:center">\gets</td></tr><tr><td style="text-align:center">\(\mapsto\)</td><td style="text-align:center">\mapsto</td></tr><tr><td style="text-align:center">\(\implies\)</td><td style="text-align:center">\implies</td></tr><tr><td style="text-align:center">\(\leftrightarrow\)</td><td style="text-align:center">\leftrightarrow</td></tr><tr><td style="text-align:center">\(\Leftrightarrow\)</td><td style="text-align:center">\Leftrightarrow</td></tr><tr><td style="text-align:center">\(\top\)</td><td style="text-align:center">\top</td></tr><tr><td style="text-align:center">\(\bot\)</td><td style="text-align:center">\bot</td></tr><tr><td style="text-align:center">\(\emptyset,\varnothing\)</td><td style="text-align:center">\emptyset,\varnothing</td></tr></tbody></table></div><h4 id="3-2-6-上标号和下标号的表示方法"><a href="#3-2-6-上标号和下标号的表示方法" class="headerlink" title="3.2.6 上标号和下标号的表示方法"></a>3.2.6 上标号和下标号的表示方法</h4><p>在LaTex中，使用<code>^</code>符号代表上标号，使用<code>_</code>符号代表下标号，当上/下标号是一个复合的表达式时，需要将使用curly braces<code>{}</code>将表达式包起来，例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$k_&#123;n+1&#125; = n^2 + k_n^2  - k\_&#123;n-1&#125;$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">k_{n+1} = n^2 + k_n^2 - k_{n-1}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$n^22$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">n^{22}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$lim_&#123;x \to \infty&#125; \mathrm(e)^&#123;-x&#125; =0 $$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">lim_{x \to \infty} \mathrm{e}^{-x} = 0</script><p>也可以使用<code>_</code>和<code>|</code>组合去显示下标的取值，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$f(n) = n^5 + 4n^2 + 2 |_&#123;n=17&#125;$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">f(n) = n^2 + 4n^2 + 2 |_{n=17}</script><h4 id="3-2-7-分式和二项式的表示方法"><a href="#3-2-7-分式和二项式的表示方法" class="headerlink" title="3.2.7 分式和二项式的表示方法"></a>3.2.7 分式和二项式的表示方法</h4><p><strong>分式</strong></p><p>在LaTex中，使用<code>\frac{numerator}{denominator}</code>来创建一个分式，<code>numerator</code>代表分子，<code>denominator</code>代表分子，具体例子如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$frac&#123;n!&#125;&#123;k!(n-k)!&#125;$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">\frac{n!}{k!(n-k)!}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$\frac&#123;\frac&#123;1&#125;&#123;x&#125; + \frac&#123;1&#125;&#123;y&#125;&#125;&#123;y-z&#125;$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">\frac{\frac{1}{x} + \frac{1}{y}}{y-z}</script><p><strong>二项式</strong></p><p>使用<code>\binom{n}{k}</code>来创建一个二项式表达式，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$frac&#123;n!&#125;&#123;k!(n-k)!&#125; =  \binom&#123;n&#125;&#123;k&#125;$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">\frac{n!}{k!(n-k)!} = \binom{n}{k}</script><h4 id="3-2-8-根号的表示方法"><a href="#3-2-8-根号的表示方法" class="headerlink" title="3.2.8 根号的表示方法"></a>3.2.8 根号的表示方法</h4><p>使用<code>\sqrt{...}</code>去创建一个根号表示，使用<code>[]</code>去改变根号的权重，具体例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$\sqrt&#123;\frac&#123;x+1&#125;&#123;x&#125;&#125;$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">\sqrt{\frac{x+1}{x}}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$\sqrt[n]&#123;1 + x + x^2 +\cdots + x^n&#125;$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">\sqrt[n]{1 + x + x^2 + \cdots + x^2}</script><h4 id="3-2-9-求和和积分公式的表示方法"><a href="#3-2-9-求和和积分公式的表示方法" class="headerlink" title="3.2.9 求和和积分公式的表示方法"></a>3.2.9 求和和积分公式的表示方法</h4><p><strong>求和</strong></p><p>使用<code>\sum</code>来创建一个求和的公式，使用<code>^</code>来指定求和公式的上限，使用<code>_</code>来指定求和公式的下限，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$\sum_&#123;i=1&#125;^&#123;10&#125; t_i$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">\sum_{i=1}^{10} {t_i}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$sum_&#123;i=0&#125;^&#123;n&#125; x^i$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">\sum_{i=0}^{n}{x^i}</script><p>当求和公式的下限需要写多行时，可以使用<code>\substack</code>组合<code>\\</code>来将下标写成多行，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$\sum_&#123;\substack&#123; 0&lt;i&lt;m 0&lt;j&lt;n&#125;&#125; P(i,j)$$</div></pre></td></tr></table></figure><p>​        <script type="math/tex">\sum_{\substack{0<i<m \\ 0<j<n}}{P(i,j)}</script></p><p><strong>积分</strong></p><p>使用<code>\int</code>来创建一个积分公式，使用<code>^</code>来指定求和公式的上限，使用<code>_</code>来指定求和公式的下限，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$\int_&#123;-\infty&#125;^&#123;+\infty&#125; \mathrm&#123;e&#125;^&#123;-x&#125;\,\mathrm&#123;d&#125;x$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">\int_{-\infty}^{+\infty} \mathrm{e}^{-x}\mathrm{d}x</script><p>LaTex中还有很多命令和<code>\sum</code>和<code>\int表示方式相似</code>,类似的命令如下</p><div class="table-container"><table><thead><tr><th style="text-align:center">显示符号</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">\(\sum\)</td><td style="text-align:center">\sum</td></tr><tr><td style="text-align:center">\(\bigoplus\)</td><td style="text-align:center">\bigoplus</td></tr><tr><td style="text-align:center">\(\bigcup\)</td><td style="text-align:center">\bigcup</td></tr><tr><td style="text-align:center">\(\bigsqcup\)</td><td style="text-align:center">\bigsqcup</td></tr><tr><td style="text-align:center">\(\int\)</td><td style="text-align:center">\int</td></tr><tr><td style="text-align:center">\(\iiint\)</td><td style="text-align:center">\iiint</td></tr><tr><td style="text-align:center">\(\prod\)</td><td style="text-align:center">\prod</td></tr><tr><td style="text-align:center">\(\bigotimes\)</td><td style="text-align:center">\bigcap</td></tr><tr><td style="text-align:center">\(\bigvee\)</td><td style="text-align:center">\bigvee</td></tr><tr><td style="text-align:center">\(\oint\)</td><td style="text-align:center">\oint</td></tr><tr><td style="text-align:center">\(\iiiint\)</td><td style="text-align:center">\iiiint</td></tr><tr><td style="text-align:center">\(\coprod\)</td><td style="text-align:center">\coprod</td></tr><tr><td style="text-align:center">\(\bigwedge\)</td><td style="text-align:center">\bigwedge</td></tr><tr><td style="text-align:center">\(\iint\)</td><td style="text-align:center">\iint</td></tr><tr><td style="text-align:center">\(\idotsint\)</td><td style="text-align:center">\idotsin</td></tr></tbody></table></div><h4 id="3-2-10-方括号，圆括号，分隔符"><a href="#3-2-10-方括号，圆括号，分隔符" class="headerlink" title="3.2.10 方括号，圆括号，分隔符"></a>3.2.10 方括号，圆括号，分隔符</h4><div class="table-container"><table><thead><tr><th style="text-align:center">显示符号</th><th style="text-align:center">LaTex符号</th></tr></thead><tbody><tr><td style="text-align:center">\(( a )\)</td><td style="text-align:center">( a )</td></tr><tr><td style="text-align:center">\([ b ]\)</td><td style="text-align:center">[ b ]</td></tr><tr><td style="text-align:center">\(\\{c\\}\)</td><td style="text-align:center">\{c\}</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">\(\langle f \rangle\)</td><td style="text-align:center">\langle f \rangle</td></tr><tr><td style="text-align:center">\(\lfloor g \rfloor\)</td><td style="text-align:center">\lfloor g \rfloor</td></tr><tr><td style="text-align:center">\(\lceil h \rceil\)</td><td style="text-align:center">\lceil h \rceil</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">\(\ulcorner i \urcorner\)</td><td style="text-align:center">\ulcorner i \urcorner</td></tr></tbody></table></div><h4 id="3-2-11-省略号"><a href="#3-2-11-省略号" class="headerlink" title="3.2.11 省略号"></a>3.2.11 省略号</h4><div class="table-container"><table><thead><tr><th style="text-align:center">显示符号</th><th style="text-align:center">LaTex符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">\(\dots\)</td><td style="text-align:center">\dots</td><td style="text-align:left">通用的省略号表示方法，通常使用在文本中，它会根据上下文自动管理空格</td></tr><tr><td style="text-align:center">\(\ldots\)</td><td style="text-align:center">\ldots</td><td style="text-align:left">和通用的省略号相似，但不会自动管理空格</td></tr><tr><td style="text-align:center">\(\cdots\)</td><td style="text-align:center">\cdots</td><td style="text-align:left">这种省略号会根据文字的高度自动垂直居中</td></tr><tr><td style="text-align:center">\(\vdots\)</td><td style="text-align:center">\vdots</td><td style="text-align:left">垂直的省略号</td></tr><tr><td style="text-align:center">\(\ddots\)</td><td style="text-align:center">\ddots</td><td style="text-align:left">对角省略号</td></tr><tr><td style="text-align:center">\(\dotsc\)</td><td style="text-align:center">\dotsc</td><td style="text-align:left">dots with commas,$A_1,A_2,\dotsc,$</td></tr><tr><td style="text-align:center">\(\dotsb\)</td><td style="text-align:center">\dotsb</td><td style="text-align:left">dots with binary operators/relations，$A_1+\dotsb +A_N$</td></tr><tr><td style="text-align:center">\(\dotsm\)</td><td style="text-align:center">\dotsm</td><td style="text-align:left">mutiplication dots,$Ａ_1\dotsm  A_N$</td></tr><tr><td style="text-align:center">\(\dotsi\)</td><td style="text-align:center">\dotsi</td><td style="text-align:left">dots with integrals, $\int_a^b \dotsi$</td></tr></tbody></table></div><h4 id="3-2-12-空格"><a href="#3-2-12-空格" class="headerlink" title="3.2.12 空格"></a>3.2.12 空格</h4><p>LaText语法本身会忽略空格，在LaTex中有两种空格：小空格和四格空格</p><p><code>小空格</code></p><p><code>\$a \ b\$</code> 呈现为：\(a \ b\)</p><p><code>四格空格</code></p><p><code>\$a \quad b\$</code> 呈现为：\(a \quad b\)</p><h4 id="3-2-13-矩阵"><a href="#3-2-13-矩阵" class="headerlink" title="3.2.13 矩阵"></a>3.2.13 矩阵</h4><p>基本的矩阵可以使用matrix 环境来创建，矩阵和其他的类表结构一样，列之间使用<code>&amp;</code>来分开，行之间使用<code>\\</code>来封开，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$$ </div><div class="line">   \begin&#123;matrix&#125;</div><div class="line">     a &amp;  b &amp; c \\</div><div class="line">     d &amp;  e &amp; f  \\</div><div class="line">    g &amp;  h &amp; i</div><div class="line">    \end&#123;matrix&#125;</div><div class="line">$$</div></pre></td></tr></table></figure><script type="math/tex; mode=display">\begin{matrix} a & b &c  \\ d & e & f \\ g & h & i \end{matrix}</script><p>LaTex支持多种不同的矩阵声明环境，具体如下表</p><div class="table-container"><table><thead><tr><th>Environment name</th><th>Surrounding delimiter</th><th style="text-align:center">Notes</th></tr></thead><tbody><tr><td>pmatrix</td><td>\((\ )\)</td><td style="text-align:center">列默认居中</td></tr><tr><td>pmatrix*</td><td>\((\ )\)</td><td style="text-align:center">可以指定列的对齐方式</td></tr><tr><td>bmatrix</td><td>\([ \ ]\)</td><td style="text-align:center">列默认居中</td></tr><tr><td>bmatrix*</td><td>\([\ ]\)</td><td style="text-align:center">可以指定列的对齐方式</td></tr><tr><td>Bmatrix</td><td>\(\\{ \ \\}\)</td><td style="text-align:center">列默认居中</td></tr><tr><td>Bmatrix*</td><td>\(\\{ \ \\}\)</td><td style="text-align:center">可以指定列的对齐方式</td></tr><tr><td>vmatrix</td><td></td><td style="text-align:center">列默认居中</td></tr><tr><td>vmatrix*</td><td></td><td style="text-align:center">可以指定列的对齐方式</td></tr><tr><td>Vmatrix</td><td></td><td style="text-align:center">列默认居中</td></tr><tr><td>Vmatrix*</td><td></td><td style="text-align:center">可以指定列的对齐方式</td></tr></tbody></table></div><ul><li><p>pmatrix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$$ A_&#123;m,n&#125; = </div><div class="line">      \begin&#123;pmatrix&#125; </div><div class="line">     a_&#123;1,1&#125; &amp; a_&#123;1,2&#125; &amp; \cdots &amp; a_&#123;1,n&#125; \\</div><div class="line">     a_&#123;2,1&#125; &amp; a_&#123;2,2&#125; &amp; \cdots &amp; a_&#123;2,n&#125; \\</div><div class="line">     \vdots &amp; \vdots  &amp; \ddots &amp; \dots \\</div><div class="line">      a_&#123;m,1&#125; &amp; a_&#123;m,2 &#125;  &amp; \cdots &amp; a_&#123;m,n&#125;</div><div class="line">      \end&#123;pmatrix&#125;</div><div class="line">$$</div></pre></td></tr></table></figure><p>呈现为：</p></li></ul><script type="math/tex; mode=display">A_{m,n} = \begin{pmatrix} a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\ a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\ \vdots & \vdots & \ddots & \vdots \\ a_{m,1} & a_{m,2} & \cdots & a_{m,n} \end{pmatrix}</script><ul><li><p>bmatrix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$$ A_&#123;m,n&#125; = </div><div class="line">      \begin&#123;bmatrix&#125;</div><div class="line">     a_&#123;1,1&#125; &amp; a_&#123;1,2&#125; &amp; \cdots &amp; a_&#123;1,n&#125; \\</div><div class="line">     a_&#123;2,1&#125; &amp; a_&#123;2,2&#125; &amp; \cdots &amp; a_&#123;2,n&#125; \\</div><div class="line">     \vdots &amp; \vdots  &amp; \ddots &amp; \dots \\</div><div class="line">      a_&#123;m,1&#125; &amp; a_&#123;m,2 &#125;  &amp; \cdots &amp; a_&#123;m,n&#125;</div><div class="line">      \end&#123;bmatrix&#125;</div><div class="line">$$</div></pre></td></tr></table></figure><p>呈现为</p><script type="math/tex; mode=display">A_{m,n} = \begin{bmatrix} a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\ a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\ \vdots & \vdots & \ddots & \vdots \\ a_{m,1} & a_{m,2} & \cdots & a_{m,n} \end{bmatrix}</script></li><li><p>Bmatrix</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$$ A_&#123;m,n&#125; = </div><div class="line">      \begin&#123;Bmatrix&#125;</div><div class="line">     a_&#123;1,1&#125; &amp; a_&#123;1,2&#125; &amp; \cdots &amp; a_&#123;1,n&#125; \\</div><div class="line">     a_&#123;2,1&#125; &amp; a_&#123;2,2&#125; &amp; \cdots &amp; a_&#123;2,n&#125; \\</div><div class="line">     \vdots &amp; \vdots  &amp; \ddots &amp; \dots \\</div><div class="line">     a_&#123;m,1&#125; &amp; a_&#123;m,2 &#125;  &amp; \cdots &amp; a_&#123;m,n&#125;</div><div class="line">     \end&#123;Bmatrix&#125;</div><div class="line">$$</div></pre></td></tr></table></figure><p>  呈现为</p><script type="math/tex; mode=display">A_{m,n} = \begin{Bmatrix} a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\ a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\ \vdots & \vdots & \ddots & \vdots \\ a_{m,1} & a_{m,2} & \cdots & a_{m,n} \end{Bmatrix}</script><ul><li><p>vmatrix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$$ A_&#123;m,n&#125; = </div><div class="line">　　　　\begin&#123;vmatrix&#125;</div><div class="line">　　　　a_&#123;1,1&#125; &amp; a_&#123;1,2&#125; &amp; \cdots &amp; a_&#123;1,n&#125; \\</div><div class="line">　　　　a_&#123;2,1&#125; &amp; a_&#123;2,2&#125; &amp; \cdots &amp; a_&#123;2,n&#125; \\</div><div class="line">　　　　\vdots &amp; \vdots  &amp; \ddots &amp; \dots \\</div><div class="line">　　　　a_&#123;m,1&#125; &amp; a_&#123;m,2 &#125;  &amp; \cdots &amp; a_&#123;m,n&#125;</div><div class="line">　　　　\end&#123;vmatrix&#125;</div><div class="line">$$</div></pre></td></tr></table></figure><p>呈现为</p><script type="math/tex; mode=display">A_{m,n} = \begin{vmatrix} a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\ a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\ \vdots & \vdots & \ddots & \vdots \\ a_{m,1} & a_{m,2} & \cdots & a_{m,n} \end{vmatrix}</script></li><li><p>Vmatrix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$$ A_&#123;m,n&#125; = </div><div class="line">　　　\begin&#123;Vmatrix&#125;</div><div class="line">　　　a_&#123;1,1&#125; &amp; a_&#123;1,2&#125; &amp; \cdots &amp; a_&#123;1,n&#125; \\</div><div class="line">　　　a_&#123;2,1&#125; &amp; a_&#123;2,2&#125; &amp; \cdots &amp; a_&#123;2,n&#125; \\</div><div class="line">　　　\vdots &amp; \vdots  &amp; \ddots &amp; \dots \\</div><div class="line">　　　a_&#123;m,1&#125; &amp; a_&#123;m,2 &#125;  &amp; \cdots &amp; a_&#123;m,n&#125;</div><div class="line">　　　\end&#123;Vmatrix&#125;</div><div class="line"> $$</div></pre></td></tr></table></figure><p>呈现为</p><script type="math/tex; mode=display">A_{m,n} = \begin{Vmatrix} a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\ a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\ \vdots & \vdots & \ddots & \vdots \\ a_{m,1} & a_{m,2} & \cdots & a_{m,n} \end{Vmatrix}</script></li></ul><h4 id="3-2-16-方程组"><a href="#3-2-16-方程组" class="headerlink" title="3.2.16 方程组"></a>3.2.16 方程组</h4><p>方程组可以使用cases环境来创建，起始、结束处以{cases}声明，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">\begin&#123;cases&#125;</div><div class="line">a_1x_1+b_1x_2+c_1x_3 = d_1\\</div><div class="line">a_2x_1+b_2x_2+c_2x_3 = d_2\\</div><div class="line">a_3x_1+b_3x_2+c_2x_3 = d_3\\</div><div class="line">\end&#123;cases&#125;</div><div class="line">$$</div></pre></td></tr></table></figure><p>呈现为:</p><script type="math/tex; mode=display">\begin{cases} a_1x_1+b_1x_2+c_1x_3 = d_1 \\ a_2x_1+b_2x_2+c_2x_3 = d_2 \\ a_3x_1+b_3x_2+c_2x_3 = d_3 \end{cases}</script><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics#List_of_Mathematical_Symbols" target="_blank" rel="external">[1]LaTeX/Mathematics</a></p><p><a href="http://blog.csdn.net/ethmery/article/details/50670297" target="_blank" rel="external">[2]基本数学公式语法(of MathJax)</a></p><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">[3]MathJax basic tutorial and quick reference</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; async src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt;
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="LaTex" scheme="https://free-free.github.io/tags/LaTex/"/>
    
      <category term="math" scheme="https://free-free.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>从ubuntu16.04/ubuntu17.04升级到ubuntu17.10(译)</title>
    <link href="https://free-free.github.io/2017/10/23/upgrade-ubuntu17-10-from-ubuntu16-04-or-ubuntu17-04/"/>
    <id>https://free-free.github.io/2017/10/23/upgrade-ubuntu17-10-from-ubuntu16-04-or-ubuntu17-04/</id>
    <published>2017-10-23T14:15:31.000Z</published>
    <updated>2018-03-15T13:04:47.020Z</updated>
    
    <content type="html"><![CDATA[<p>最近ubuntu官方发布了又一个LTS：ubuntu17.10。ubuntu17.10有着很大的变化，引入了很多的新的技术。ubuntu17.10是ubuntu第一个使用GNOME Shell作为默认桌面的版本。自己也想着感受一下ubuntu17.10引入的新技术，在这里翻译一篇从ubuntu16.04/ubuntu17.04升级到ubuntu17.10的教程。<a href="https://www.linuxbabe.com/ubuntu/upgrade-from-ubuntu-16-0417-04-to-ubuntu-17-10" target="_blank" rel="external">原本在这里</a></p><h2 id="从ubuntu16-4-17-04升级到ubuntu17-10的两种方式"><a href="#从ubuntu16-4-17-04升级到ubuntu17-10的两种方式" class="headerlink" title="从ubuntu16.4/17.04升级到ubuntu17.10的两种方式"></a>从ubuntu16.4/17.04升级到ubuntu17.10的两种方式</h2><p>官方发布最近发布Ubuntu17.10。此教程打算向你展示两种从Ubuntu16.04/17.04升级到Ubuntu17.10的方法：使用图像界面升级助手升级和使用命令行升级。</p><h3 id="1-使用图形界面升级助手升级到Ubuntu17-10"><a href="#1-使用图形界面升级助手升级到Ubuntu17-10" class="headerlink" title="1. 使用图形界面升级助手升级到Ubuntu17.10"></a>1. 使用图形界面升级助手升级到Ubuntu17.10</h3><p>首先，打开图形终端并且运行下面的命令更新现有的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt update &amp;&amp; sudo apt dist-upgrade</div></pre></td></tr></table></figure><p>请注意，在运行上面的命令的时候如果你已经安装了最新的内核，为了继续升级过程你需要重启系统，然后从Unity Dahs或者你自己的应用菜单打开<strong>Software &amp; Updates</strong></p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-16.04-to-ubuntu-17.10-01.png" alt=""></p><p>选择<strong>Updates</strong>选项卡并且在窗口的底部改变通知更新设置，将<strong>For long-term support version</strong>改变成<strong>For any new version</strong>.</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-02.png" alt=""></p><p>然后点击关闭按钮。你会被要求输入密码以应用上面的改变，然后在终端中输入一下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ update-manager</div></pre></td></tr></table></figure><p>如果你正在使用的是Ubuntu17.04，你会发现软件已经是最新的，并且可以升级到<strong>Ubuntu 17.10</strong>了，点击<strong>Upgrade</strong>按钮。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/how-to-upgrade-from-Ubuntu-17.04-to-ubuntu-17.10-03.png" alt=""></p><p>如果你正在使用Ubuntu16.04，你会发现软件已经是最新的了，并且可以升级到<strong>Ubuntu 17.04</strong>了，点击<strong>Upgrade</strong>按钮。因为Ubuntu17.04还没有过期，Canonical始终会支持会Ubuntu17.04，所以在升级到Ubuntu17.10之前你需要先升级到Ubuntu17.04。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-04.png" alt=""></p><p>然后输入你的密码。输入密码后版本发布窗口将出现，请点击<strong>Upgrade</strong>按钮。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-05.png" alt=""></p><p>等待升级完成。如果你发现一些第三方的软件源是disabled的，只需要accept it，在升级后完成之后你可以re-enable这些软件源。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-06.png" alt=""></p><p>一旦升级完成之后，重启你的电脑。在登录界面，你可以点击cog图标选择使用Gnome,Gnome with X.org 或者Unity 桌面环境。</p><p><img src="http://oy4cno18k.bkt.clouddn.com/upgrade-from-ubuntu-17.04-to-ubuntu-17.10-07.png" alt=""></p><p>重启之后，在终端中运行下面的命令检查你当前的Ubuntu版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lsb_release -a</div></pre></td></tr></table></figure><p>如果你成功升级到Ubuntu17.10，终端将输出下面结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">No LSB modules are available</div><div class="line">Distributor ID: Ubuntu</div><div class="line">Description:    Ubuntu 17.10</div><div class="line">Release:        17.10</div><div class="line">Codename:       artful</div></pre></td></tr></table></figure><h3 id="2-使用命令行升级到Ubuntu17-10"><a href="#2-使用命令行升级到Ubuntu17-10" class="headerlink" title="2.使用命令行升级到Ubuntu17.10"></a>2.使用命令行升级到Ubuntu17.10</h3><p>你可以使用命令行升级Ubuntu桌面版本和服务器版本。首先，打开终端窗口并且运行下面的命令去升级现有的软件包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt update &amp;&amp; sudo apt dist-upgrade</div></pre></td></tr></table></figure><p>然后，确保你已经安装了<code>update-manager-core</code>，如果没有安装，输入下面命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt install update-manager-core</div></pre></td></tr></table></figure><p>接下来，使用nano或者你自己喜爱的文本编辑器修改配置文件<code>/etc/update-manager/release-upgrades</code>，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo nano　/etc/update-manager/release-upgrades</div></pre></td></tr></table></figure><p>在配置文件的底部，将<strong>Prompt</strong>的值从<code>lts</code>改成<code>normal</code>，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Prompt=normal</div></pre></td></tr></table></figure><p>保存并关闭文件。之后运行下面的命令开始升级。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">do</span>-release-upgrade</div></pre></td></tr></table></figure><p>如果你正在使用Ubuntu17.04的话，接下来的界面将引导你升级到Ubuntu17.10。如果你正在使用Ubuntu16.04，接下来的界面将引导你先升级到Ubuntu17.04，升级到Ubuntu17.04后再重复上面相同的步骤升级到Ubuntu17.10。一旦升级完成，重启你的电脑。输入下面的命令去check你的Ubuntu版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lsb-release -a</div></pre></td></tr></table></figure><p>如果你成功升级到Ubuntu17.10，将输出下面的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">No LSB modules are available.</div><div class="line">Distributor ID: Ubuntu</div><div class="line">Description:    Ubuntu 17.10</div><div class="line">Release:        17.10</div><div class="line">Codename:       artful</div></pre></td></tr></table></figure><p>升级完成之后，你需要去re-enable第三方的软件源，比如PPA，因为在升级过程中这些软件源被disable了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近ubuntu官方发布了又一个LTS：ubuntu17.10。ubuntu17.10有着很大的变化，引入了很多的新的技术。ubuntu17.10是ubuntu第一个使用GNOME Shell作为默认桌面的版本。自己也想着感受一下ubuntu17.10引入的新技术，在这里翻
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下绑定串口设备名</title>
    <link href="https://free-free.github.io/2017/10/20/binding-serialport-device-name/"/>
    <id>https://free-free.github.io/2017/10/20/binding-serialport-device-name/</id>
    <published>2017-10-20T10:44:39.000Z</published>
    <updated>2017-11-04T12:25:56.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-为什么我需要绑定串口设备名"><a href="#1-为什么我需要绑定串口设备名" class="headerlink" title="1. 为什么我需要绑定串口设备名"></a>1. 为什么我需要绑定串口设备名</h3><p>　　最近在ubuntu上使用串口进行通信时，由于硬件的原因需要不时的拔掉串口然后再重新插上，可是每次拔掉之后再重新插上去发现串口设备名由原来的<code>/dev/ttyUSB0</code>变为<code>/dev/ttyUSB1</code>，导致每次重新插上串口时都需要在程序中改变串口设备名，来回这么折腾搞得我很毛躁呀。这就是为什么我要去绑定串口设备名的原因，目的很单纯，被造的。</p><h3 id="2-怎样去绑定串口设备名"><a href="#2-怎样去绑定串口设备名" class="headerlink" title="2.  怎样去绑定串口设备名"></a>2.  怎样去绑定串口设备名</h3><h4 id="1-分析"><a href="#1-分析" class="headerlink" title="(1) 分析"></a>(1) 分析</h4><p>为什么每次重新插上同一串口设备的时候，在<code>/dev/</code>目录会是不同的设备文件名(<code>/dev/ttyUSB0</code>或者<code>/dev/ttyUSB1</code>)？由于串口设备属于hot-pluggable设备，每次插入的时注册设备节点分配的设备ID不同，导致同一设备在呈现出不同的设备名。那有没有办法将同一设备绑定为固定的设备文件名呢？答案是有的，这时就需要需求的<code>udev</code>的帮助了，<code>udev</code>是Linux下专门负责管理动态设备，它时基于一定的规则来加载动态设备的，那我们需要做的就是添加相应的规定即可。</p><h4 id="2-绑定串口设备名"><a href="#2-绑定串口设备名" class="headerlink" title="(2) 绑定串口设备名"></a>(2) 绑定串口设备名</h4><ul><li><p>查看当前的串口设备文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls /dev/ |grep ttyUSB</div></pre></td></tr></table></figure><p>输出:</p><p><img src="http://oy4cno18k.bkt.clouddn.com/binding-serialport-device-name-1.png" alt=""></p></li><li><p>查看串口信息，找出串口设备的<code>idVendor</code>和<code>idProduct</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ udevadm info --name /dev/ttyUSB0  --attribute-walk</div></pre></td></tr></table></figure><p>输出:</p><p><img src="http://oy4cno18k.bkt.clouddn.com/binding-serialport-device-name-2.png" alt=""></p></li><li><p>创建文件<code>/etc/udev/rules.d/usb-serialport.rules</code>，并在文件中添加一下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SUBSYSTEM==&quot;tty&quot;, ATTRS&#123;idVendor&#125;==&quot;1a86&quot;, ATTRS&#123;idProduct&#125;==&quot;7523&quot;, SYMLINK+=&quot;ch34-serial&quot;, MODE:=&quot;0777&quot;, GROUP:=&quot;dialout&quot;</div></pre></td></tr></table></figure><p><strong>SYMLINK</strong>即为你为该串口设备指定文件设备名，该设备每次插入时在<code>/dev</code>设备名都为<code>usb-serialport</code>.</p><p><strong>idVendor</strong>和<strong>idProduct</strong>改为你串口对应的vendorid和productid. <strong>MODE</strong>该设备的权限.<strong>GROUP</strong>为该设备所属的组。</p></li><li><p>将配置生效，并查看是否绑定成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo udevadm trigger</div><div class="line">$ ls -l /dev/ch34-serial</div></pre></td></tr></table></figure><p>输出：</p><p><img src="http://oy4cno18k.bkt.clouddn.com/binding-serialport-device-name3.png" alt=""></p><p>可以从输出看到<code>ch34-serial</code>只是真实设备名的一个连接，每次重新插入串口设备的时候，会自动创建<code>ch34-serial</code>链接到真正的设备文件名(可能是<code>/dev/ttyUSB0</code>或者<code>/dev/ttyUSB1</code>)。</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/boyixuanbo/article/details/77651109" target="_blank" rel="external">[1]ubuntu下绑定串口</a></p><p><a href="http://www.cnblogs.com/zxouxuewei/p/6140710.html" target="_blank" rel="external">[2]ubuntu绑定串口设备</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-为什么我需要绑定串口设备名&quot;&gt;&lt;a href=&quot;#1-为什么我需要绑定串口设备名&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么我需要绑定串口设备名&quot;&gt;&lt;/a&gt;1. 为什么我需要绑定串口设备名&lt;/h3&gt;&lt;p&gt;　　最近在ubuntu上使用串口
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python黑魔法－元类</title>
    <link href="https://free-free.github.io/2017/10/15/python-black-magic-metaclass/"/>
    <id>https://free-free.github.io/2017/10/15/python-black-magic-metaclass/</id>
    <published>2017-10-15T10:46:31.000Z</published>
    <updated>2017-10-23T08:32:19.220Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>　　python作为一门动态解释型语言，相比于静态编译语言有着相当丰富的语言特性，这些特性是你在静态语言中所无法想象的。以美学的观点来看，这些特性会让你的程序实现的非常优美和简洁，这也正好符合python所遵从的哲学思想。这些特性就像魔法一样，让你为它们感到深深的着迷。而这些魔法特性里还有一部分会让你感觉到比魔法还神奇，这就是传说中的黑魔法，比如，<strong>descriptor</strong> 、<strong>decorator</strong>、<strong>metaclass</strong>等。拥有了这些黑魔法就等于你拥有了Thor的hammer，无敌到爆表。好了，nb吹的差不多了^o^，让我们严肃起来，端庄的迎接我们今天的主角(<em>友情提示：该主角光芒有点强烈，请大家准备好墨镜，保护好自己的眼睛</em>)，ladies and gentlemen welcome our loading actor －<strong>metaclass</strong>。</p><h3 id="2-python-元类"><a href="#2-python-元类" class="headerlink" title="2. python 元类"></a>2. python 元类</h3><p>在python世界中一切皆对象，当谈到一个对象时必然地会涉及到这个对象的类。例如，字符串对象<code>&quot;dede&quot;</code>的类是<code>str</code>，列表对象<code>[1, 2, 4]</code>的类是<code>list</code>，字典对象<code>{&quot;key&quot;:&quot;value&quot;}</code>的类是<code>dict</code>，这些概念对于懂得面向对象的programmer来说都是常识。但是处在一切皆对象的python世界中，你有没有在某一时刻思考过，python中的类是否也是对象？我相信对于大多数pythoner来说，都会给出一个正确的回答。是的，在python的世界里类也是对象。那既然类也是对象，那就必然又会继续思考类的类是什么？其实在你思考类的类是什么时候，可能已经想到这个类的类应该会和普通的类一样，有一系列的method，比如<code>__init__</code>、<code>__call__</code>、<code>__new__</code>等，只是你不知道这个类的类应该叫什么名字。就在你纠结该给类的类取一个什么样的名字的时候，python世界的仲裁者出现了，他们告诉你这个类的类叫做元类。好了，从此天下太平，大家都知道了类的类就做元类。对，元类就是类的类，这个元类并没有什么特殊之处。你现在只需要改变一下你观察类时所在的位置。以前你是站在普通实例对象的位置去观察它的类，现在需要往前走一步站在类的位置去观察它的类－－元类。</p><p>　　现在我们对元类已经有了intuitive的认识，为了彻底搞清楚元类是什么，我们需要到python世界里去实地考察一下。我们先从常见的类下手，去看看这些类的类是什么。就像我们平常查看一个普通实例对象的类一样，需要使用<code>type</code>函数，我们在查看类的类时候，也需要使用<code>type</code>函数，那就让我们开始吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(str)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">type</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(dict)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(list)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(tuple)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(object)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></div></pre></td></tr></table></figure><p>当看到上面的输出的时候，有人可能就会产生疑问了。<code>type</code>不是一个函数吗？怎样现在又成一个类了？你以为是你长时间看电脑眼睛花了，你使劲的揉了眼睛之后，再仔细看它还是那样。没毛病，<code>type</code>就是这么的特殊，它是python世界中的万类之<code>元</code>，它是所有类的元类，包括它自己的元类也是它本身(八卦一下，你长这么大见过一个人的父亲就是他自己本身吗？没见过的话，说明你是正常的)，不信的话请看下面的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(type)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">type</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(type<span class="params">(type)</span>)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></div></pre></td></tr></table></figure><p>反正不管怎么说，你的三观肯定是被刷新了的，请直视自己的内心。好吧，既然<code>type</code>这么特殊，那它有什么怪癖呢？怪癖肯定是有的，让我们慢慢来分析一下。</p><ul><li><p>当<code>type</code>作为函数使用时，它的行为会根据传入参数个数的不同而不同。当传入一个参数时，<code>type</code>会返回传入参数的类型，如下面所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">"hello,python world!"</span>)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">([<span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>])</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">list</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(<span class="params">(<span class="number">4096</span>, )</span>)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(&#123;<span class="string">"name"</span>: <span class="string">"python"</span>, <span class="string">"birthday"</span>: <span class="string">"1999"</span>&#125;)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">dict</span>'&gt;</span></div><div class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(str)</span></span></div><div class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></div></pre></td></tr></table></figure><p>当传入三个参数时，<code>type</code>会返回一个类，参数列表如下所示：</p><ul><li><p><strong>name</strong>  : 返回类的名字，必须是字符串</p></li><li><p><strong>bases</strong>  : 返回类的父类，必须是tuple，可以同时继承自多个父类</p></li><li><p><strong>attrs</strong>  : 返回类的属性，必须是dict，在类初始化的时候会添加到类的<code>__dict__</code>中。</p><p>整个调用原型是这样的<code>type(name, bases, attrs)</code>，具体示例请看下面。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">"ClassOne"</span>, (), &#123;&#125;) <span class="comment">#</span></div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">ClassOne</span>'&gt;</span></div><div class="line">&gt;&gt;&gt; ClassTwo = type("ClassTwo", (), &#123;"name": "python", "age": 18&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ClassTwo.name</div><div class="line"><span class="string">'python'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ClassTwo.age</div><div class="line"><span class="number">18</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(ClassTwo) <span class="comment">#并且ClassTwo的类也是'type'</span></div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">type</span>'&gt;</span></div></pre></td></tr></table></figure><p>看了上面示例之后，肯定有人心里就会有想法了。我们可以使用<code>type</code>来动态的创建类，这确实是一个很好的想法。于是有人真的将这个想法付诸于实践了，请看下面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gender</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._gender</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_gender</span><span class="params">(self, val)</span>:</span></div><div class="line">    self._gender = val</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._name</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self, val)</span>:</span></div><div class="line">    self._name = val</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self, name, gender)</span>:</span></div><div class="line">    self._name = name</div><div class="line">    self._gender = gender</div><div class="line">    </div><div class="line">Student = type(<span class="string">"Student"</span>, (object ), &#123;<span class="string">"get_gender"</span>: get_gender, <span class="string">"set_gender"</span>: \</div><div class="line">                                    set_gender, <span class="string">"get_name"</span>: get_name, <span class="string">"set_name"</span>:\</div><div class="line">                                    set_name, <span class="string">"__init__"</span>: init&#125;)</div><div class="line">Teacher = type(<span class="string">"Teacher"</span>,(object, ), &#123;<span class="string">"get_gender"</span>: get_gender, <span class="string">"set_gender"</span>: \</div><div class="line">                                     set_gender, <span class="string">"get_name"</span>: get_name, <span class="string">"set_name"</span>: \</div><div class="line">                                     set_name, <span class="string">"__init__"</span>: init&#125;)</div><div class="line">stu1 = Student(<span class="string">"John"</span>, <span class="string">"male"</span>)</div><div class="line">teacher1 = Teacher(<span class="string">"John_Father"</span>, <span class="string">"male"</span>)</div></pre></td></tr></table></figure><p>看了上面的代码，有没有人觉得瘆得慌，反正我是有点。</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.programiz.com/python-programming/methods/built-in/type" target="_blank" rel="external">[1] : Python type()</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h3&gt;&lt;p&gt;　　python作为一门动态解释型语言，相比于静态编译语言有着相当丰富的语言特性，这些特性是你在静态语言中所无法想象的。
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用元类实现Python 单例模式</title>
    <link href="https://free-free.github.io/2017/10/14/implementation-of-singleton-using-metaclass/"/>
    <id>https://free-free.github.io/2017/10/14/implementation-of-singleton-using-metaclass/</id>
    <published>2017-10-14T11:47:18.000Z</published>
    <updated>2017-11-05T11:32:01.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>　　上一篇博客介绍了<a href="/2017/10/11/implementation-of-singleton-using-decrator/">使用装饰器实现python单例模式</a>，这篇博客将介绍使用python的黑魔法－元类(Metaclass)来实现python的单例模式。对于知道元类的pythoner，使用元类实现单例模式应该是很简单的。然而对于不知道python元类的同行来说，理解起来可能要吃力一点，关于元类的介绍请看<a href="/2017/10/15/python-black-magic-metaclass/">这篇文档</a>。在Python中，创建一个对象的流程如下图：</p><p><img src="http://oy4cno18k.bkt.clouddn.com/implementation-of-singleton-using-new-method-01.png" alt=""></p><p>在创建对象时，由元类的<code>__call__</code>method负责调用类的<code>__new__</code>method，<code>__new__</code>method返回对象之后，z再调用<code>__call__</code>method来初始化对象，初始化完成之后，最后由元类的<code>__call__</code>方法返回对象。从上述流程可知，我们只需要在元类的<code>__call__</code>method返回同一对象，即可实现单例模式。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h3><h5 id="2-1-Environment"><a href="#2-1-Environment" class="headerlink" title="2.1 Environment"></a>2.1 Environment</h5><ul><li>ubuntu 16.04</li><li>python3.5</li></ul><h5 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonMeta</span><span class="params">(type)</span>:</span></div><div class="line">  </div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="string">'_instance'</span> <span class="keyword">not</span> <span class="keyword">in</span> cls.__dict__:</div><div class="line">      cls._instance = super().__call__(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> cls._instance</div><div class="line">  </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object, metaclass=SingletonMeta)</span>:</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">pass</span> </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  obj1 = Singleton()</div><div class="line">  obj2 = Singleton()</div><div class="line">  print(id(obj1))</div><div class="line">  print(id(obj2))</div><div class="line">  print(obj1 == obj2)</div></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">140206360941400</span></div><div class="line"><span class="number">140206360941400</span></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">[1]Python单例模式的4种实现方法</a></p><p><a href="https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/" target="_blank" rel="external">[2]Understanding Python metaclasses</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h3&gt;&lt;p&gt;　　上一篇博客介绍了&lt;a href=&quot;/2017/10/11/implementation-of-singleton-usi
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python单例模式:装饰器版</title>
    <link href="https://free-free.github.io/2017/10/11/implementation-of-singleton-using-decrator/"/>
    <id>https://free-free.github.io/2017/10/11/implementation-of-singleton-using-decrator/</id>
    <published>2017-10-11T10:36:47.000Z</published>
    <updated>2017-11-04T12:26:16.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用装饰器实现python单例模式"><a href="#使用装饰器实现python单例模式" class="headerlink" title="使用装饰器实现python单例模式"></a>使用装饰器实现python单例模式</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>不同的编程语言所支持的语言特性不一样，导致实现单例模式的方式也各不相同。python作为一门动态语言，有很大的灵活性，实现的单例模式的方式也不尽相同，在这里总结一下python实现单例模式的方法，以便之后学习。本系列主要简述4种方式实现单例模式:</p><ul><li><strong>装饰器实现单例模式<a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external"><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">1</a></a></strong></li></ul><ul><li><strong>元类实现单例模式</strong></li><li><strong>__new__方法实现单例模式</strong></li><li><strong>共享__dict__实现单例模式</strong></li></ul><p>本节主要简述使用装饰器实现单例模式。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h3><p><strong>plateform</strong>:</p><ul><li>python3.5</li><li>ubuntu16.04</li></ul><p><strong>code</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></div><div class="line">    instances = &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</div><div class="line">            instances[cls] = cls(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> instances[cls]</div><div class="line">    <span class="keyword">return</span> singleton_wrapper</div><div class="line"></div><div class="line">  </div><div class="line"><span class="meta">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point2D</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span></div><div class="line">        self._x = x</div><div class="line">        self._y = y</div><div class="line">       </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._x</div><div class="line">      </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._y</div><div class="line">      </div><div class="line"><span class="meta">    @x.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, val)</span>:</span></div><div class="line">        self._x = val</div><div class="line">        </div><div class="line"><span class="meta">    @y.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(self, val)</span>:</span></div><div class="line">        self._y = val</div><div class="line">        </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    p1 = Point2D(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">    p2 = Point2D(<span class="number">2</span>, <span class="number">10</span>)</div><div class="line">    print(id(p1))</div><div class="line">    print(id(p2))</div></pre></td></tr></table></figure><p><strong>output</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">139685819815696</div><div class="line">139685819815696</div></pre></td></tr></table></figure><p>由输出可知p1和p2为同一示例，即上述code完美实现了单例模式。</p><h3 id="3-code-辩证分析"><a href="#3-code-辩证分析" class="headerlink" title="3.code 辩证分析"></a>3.code 辩证分析</h3><p>在单例的装饰器函数中，使用词典变量<strong>instances</strong>来储存类的实例，并且<strong>singleton_wrapper</strong>与<strong>instances</strong>形成了闭包环境。当使用<code>类名(*args, **kwargs)</code>实例化时，实际上调用了<code>singleton_wrapper(*args, **kwargs)</code>来进行实例化。通过在<strong>singleton_wrapper</strong>判断<strong>instances</strong>中是否存在类的实例，如果不存在则创建实例，如果存在则直接中从<strong>instances</strong>返回实例。每调用一次<strong>singleton</strong>返回一个闭包，各个闭包之间并没有共享<strong>instances</strong>变量，所以<strong>instances</strong>变量中最多只储存了一个实例，为了验证此将code修改成如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></div><div class="line">    instances = &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</div><div class="line">            instances[cls] = cls(*args, **kwargs)</div><div class="line">        print(instances)</div><div class="line">        <span class="keyword">return</span> instances[cls]</div><div class="line">    <span class="keyword">return</span> singleton_wrapper</div><div class="line">  </div><div class="line"><span class="meta">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassOne</span><span class="params">(object)</span>:</span></div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">pass</span></div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="meta">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassTwo</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">  </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    obj1 = ClassOne()</div><div class="line">    obj2 = ClassTwo()</div></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;&lt;class <span class="string">'__main__.ClassOne'</span>&gt;: &lt;__main__.ClassOne object at 0x7f276523a828&gt;&#125;</div><div class="line">&#123;&lt;class <span class="string">'__main__.ClassTwo'</span>&gt;: &lt;__main__.ClassTwo object at 0x7f276523a940&gt;&#125;</div></pre></td></tr></table></figure><p>从以上输出可以看出，各个类闭包之间没有共享<strong>instances</strong>字典变量，这时小黄鸭问那为什么还需要一个字典变量来保存类的实例，何不直接使用一个普通的变量来保存类的实例呢?说的太多不如直接上code验证一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></div><div class="line">    instance = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</div><div class="line">            instance = cls(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> instance</div><div class="line">    <span class="keyword">return</span> singleton_wrapper</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="meta">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassOne</span><span class="params">(object)</span>:</span></div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    obj1 = ClassOne()</div></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"test.py"</span>, line 21, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    obj1 = ClassOne()</div><div class="line">  File <span class="string">"test.py"</span>, line 6, <span class="keyword">in</span> singleton_wrapper</div><div class="line">    <span class="keyword">if</span> not instance:</div><div class="line">UnboundLocalError: <span class="built_in">local</span> variable <span class="string">'instance'</span> referenced before assignment</div></pre></td></tr></table></figure><p>输出结果如上，在<strong>singleton_wrapper</strong>中访问<strong>instance</strong>变量时，遇到<em>UnboundLocalError</em>错误。在这里之所以抛出<em>UnboundLocalError</em>，和python的词法作用域有关。<strong>python内部函数只能访问全局变量不可对全局变量进行赋值修改；当在内部函数中修改同名的全局变量时，则python会认为它是一个局部变量；在内部函数中修改同名全局变量之前读取变量名时，会引发UnboundLocalError错误<a href="http://blog.csdn.net/my2010sam/article/details/17735159" target="_blank" rel="external"><a href="http://blog.csdn.net/my2010sam/article/details/17735159" target="_blank" rel="external">2</a></a>。</strong>说到这里结果好像已经很明显了，既然不能在内部函数中赋值修改一个全局变量，那我们只需要在修改的变量之前，加一个<strong>global</strong>关键字就能解决了。好吧，还是需要用code来验证一下</p><p><strong>note！！！：这里的赋值修改不包括list 或者dict的添加，删除等操作；这也证明我们一开始使用dict来存类实例，巧妙避过UnboundLocalError的问题，god, are you kidding me?</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></div><div class="line">    instance = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">global</span> instance</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</div><div class="line">            instance = cls(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> instance</div><div class="line">    <span class="keyword">return</span> singleton_wrapper</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="meta">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassOne</span><span class="params">(object)</span>:</span></div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    obj1 = ClassOne()</div></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"test.py"</span>, line 30, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    obj1 = ClassOne()</div><div class="line">  File <span class="string">"test.py"</span>, line 7, <span class="keyword">in</span> singleton_wrapper</div><div class="line">    <span class="keyword">if</span> not instance:</div><div class="line">NameError: name <span class="string">'instance'</span> is not defined</div></pre></td></tr></table></figure><p>what?又出错了，这次遇到了<em>NameError</em>，简直像是唐僧取经一难又一难。好吧，请不要放弃，让我们继续分析为什么会出现<em>NameError</em>。我们在<strong>singleton_wrapper</strong>中添加<strong>global</strong>关键字时就意味着直接去全局作用域搜索<strong>instance</strong>变量，但在全局作用域中并没有<strong>instance</strong>的存在，所以在这里出现<em>NameError</em>是再正常不过的。这时让我们重新回到上一步，看一下python的词法作用域的规则:</p><blockquote><p>python内部函数只能访问全局变量不可对全局变量进行赋值修改；</p><p>当在内部函数中修改同名的全局变量时，则python会认为它是一个局部变量；</p><p>在内部函数中修改同名全局变量之前读取变量名时，会引发UnboundLocalError错误。</p></blockquote><p>仔细研读和思考后，我们发现，<strong>instance</strong>对于<strong>singleton_wrapper</strong>并不是全局变量，而是extenal 变量。好吧我们以偏概全了，太大意了。事已到此好像已经没有思路，这个时候该是Google大神显神通的时候，在Google大神的帮助下，我们终于找到了一点思路,让我们穿到墙外去看一看这两篇文章吧<a href="https://eli.thegreenplace.net/2011/05/15/understanding-unboundlocalerror-in-python" target="_blank" rel="external"><a href="https://eli.thegreenplace.net/2011/05/15/understanding-unboundlocalerror-in-python" target="_blank" rel="external">3</a></a><a href="https://stackoverflow.com/questions/141642/what-limitations-have-closures-in-python-compared-to-language-x-closures" target="_blank" rel="external"><a href="https://stackoverflow.com/questions/141642/what-limitations-have-closures-in-python-compared-to-language-x-closures" target="_blank" rel="external">4</a></a>。这两篇文章指出：</p><blockquote><p>在closures中不能对external进行赋值修改;</p><p>当在closures中修改同名external变量之前读取变量名，会引发UnboundLocalError错误。</p></blockquote><p>现在可谓大彻大悟了，终于搞清楚了出现<em>UnboundLocalError</em>的真正原因了。那么问题来了，有没有办法可以赶跑这个该死的<em>UnboundLocalError</em>呢?办法肯定是有的，我们娓娓道来</p><p><strong>python2.x</strong>:</p><p>使用<strong>dict</strong>或者<strong>list</strong>是最明智的选择，也是唯一的办法。</p><p><strong>python3.x:</strong></p><ol><li><p>使用<strong>dict</strong>或者<strong>list</strong>储存类实例</p></li><li><p>在closures中访问修改external 变量之前，使用<strong>nonlocal</strong>对external变量进行声明，<strong>nonlocal</strong>关键字是python3.0之后加入的新关键字,说明如下:</p><blockquote><p>The <code>nonlocal</code> statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals. This is important because the default behavior for binding is to search the local namespace first. The statement allows encapsulated code to rebind variables outside of the local scope besides the global (module) scope.</p></blockquote></li></ol><p>经过我们不断思考与实践，结局还不赖。让我们把完整的code写下来吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton1</span><span class="params">(cls)</span>:</span></div><div class="line">    instances = &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</div><div class="line">            instances[cls] = cls(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> instances[cls]</div><div class="line">    <span class="keyword">return</span> singleton_wrapper</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton2</span><span class="params">(cls)</span>:</span></div><div class="line">    instance = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleton_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">nonlocal</span> instance</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</div><div class="line">            instance = cls(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> instance</div><div class="line">    <span class="keyword">return</span> singleton_wrapper</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="meta">@singleton1</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point2D</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span></div><div class="line">        self._x = x</div><div class="line">        self._y = y</div><div class="line">       </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._x</div><div class="line">      </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._y</div><div class="line">      </div><div class="line"><span class="meta">    @x.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, val)</span>:</span></div><div class="line">        self._x = val</div><div class="line">        </div><div class="line"><span class="meta">    @y.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(self, val)</span>:</span></div><div class="line">        self._y = val</div><div class="line"></div><div class="line">        </div><div class="line"><span class="meta">@singleton2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point3D</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>, z=<span class="number">0</span>)</span>:</span></div><div class="line">        self._x = x</div><div class="line">        self._y = y</div><div class="line">        self._z = z</div><div class="line">    </div><div class="line">  </div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    p1 = Point2D(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">    p2 = Point2D(<span class="number">2</span>, <span class="number">10</span>)</div><div class="line">    print(id(p1))</div><div class="line">    print(id(p2))</div><div class="line">    p3 = Point3D(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</div><div class="line">    p4 = Point3D(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">    print(id(p3))</div><div class="line">    print(id(p4))</div></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">140322002741008</span></div><div class="line"><span class="number">140322002741008</span></div><div class="line"><span class="number">140322002741176</span></div><div class="line"><span class="number">140322002741176</span></div></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://ghostfromheaven.iteye.com/blog/1562618" target="_blank" rel="external">[1]  Python单例模式的4种实现方法</a></p><p><a href="http://blog.csdn.net/my2010sam/article/details/17735159" target="_blank" rel="external">[2]  全局变量报错-UnboundLocalError: local variable ‘l’ referenced before assignment</a></p><p><a href="https://eli.thegreenplace.net/2011/05/15/understanding-unboundlocalerror-in-python" target="_blank" rel="external">[3]  Understanding UnboundLocalError in Python</a></p><p><a href="https://stackoverflow.com/questions/141642/what-limitations-have-closures-in-python-compared-to-language-x-closures" target="_blank" rel="external">[4]  What limitations have closures in Python compared to language X closures</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用装饰器实现python单例模式&quot;&gt;&lt;a href=&quot;#使用装饰器实现python单例模式&quot; class=&quot;headerlink&quot; title=&quot;使用装饰器实现python单例模式&quot;&gt;&lt;/a&gt;使用装饰器实现python单例模式&lt;/h2&gt;&lt;h3 id=&quot;1-概述&quot;
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>lua5.2获取函数可变参数</title>
    <link href="https://free-free.github.io/2017/10/11/access-variable-parameter-in-lua5-2/"/>
    <id>https://free-free.github.io/2017/10/11/access-variable-parameter-in-lua5-2/</id>
    <published>2017-10-11T10:22:41.000Z</published>
    <updated>2017-11-04T12:26:03.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lua-gt-5-2-可变参数获取"><a href="#Lua-gt-5-2-可变参数获取" class="headerlink" title="Lua(&gt;=5.2) 可变参数获取"></a>Lua(&gt;=5.2) 可变参数获取</h1><p>在Lua5.2之前，函数的可变参数在函数调用的时候自动获取并放在<strong>arg</strong>变量(table)中，要访问每一可变参数只需要通过<strong>arg[0]</strong>, <strong>arg[1]</strong>,…..<strong>arg[m]</strong>来获取，并且arg中还有一个域<strong>n</strong>负责记录可变参数的个数，示例代码如下所示：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myadd</span><span class="params">(a, b, ...)</span></span></div><div class="line">  <span class="keyword">local</span> sum = a + b</div><div class="line">  <span class="keyword">for</span> i = <span class="number">1</span>,<span class="built_in">arg</span>.n <span class="keyword">do</span></div><div class="line">    sum = sum + <span class="built_in">arg</span>[n]</div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="keyword">return</span> sum</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>在Lua5.2之后，需要自己手动获取可变参数，也没有了记录可变参数个数的域<strong>n</strong>，但可以通过长度运算符<strong>#</strong>获取参数个数，我想这也是为什么会去掉域<strong>n</strong>的原因，示例代码如下所示：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myadd</span><span class="params">(a, b, ...)</span></span></div><div class="line">  <span class="keyword">local</span> <span class="built_in">arg</span> = &#123;...&#125;</div><div class="line">  <span class="keyword">local</span> sum = a + b</div><div class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, #<span class="built_in">arg</span> <span class="keyword">do</span></div><div class="line">    sum = sum + <span class="built_in">arg</span>[i]</div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="keyword">return</span> sum</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lua-gt-5-2-可变参数获取&quot;&gt;&lt;a href=&quot;#Lua-gt-5-2-可变参数获取&quot; class=&quot;headerlink&quot; title=&quot;Lua(&amp;gt;=5.2) 可变参数获取&quot;&gt;&lt;/a&gt;Lua(&amp;gt;=5.2) 可变参数获取&lt;/h1&gt;&lt;p&gt;在Lua
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="lua" scheme="https://free-free.github.io/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>Say_hello</title>
    <link href="https://free-free.github.io/2017/09/15/say-hello/"/>
    <id>https://free-free.github.io/2017/09/15/say-hello/</id>
    <published>2017-09-15T10:41:29.000Z</published>
    <updated>2018-03-15T13:04:59.240Z</updated>
    
    <content type="html"><![CDATA[<p>say hello to me</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;say hello to me&lt;/p&gt;

      
    
    </summary>
    
      <category term="mylife" scheme="https://free-free.github.io/categories/mylife/"/>
    
    
      <category term="notes" scheme="https://free-free.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Wechat Official Account&#39;s Token Generation and Verification Using Python</title>
    <link href="https://free-free.github.io/2016/08/09/token-generation-and-verification-using-python/"/>
    <id>https://free-free.github.io/2016/08/09/token-generation-and-verification-using-python/</id>
    <published>2016-08-09T07:24:22.000Z</published>
    <updated>2018-04-01T08:20:13.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><blockquote><p>最近在做微信公众号开发在进行网页授权时，微信需要用户自己在授权url中带上一个类似token的<strong>state</strong>的参数，以防止跨站攻击。<br>在经过再三思考之后，自己试着实现一个产生token和验证token的方案。接下就把code贴出来。希望读者指导一下。</p></blockquote><h3 id="2-产生token"><a href="#2-产生token" class="headerlink" title="2.产生token"></a>2.产生token</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h4><blockquote><p>通过hmac sha1 算法产生用户给定的key和token的最大过期时间戳的一个消息摘要，<br>将这个消息摘要和最大过期时间戳通过”:”拼接起来，再进行base64编码，生成最终的token</p></blockquote><h4 id="实现"><a href="#实现" class="headerlink" title="实现:"></a>实现:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"><span class="keyword">import</span> hmac</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_token</span><span class="params">(key, expire=<span class="number">3600</span>)</span>:</span></div><div class="line">    <span class="string">r'''</span></div><div class="line"><span class="string">        @Args:</span></div><div class="line"><span class="string">            key: str (用户给定的key，需要用户保存以便之后验证token,每次产生token时的key 都可以是同一个key)</span></div><div class="line"><span class="string">            expire: int(最大有效时间，单位为s)</span></div><div class="line"><span class="string">        @Return:</span></div><div class="line"><span class="string">            state: str</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    ts_str = str(time.time() + expire)</div><div class="line">    ts_byte = ts_str.encode(<span class="string">"utf-8"</span>)</div><div class="line">    sha1_tshexstr  = hmac.new(key.encode(<span class="string">"utf-8"</span>),ts_byte,<span class="string">'sha1'</span>).hexdigest() </div><div class="line">    token = ts_str+<span class="string">':'</span>+sha1_tshexstr</div><div class="line">    b64_token = base64.urlsafe_b64encode(token.encode(<span class="string">"utf-8"</span>))</div><div class="line">    <span class="keyword">return</span> b64_token.decode(<span class="string">"utf-8"</span>)</div></pre></td></tr></table></figure><h3 id="3-验证token"><a href="#3-验证token" class="headerlink" title="3.验证token"></a>3.验证token</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理:"></a>原理:</h4><blockquote><p>将token进行base64解码,通过token得到token最大过期时间戳和消息摘要。判断token是否过期。<br>如没过期才将 从token中的取得最大过期时间戳进行hmac sha1 算法运算(<strong>注意这里的key要与产生token的key要相同</strong>)，<br>最后将产生的摘要与通过token取得消息摘要进行对比， 如果两个摘要相等，则token有效，否则token无效 。</p></blockquote><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"><span class="keyword">import</span> hmac</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">certify_token</span><span class="params">(key, token)</span>:</span></div><div class="line">    <span class="string">r'''</span></div><div class="line"><span class="string">        @Args:</span></div><div class="line"><span class="string">            key: str</span></div><div class="line"><span class="string">            token: str</span></div><div class="line"><span class="string">        @Returns:</span></div><div class="line"><span class="string">            boolean</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    token_str = base64.urlsafe_b64decode(state).decode(<span class="string">'utf-8'</span>)</div><div class="line">    token_list = token_str.split(<span class="string">':'</span>)</div><div class="line">    <span class="keyword">if</span> len(token_list) != <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    ts_str = token_list[<span class="number">0</span>]</div><div class="line">    <span class="keyword">if</span> float(ts_str) &lt; time.time():</div><div class="line">        <span class="comment"># token expired</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    known_sha1_tsstr = token_list[<span class="number">1</span>]</div><div class="line">    sha1 = hmac.new(key.encode(<span class="string">"utf-8"</span>),ts_str.encode(<span class="string">'utf-8'</span>),<span class="string">'sha1'</span>)</div><div class="line">    calc_sha1_tsstr = sha1.hexdigest()</div><div class="line">    <span class="keyword">if</span> calc_sha1_tsstr != known_sha1_tsstr:</div><div class="line">        <span class="comment"># token certification failed</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span> </div><div class="line">    <span class="comment"># token certification success</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure><h3 id="4-用法"><a href="#4-用法" class="headerlink" title="4.用法"></a>4.用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">key  = <span class="string">"JD98Dskw=23njQndW9D"</span></div><div class="line"><span class="comment"># 一小时后过期</span></div><div class="line">token = generate_token(key, <span class="number">3600</span>)</div><div class="line"></div><div class="line">certify_token(key, token)</div></pre></td></tr></table></figure><h3 id="5-Note"><a href="#5-Note" class="headerlink" title="5.Note!!!"></a>5.Note!!!</h3><blockquote><p>本代码只能在python3.x 中运行，</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;最近在做微信公众号开发在进行网页授权时，微信需要用户自己在授权url中带上一个类似token的&lt;s
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
      <category term="wechat dev" scheme="https://free-free.github.io/tags/wechat-dev/"/>
    
  </entry>
  
  <entry>
    <title>Aiomysql Insertion Operation Failed</title>
    <link href="https://free-free.github.io/2016/03/12/aiomysql-insertion-operation-failed/"/>
    <id>https://free-free.github.io/2016/03/12/aiomysql-insertion-operation-failed/</id>
    <published>2016-03-12T08:04:42.000Z</published>
    <updated>2018-03-04T11:29:16.333Z</updated>
    
    <content type="html"><![CDATA[<h4 id="emotions"><a href="#emotions" class="headerlink" title="emotions:"></a>emotions:</h4><blockquote><p>those days,I am using aiomysql(python3.5) to acess my database .But a ‘strange’ problem make me trouble more times.The problem is I can’t insert data into my database table using aiomysql’s cursor.execute(**) method. Fortunately,I sovled it after refering  aiomysq’s manual.</p></blockquote><h4 id="plateform"><a href="#plateform" class="headerlink" title="plateform:"></a>plateform:</h4><p>1.ubuntu14.04<br>2.python3.5</p><h4 id="error-code"><a href="#error-code" class="headerlink" title="error code:"></a>error code:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> aiomysql </div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line">loop=asyncio.get_event_loop()</div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(loop)</span>:</span></div><div class="line">        pl=<span class="keyword">yield</span> <span class="keyword">from</span> aiomysql.create_pool(host=<span class="string">'127.0.0.1'</span>,user=<span class="string">'root'</span>,password=<span class="string">'xxxxx'</span>,db=<span class="string">'blog'</span>,loop=loop,port=<span class="number">3306</span>)</div><div class="line">        <span class="keyword">with</span> (<span class="keyword">yield</span> <span class="keyword">from</span> pl) <span class="keyword">as</span> con:</div><div class="line">                cursor=<span class="keyword">yield</span> <span class="keyword">from</span> con.cursor()</div><div class="line">                <span class="keyword">yield</span> <span class="keyword">from</span> cursor.execute(<span class="string">'insert into users(`user_name`,`email`,`password`) values("coder","1xxxxxb@gmail.com","FHEUIE@#@@##JNDJA")'</span>)</div><div class="line">                <span class="keyword">yield</span> <span class="keyword">from</span> cursor.close()</div><div class="line">                con.commit()</div><div class="line">        pl.close()</div><div class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> pl.wait_closed()</div><div class="line"></div><div class="line">loop.run_until_complete(insert(loop))</div><div class="line">loop.run_forever()</div></pre></td></tr></table></figure><p><strong>I run the above code many times,but there is still no data in my database table.</strong></p><h4 id="solution"><a href="#solution" class="headerlink" title="solution:"></a>solution:</h4><p><strong>After refering aiomysql’s manual,I found ‘aiomysql.commit’ method  is coroutine,that’s a critical point.just rewrite ‘con.commit()’ to ‘yield from con.commit()’,the problem is sovled!</strong></p><h4 id="correct-code"><a href="#correct-code" class="headerlink" title="correct code:"></a>correct code:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> aiomysql </div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"></div><div class="line">loop=asyncio.get_event_loop()</div><div class="line"><span class="meta">@asyncio.coroutine</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(loop)</span>:</span></div><div class="line">        pl=<span class="keyword">yield</span> <span class="keyword">from</span> aiomysql.create_pool(host=<span class="string">'127.0.0.1'</span>,user=<span class="string">'root'</span>,password=<span class="string">'xxxxx'</span>,db=<span class="string">'blog'</span>,loop=loop,port=<span class="number">3306</span>)</div><div class="line">        <span class="keyword">with</span> (<span class="keyword">yield</span> <span class="keyword">from</span> pl) <span class="keyword">as</span> con:</div><div class="line">                cursor=<span class="keyword">yield</span> <span class="keyword">from</span> con.cursor()</div><div class="line">                <span class="keyword">yield</span> <span class="keyword">from</span> cursor.execute(<span class="string">'insert into users(`user_name`,`email`,`password`) values("coder","1xxxxxb@gmail.com","FHEUIE@#@@##JNDJA")'</span>)</div><div class="line">                <span class="keyword">yield</span> <span class="keyword">from</span> cursor.close()</div><div class="line">                <span class="keyword">yield</span> <span class="keyword">from</span> con.commit()</div><div class="line">        pl.close()</div><div class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> pl.wait_closed()</div><div class="line"></div><div class="line">loop.run_until_complete(insert(loop))</div><div class="line">loop.run_forever()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;emotions&quot;&gt;&lt;a href=&quot;#emotions&quot; class=&quot;headerlink&quot; title=&quot;emotions:&quot;&gt;&lt;/a&gt;emotions:&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;those days,I am using aiomysql(
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="python" scheme="https://free-free.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Git Common Commands</title>
    <link href="https://free-free.github.io/2015/12/21/git-common-commands/"/>
    <id>https://free-free.github.io/2015/12/21/git-common-commands/</id>
    <published>2015-12-21T15:24:09.000Z</published>
    <updated>2018-03-04T11:24:39.256Z</updated>
    
    <content type="html"><![CDATA[<h4 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#配置git</span></div><div class="line">$ git config --global user.name <span class="string">"K-John"</span></div><div class="line">$ git config --global user.email <span class="string">"19941222hb@gmail.com"</span></div><div class="line"><span class="comment">#初始化 git workspace(就是你当前所在的目录)</span></div><div class="line">$ git init</div><div class="line"><span class="comment">#将当前工作区的文件加到暂存区,实际上是将文件的改动加到暂存区</span></div><div class="line">$ git add README</div><div class="line">$ <span class="comment">#将暂存区的内容添加到当前分支所对应的分支的版本库中(git的仓库)</span></div><div class="line">$ git commit -m <span class="string">"desriptions"</span></div><div class="line"><span class="comment">#查看仓库当前的状态</span></div><div class="line">$ git status</div><div class="line"><span class="comment">#修改某一文件,但是没有添加到缓冲区,此时可以用git diff 查看修改前和未修改前的区别</span></div><div class="line">$ git diff README</div><div class="line">$ git diff HEAD -- README <span class="comment">#查看版本库中最新版本文件与工作区文件的区别</span></div><div class="line"><span class="comment">#查看每一次commit的详情</span></div><div class="line">$ git <span class="built_in">log</span> [--pretty=oneline]</div><div class="line"><span class="comment">#回退到上一次commit</span></div><div class="line">$ git reset  --hard HEAD^</div><div class="line"><span class="comment">#回退到上上一次commit(没回退一次相应的commit详情都会自动消失)</span></div><div class="line"><span class="comment">#HEAD 相当于一个指针,总是指向当前的分支的指针(分支名代表一个分支的指针),而当前分支指针指向commit,(HEAD--&gt;分支指针---&gt;commit) 改变HEAD就相当于改变&gt;    分支指针 所指向的commit,这样就可以在不同commit之间切换,每次提交分支指针都会向前移动一步</span></div><div class="line">$ git reset --hard HEAD^^</div><div class="line"><span class="comment">#查看当前每一次对commit的操作,用于回到未来某一版本时查看commit id</span></div><div class="line">$ git reflog</div><div class="line"><span class="comment">#回退到历史版本,又想要回到未来某一版本</span></div><div class="line">$ git  reset --hard 3628164 <span class="comment">#(这一串数字为commit id的前几位数字,这样就不用将整个commit id写出来,通过git reflog查看未来的commit id)</span></div><div class="line"><span class="comment">#撤销工作区内对文件的修改(前提是在你没有将文件添加到暂存区)</span></div><div class="line">$ git checkout -- README</div><div class="line"><span class="comment">#撤销暂存区的修改,并重新将修改放回工作区</span></div><div class="line">$ git reset HEAD  README </div><div class="line"><span class="comment">#从版本库中删除某一文件</span></div><div class="line">$ git rm LICENSE</div><div class="line">$ git commit -m <span class="string">"deleted LICENSE"</span></div><div class="line"><span class="comment">#从版本库中恢复已经删除的文件,只需要回到以前的版本</span></div><div class="line"><span class="comment">#创建ssh key</span></div><div class="line">$ ssh-keygen -t rsa -C <span class="string">"19941222hb@gmail.com"</span></div><div class="line"><span class="comment">#将本地仓库关联到github的远程仓库(前提是已经将你电脑的ssh key添加到github的SSH key列表)</span></div><div class="line">$ git remote add origin git@github.com:free-free/algorithm.git   <span class="comment">#origin 为远程仓库的叫法(只是为了方面操作),也可以自己取名;free-free为github账号名;a    lgorithm为你想要关 联的仓库,必须现在现在github上创建</span></div><div class="line"><span class="comment">#将本地版本库推送到远程github库</span></div><div class="line">$ git push -u origin master <span class="comment"># -u 参数 Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来 </span></div><div class="line"><span class="comment">#推送非主分支到到远程库,github会自动建立一个dev分支与你本地的dev分支对应</span></div><div class="line">$ git push origin dev</div><div class="line"><span class="comment">#将远程的仓库克隆到本地</span></div><div class="line">$ git <span class="built_in">clone</span> git@github.com:free/algorithm.git</div><div class="line"><span class="comment">#git创建一个分支只需要重新创建一个分支指针,并且将该分支指针指向创建时所对应的commit,分支间切换就只需要让HEAD指向另一分支指针,分支切换后对文件的修&gt;    改就指向该分支了</span></div><div class="line"><span class="comment">#创建分支,并且切换到分支</span></div><div class="line">$ git checkout -b dev <span class="comment">#相当于 git branch dev git checkout dev</span></div><div class="line"><span class="comment">#切换到指定分支</span></div><div class="line">$ git checkout dev</div><div class="line"><span class="comment">#查看分支数</span></div><div class="line">$ git branch</div><div class="line"><span class="comment">#创建新分支 </span></div><div class="line">$ git branch dev</div><div class="line"><span class="comment">#删除分支</span></div><div class="line">$ git branch -d dev</div><div class="line"><span class="comment">#强制删除一个没有合并的分支</span></div><div class="line">$ git branch -D dev</div><div class="line"><span class="comment">#合并指定分支到当前分支(假设当前出master分支,则下面指令将dev分支合并到master分支)</span></div><div class="line">$ git merge dev <span class="comment">#需要自己解决合并冲突</span></div><div class="line"><span class="comment">#合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。--no-ff(禁用Fast forward mode)方式的git merge</span></div><div class="line">$ git merge --no-ff -m <span class="string">"merge dev into master"</span>  dev</div><div class="line"><span class="comment">#假设你在dev分支上工作,突然需要跳到bug分支去修复bug,但是你当前的工作区的工作还没#完成,但是你又不想要提交修改,这是你可以通过以前命令将当前工作保存&gt;    起来,然后切换到其他bug分支去修复bug,</span></div><div class="line">$ git stash</div><div class="line"><span class="comment">#当你把bug修复完之后,切换到刚才工作的分支,这是可以通过命令去恢复刚才没有提交的工作区</span></div><div class="line">$ git stash list <span class="comment">#查看所有的stash</span></div><div class="line">$ git stash apply <span class="comment"># 恢复刚才未提交的工作, 但是没有将stash删除,这是需要通过以下命令将stash 的内容删除</span></div><div class="line">$ git stash drop</div><div class="line">$ git stash pop <span class="comment"># 恢复stash的内容,并且删除stash的内容,相当于git stash apply,git stash drop</span></div><div class="line"><span class="comment"># 查看远程库的信息</span></div><div class="line">$ git remote</div><div class="line">$ git remote -v <span class="comment">#更详细</span></div><div class="line"><span class="comment"># 新建分支并将远程仓库某一个分支克隆到当前分支</span></div><div class="line">$ git checkout -b dev origin/dev</div><div class="line"><span class="comment"># 当远程仓库最新的提交与试图推送的提交有矛盾的时候,用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，commit 之后,再推送</span></div><div class="line">$ git pull</div><div class="line"><span class="comment"># 如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用以下命令解决</span></div><div class="line">$ git branch --<span class="built_in">set</span>-upstream branch-name orgin/branch-name</div><div class="line"><span class="comment"># 为当前的版本打一个标签(标签其实也是一个指向commit指针,但是它不能改变),默认是为最新的commit打标签</span></div><div class="line">$ git tag v1.0</div><div class="line">$ git tag v1.1  6224937(commit id) <span class="comment">#为某一次commit打标签</span></div><div class="line">$ git tag -a v1.2 -m <span class="string">'version 1.2 released'</span> 3628164 <span class="comment">#创建带说明的标签</span></div><div class="line"><span class="comment"># 查看所有标签(标签不是按时间顺序列出而是按字母顺序列出)</span></div><div class="line">$ git tag</div><div class="line"><span class="comment"># 显示某一标签对应的详细信息</span></div><div class="line">$ git show v1.0</div><div class="line"><span class="comment"># 删除某一标签</span></div><div class="line">$ git tag -d v1.0</div><div class="line"><span class="comment"># 推送某个标签到远程仓库</span></div><div class="line">$ git push origin v1.0</div><div class="line"><span class="comment"># 一次性推送全部尚未推送远程的本地标签</span></div><div class="line">$ git push origin --tags</div><div class="line"><span class="comment"># 删除远程的标签</span></div><div class="line">$ git push origin :refs/tags/v0.9</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;git常用命令&quot;&gt;&lt;a href=&quot;#git常用命令&quot; class=&quot;headerlink&quot; title=&quot;git常用命令&quot;&gt;&lt;/a&gt;git常用命令&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="git" scheme="https://free-free.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Build Your Own Git Remote Repository on Centos6.5</title>
    <link href="https://free-free.github.io/2015/11/15/build-your-own-git-remote-repository-on-Centos6-5/"/>
    <id>https://free-free.github.io/2015/11/15/build-your-own-git-remote-repository-on-Centos6-5/</id>
    <published>2015-11-15T08:49:06.000Z</published>
    <updated>2018-03-04T11:24:35.888Z</updated>
    
    <content type="html"><![CDATA[<h4 id="远程仓库搭建"><a href="#远程仓库搭建" class="headerlink" title="远程仓库搭建"></a>远程仓库搭建</h4><h5 id="step1-安装git"><a href="#step1-安装git" class="headerlink" title="step1:安装git"></a>step1:安装git</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install git</div></pre></td></tr></table></figure><h5 id="step2-创建用户git-用来运行git服务"><a href="#step2-创建用户git-用来运行git服务" class="headerlink" title="step2:创建用户git,用来运行git服务"></a>step2:创建用户git,用来运行git服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ useradd git </div><div class="line">$ passwd git</div></pre></td></tr></table></figure><h5 id="step3-创建登录用户证书"><a href="#step3-创建登录用户证书" class="headerlink" title="step3:创建登录用户证书"></a>step3:创建登录用户证书</h5><p>收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个 </p><h5 id="step4-初始化git仓库"><a href="#step4-初始化git仓库" class="headerlink" title="step4:初始化git仓库"></a>step4:初始化git仓库</h5><ol><li>创建目录/git,在/git目下再创建一个.git结尾的目录,作为一仓库,这里创建一个/git/test.git,并且进入/git目录;</li><li>初始化仓库git init —bare test.git Git就会创建一个裸仓库，裸仓库没有工作区，服务器上的Git仓库纯粹是为了共享 所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾;</li><li>将仓库的owner改为git  chown -R git:git test.git;</li><li>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成,找到git用户的那一行将git:x:500:500::/home/git:/bin/bash改为git:x:500:500::/home/git:/usr/bin/git-shell .git-shell每次一登录就自动退出.</li></ol><h5 id="step5-自此整个git远程仓库就搭建完成-就可以像使用github那样使用搭建好的远程仓库与你的team功能开发了"><a href="#step5-自此整个git远程仓库就搭建完成-就可以像使用github那样使用搭建好的远程仓库与你的team功能开发了" class="headerlink" title="step5:自此整个git远程仓库就搭建完成,就可以像使用github那样使用搭建好的远程仓库与你的team功能开发了."></a>step5:自此整个git远程仓库就搭建完成,就可以像使用github那样使用搭建好的远程仓库与你的team功能开发了.</h5><h4 id="本地与搭建好的仓库交互"><a href="#本地与搭建好的仓库交互" class="headerlink" title="本地与搭建好的仓库交互"></a>本地与搭建好的仓库交互</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@192.168.0.01:/git/test.git   <span class="comment">#这里的ip是你主机的ip</span></div><div class="line">$ git <span class="built_in">clone</span> git@192.168.0.1:/git/test.git  <span class="comment">#将远程仓库克隆到本地的仓库</span></div><div class="line">$ git push origin master   <span class="comment">#推送到远程仓库</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;远程仓库搭建&quot;&gt;&lt;a href=&quot;#远程仓库搭建&quot; class=&quot;headerlink&quot; title=&quot;远程仓库搭建&quot;&gt;&lt;/a&gt;远程仓库搭建&lt;/h4&gt;&lt;h5 id=&quot;step1-安装git&quot;&gt;&lt;a href=&quot;#step1-安装git&quot; class=&quot;header
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
      <category term="git" scheme="https://free-free.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>The Working Machanism of Rcd in Linux</title>
    <link href="https://free-free.github.io/2015/07/21/the-machanism-of-rcd-in-linux/"/>
    <id>https://free-free.github.io/2015/07/21/the-machanism-of-rcd-in-linux/</id>
    <published>2015-07-20T16:34:10.000Z</published>
    <updated>2018-03-04T11:41:41.483Z</updated>
    
    <content type="html"><![CDATA[<p>/etc/init.d 是 /etc/rc.d/init.d 的软链接(soft link)。可以通过 ll 命令查看，如下：</p><p>init.d指的是/etc/rc.d/init.d目录。</p><p>本文包括3部分内容</p><p>1、 Linux的引导过程</p><p>2、 运行级别</p><p>3、 /etc/rc.d/ 与/etc/rc.d/init.d的关系</p><p>   “/etc/rc.d/init.d/目录下的脚本就类似与windows中的注册表，在系统启动的时候某些指定脚本将被执行”。开始之前，先引用李善明经理昨天晚上总结时的一个理解，让大家先对init.d目录有个大概的印象。在进入init.d之前，我们一起来做两个准备工作，linux的引导过程和运行级别的概念。</p><h4 id="一、-Linux的引导过程"><a href="#一、-Linux的引导过程" class="headerlink" title="一、 Linux的引导过程"></a>一、 Linux的引导过程</h4><p>   系统启动之后，在进入init.d之前，我们先来看看系统都做了什么工作。</p><p>   系统加电之后，首先进行的硬件自检，然后是bootloader对系统的初始化，加载内核。内核被加载到内存中之后，就开始执行了。一旦内核启动运行，对硬件的检测就会决定需要对哪些设备驱动程序进行初始化。从这里开始，内核就能够挂装根文件系统（这个过程类似于Windows识别并存取C盘的过程）。内核挂装了根文件系统，并已初始化所有的设备驱动程序和数据结构等之后，就通过启动一个叫init的用户级程序，完成引导进程。</p><h4 id="二、-运行级别-run-level"><a href="#二、-运行级别-run-level" class="headerlink" title="二、 运行级别(run level)"></a>二、 运行级别(run level)</h4><p>   Init进程是系统启动之后的第一个用户进程，所以它的pid(进程编号)始终为1。init进程上来首先做的事是去读取/etc/目录下inittab文件中initdefault id值，这个值称为运行级别(run-level)。它决定了系统启动之后运行于什么级别。运行级别决定了系统启动的绝大部分行为和目的。这个级别从0到6 ，具有不同的功能。不同的运行级定义如下： </p><p>　　# 0 - 停机（千万别把initdefault设置为0，否则系统永远无法启动）</p><p>　　# 1 - 单用户模式</p><p>　　# 2 - 多用户，没有 NFS</p><p>　　# 3 - 完全多用户模式(标准的运行级)</p><p>　　# 4 – 系统保留的</p><p>　　# 5 - X11 （x window)</p><p>　　# 6 - 重新启动 （千万不要把initdefault 设置为6，否则将一直在重启 ）</p><p>   这是两个表较常用运行级别(后期补上),左图redhat9 级别3启动的将是文本界面，右图fc7级别5启动的将是图形界面。</p><h4 id="三、-etc-rc-d-与-etc-rc-d-init-d的关系"><a href="#三、-etc-rc-d-与-etc-rc-d-init-d的关系" class="headerlink" title="三、 /etc/rc.d/与/etc/rc.d/init.d的关系"></a>三、 /etc/rc.d/与/etc/rc.d/init.d的关系</h4><p>   写到这里，应该差不多要进入init.d了，可是我觉得单写/etc/rc.d/init.d的话不一定能说得清楚明白，就拿它跟/etc/rc.d这个它上一级的目录一起来讨论，可能比较合适一些，因为他们之间有着千丝万缕的关系。</p><p>   在这里先解释一下init.d里面放的都是什么东西。这个目录存放的是一些脚本，一般是linux以rpm包安装时设定的一些服务的启动脚本。系统在安装时装了好多rpm包，这里面就有很多对应的脚本。执行这些脚本可以用来启动，停止，重启这些服务。</p><p>   前面说到，/etc/rc.d/init.d这个目录下的脚本就类似与windows中的注册表，在系统启动的时候执行。程序运行到这里(init进程读取了运行级别)，相信从命名的角度大家也能猜到该运行/etc/rc.d/init.d里面的脚本了，不然它为什么也叫init(.d)呢是吧。没错，是该运行init.d里的脚本了，但是并不是直接运行，而是有选择的因为系统并不需要启动所有的服务。</p><p>   那么，系统是如何选择哪些需要启动哪些不要呢？这时刚才说的运行级别就起作用了。在决定了系统启动的run level之后，/etc/rc.d/rc这个脚本先执行。在RH9和FC7的源码中它都是一上来就check_runlevel()（虽然实现的代码不一样，也大同小异），知道了运行级别之后，对于每一个运行级别，在rc.d下都有一个子目录分别是rc0.d，rc1.d ….. rc6.d。每个目录下都是到init.d目录的一部分脚本一些链接。每个级别要执行哪些服务就在相对应的目录下，比如级别5要启动的服务就都放在rc5.d下，但是放在这个rc5.d下的都是一些链接文件，链接到init.d中相对应的文件，真正干活到init.d里的脚本。</p><p>redhat9 ls</p><p>fc7     ls -l</p><p>   这样看的就很清楚了。</p><p>到这里，估计大家可能都比较清楚了，我开始也以为是这样的。可是后来我仔细看过和比较这些链接文件和init.d里真正被执行的脚本的文件名之后，一直有几个问题没弄明白。借着写这个文章的机会，我做了一些功课，总算是大概解开了那些疑惑。</p><p>   1、这些链接文件前面为什么会带一个Kxx或者Sxx呢？</p><p>是这样的，带K的表示停止(Kill)一个服务，S表示开启(Start)的意思</p><p>   2、K和S后面带的数字呢？干什么用的</p><p>   这个我开始的时候还以为是排列起来好看或者数数用呢。后来发现不是的。它的作用是用来排序，就是决定这些脚本执行的顺序，数值小的先执行，数值大的后执行。很多时候这些执行顺序是很重要的，比如要启动Apache服务，就必须先配置网络接口，不然一个没有IP的机子来启动http服务那岂不是很搞笑。。。</p><p>   3、无意中我发现同一个服务带S的和带K的链接到init.d之后是同一个脚本。我就纳闷了，为什么会是执行同一个脚本呢？</p><p>   这个时候真是S和K的妙用了，原来S和K并不止是用来看起来分的清楚而已。S给和K还分别给init.d下面的脚本传递了start和stop的参数。哦，是这样的(焕然大悟的样子,呵呵)！这时我才想起来原来曾经无数用过的/etc/rc.d/init.d/network restart命令。原来传S时相当于执行了/etc/rc.d/init.d/xxx start这条命令，当然K就相当于/etc/rc.d/init.d/xxx stop了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;/etc/init.d 是 /etc/rc.d/init.d 的软链接(soft link)。可以通过 ll 命令查看，如下：&lt;/p&gt;
&lt;p&gt;init.d指的是/etc/rc.d/init.d目录。&lt;/p&gt;
&lt;p&gt;本文包括3部分内容&lt;/p&gt;
&lt;p&gt;1、 Linux的引导过程
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Partition Disk by Fdisk in Linux</title>
    <link href="https://free-free.github.io/2015/01/24/partition-disk-by-fdisk/"/>
    <id>https://free-free.github.io/2015/01/24/partition-disk-by-fdisk/</id>
    <published>2015-01-24T12:50:44.000Z</published>
    <updated>2018-03-04T11:44:01.722Z</updated>
    
    <content type="html"><![CDATA[<p>​     </p><h4 id="step1："><a href="#step1：" class="headerlink" title="step1："></a>step1：</h4><p>​            准备有一个新的磁盘，我这里是sdb，用fdisk -l 命令查看当前系统的磁盘信息。</p><h4 id="step2-用fdisk-dev-sdb-要分区的磁盘-，"><a href="#step2-用fdisk-dev-sdb-要分区的磁盘-，" class="headerlink" title="step2:用fdisk  /dev/sdb (要分区的磁盘)，    "></a>step2:用fdisk  /dev/sdb (要分区的磁盘)，    <img src="http://img.blog.csdn.net/20150124202402390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjg0MTg3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></h4><p>  之后进入fdisk的见面，输入m打印出所有fdisk的命令，几个常用命令的意思：p：答应出分区磁盘已经分的区，n：建立新的分区（输入n命令后要选择分区类型，e代表扩展分区，p代表主分区），d：删除一个分区，w:将新建立的分区写入分区表，并推出fdisk界面，q：放弃当前所有操作，并推出fdisk</p><p><img src="http://img.blog.csdn.net/20150124203138200?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjg0MTg3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"><img src="http://img.blog.csdn.net/20150124203203753?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjg0MTg3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><img src="http://img.blog.csdn.net/20150124203203234?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjg0MTg3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><img src="http://img.blog.csdn.net/20150124203305404?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjg0MTg3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><h4 id="step3："><a href="#step3：" class="headerlink" title="step3："></a>step3：</h4><p>​     输入w推出fdisk界面，在终端输入partprobe命令，让内核更新分区表，为已经分好的区建立文件系统：在终端输入 mke2fs -t ext4 /dev/sdb1(-t参数文件系统类型)或者mkfs.ext4 /dev/sdb1为sdb1分区建立一个ext4文件系统</p><p><img src="http://img.blog.csdn.net/20150124203742734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjg0MTg3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><h4 id="step4："><a href="#step4：" class="headerlink" title="step4："></a>step4：</h4><p>​        挂载分区，这里将刚才建立文件系统的分区挂载到/mnt目录下，用mount +/dev/sdb1(要挂载的分区）+/mnt（分区挂载的目录），挂载完后用mount -l查看挂载情况，或者用df -h命令查看目录挂载情况。mount 有几个参数值得提一下</p><p>​           1.-t    执行制定文件系统的类型</p><p>​           2.-o  +挂载选项：</p><p>​                          ro，rw  ：以只读或只写形式挂载，默认是rw</p><p>​                          sync  ：不适用缓存，所有操作直接写入磁盘</p><p>​                          async：使用缓存</p><p>​                          noatime：每次访问文件的时候不更新文件的访问时间</p><p>​                          atime：每次访问文件的时候更新文件的访问时间</p><p>​                          remount：从新挂载文件系统</p><p>​               例如：mount -o remount，ro   /dev/sdb1      /mnt/</p><p>​      <img src="http://img.blog.csdn.net/20150124204729765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjg0MTg3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>  <img src="http://img.blog.csdn.net/20150124204752125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjg0MTg3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​     &lt;/p&gt;
&lt;h4 id=&quot;step1：&quot;&gt;&lt;a href=&quot;#step1：&quot; class=&quot;headerlink&quot; title=&quot;step1：&quot;&gt;&lt;/a&gt;step1：&lt;/h4&gt;&lt;p&gt;​            准备有一个新的磁盘，我这里是sdb，用fdisk -l
      
    
    </summary>
    
      <category term="tech" scheme="https://free-free.github.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://free-free.github.io/tags/linux/"/>
    
  </entry>
  
</feed>
